{"version":3,"file":"effector.mjs","sources":["effector/createNode.ts","effector/tag.ts","effector/naming.ts","effector/collection.ts","effector/region.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/attach.ts","effector/createApi.ts","effector/createDomain.ts","effector/fromObservable.ts","effector/sample.ts","effector/guard.ts","effector/merge.ts","effector/restore.ts","effector/split.ts","effector/fork.ts","effector/observable.ts","effector/validate.ts","effector/throw.ts","effector/is.ts","effector/id.ts","effector/bind.ts","effector/step.ts","effector/stateRef.ts","effector/caller.ts","effector/getter.ts","effector/own.ts","effector/kernel.ts","effector/config.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts"],"sourcesContent":["import {Graph, Graphite, Cmd, StateRef} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK, STORE} from './tag'\n\nconst arrifyNodes = (list: Graphite | Graphite[] = []): Graph[] => {\n  const result = []\n  if (Array.isArray(list)) {\n    for (let i = 0; i < list.length; i++) {\n      if (Array.isArray(list[i])) result.push(...(list[i] as any))\n      else result.push(list[i])\n    }\n  } else {\n    result.push(list)\n  }\n  return result.map(getGraph)\n}\nexport const addToReg = (\n  {hasRef, type, data}: any,\n  reg: Record<string, StateRef>,\n) => {\n  let store\n  if (hasRef) {\n    store = data.store\n    reg[store.id] = store\n  }\n  if (type === 'mov' && data.to === STORE) {\n    store = data.target\n    reg[store.id] = store\n  }\n}\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: Graphite | Graphite[]\n  source?: Graphite | Graphite[]\n  parent?: Graphite | Graphite[]\n  to?: Graphite | Graphite[]\n  target?: Graphite | Graphite[]\n  child?: Graphite | Graphite[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: Graphite | Graphite[]\n    owners?: Graphite | Graphite[]\n  }\n} = {}): Graph {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  const reg: {[id: string]: StateRef} = {}\n  for (let i = 0; i < node.length; i++) {\n    const item = node[i]\n    if (!item) continue\n    seq.push(item)\n    addToReg(item, reg)\n  }\n  const result: Graph = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n    reg,\n  }\n  for (let i = 0; i < links.length; i++) {\n    getOwners(links[i]).push(result)\n  }\n  for (let i = 0; i < owners.length; i++) {\n    getLinks(owners[i]).push(result)\n  }\n  for (let i = 0; i < sources.length; i++) {\n    sources[i].next.push(result)\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const FORK_COUNTER = 'forkInFlightCounter'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import {Store, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent} from './getter'\n\nexport const joinName = (unit: any, tag: string) => '' + unit.shortName + tag\n\nexport const mapName = (unit: any, name?: string) =>\n  name == null ? joinName(unit, ' → *') : name\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  //@ts-ignore\n  for (const key in objOrArr) {\n    //@ts-ignore\n    const unit = objOrArr[key]\n    if (unit != null) {\n      name += comma\n      //@ts-ignore\n      name += is.unit(unit) ? unit.compositeName.fullName : unit.toString()\n    }\n    i += 1\n    /* inlined max object names constant */\n    if (i === 25) break\n    comma = ', '\n  }\n  name += ')'\n  return name\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  const compositeName = createName(rawName, getParent(store))\n  store.shortName = rawName\n  if (!store.compositeName) {\n    store.compositeName = compositeName\n    return\n  }\n  const currentComposite = store.compositeName\n  currentComposite.path = compositeName.path\n  currentComposite.shortName = compositeName.shortName\n  currentComposite.fullName = compositeName.fullName\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  let composite\n  const shortName = name\n  if (!parent) {\n    if (name.length === 0) {\n      path = []\n    } else {\n      path = [name]\n    }\n    fullName = name\n  } else {\n    composite = parent.compositeName\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      if (composite.fullName.length === 0) {\n        fullName = name\n      } else {\n        fullName = '' + composite.fullName + '/' + name\n      }\n    }\n  }\n  return {shortName, fullName, path}\n}\n","export const forIn = (obj: any, cb: (value: any, key: string) => void) => {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = (list: any[], item: any) => list.includes(item)\n\nexport const removeItem = (list: any[], item: any) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","import {getValue, getGraph, getParent} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: any\n  sidRoot?: string\n}\n\nexport const addToRegion = (unit: any) => {\n  if (regionStack) own(getValue(regionStack), [unit])\n  return unit\n}\n\nlet regionStack: RegionStack | null = null\n\nexport const readTemplate = () => regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}ɔ${sid}`\n  return sid\n}\n\nexport function withRegion(unit: any, cb: () => void) {\n  const unitMeta = getGraph(unit).meta\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: unitMeta.template || readTemplate(),\n    sidRoot: unitMeta.sidRoot || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {\n      sidRoot: readSidRoot(sid),\n      name,\n      loc,\n      method,\n    },\n  })\n  return withRegion(sidNode, fn)\n}\n","import {observableSymbol} from './observable'\n\nimport {is, isObject, isFunction, assertObject} from './is'\nimport {Store, Event} from './unit.h'\n\nimport {step} from './typedef'\nimport {createStateRef, readRef} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {bind} from './bind'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, currentPage, forkPage, setCurrentPage} from './kernel'\n\nimport {Subscriber, Config} from './index.h'\nimport {createName, mapName, joinName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {addToRegion, readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getConfig,\n  getNestedConfig,\n  getStoreState,\n  getGraph,\n  getParent,\n} from './getter'\nimport {includes} from './collection'\nimport {throwError} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, REG_A} from './tag'\n\nconst normalizeConfig = (part: any, config: any) => {\n  if (isObject(part)) {\n    normalizeConfig(getConfig(part), config)\n    if (part.name != null) {\n      if (isObject(part.name)) normalizeConfig(part.name, config)\n      else if (isFunction(part.name)) config.handler = part.name\n      else config.name = part.name\n    }\n    if (part.loc) config.loc = part.loc\n    if (part.sid || part.sid === null) config.sid = part.sid\n    if (part.handler) config.handler = part.handler\n    if (getParent(part)) config.parent = getParent(part)\n    if ('strict' in part) config.strict = part.strict\n    if (part.named) config.named = part.named\n    normalizeConfig(getNestedConfig(part), config)\n  }\n  return config\n}\n\nexport const applyParentHook = (\n  source: any,\n  target: any,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nlet isStrict: boolean\nexport const initUnit = (\n  kind: any,\n  unit: any,\n  rawConfigA: any,\n  rawConfigB?: any,\n) => {\n  const config = normalizeConfig(\n    {\n      name: rawConfigB,\n      config: rawConfigA,\n    },\n    {},\n  )\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  let {parent = null, sid = null, strict = true, named = null} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n\n  const meta: Record<string, any> = {\n    unit: unit.kind = kind,\n    name: unit.shortName = name,\n    sid: unit.sid = readSidRoot(sid),\n    named,\n    unitId: unit.id = id,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => fn(unit)\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => {\n              if (observer.next) {\n                observer.next(upd)\n              }\n            },\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  isStrict = strict\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst createComputation = (from: any, to: any, op: any, fn: Function) =>\n  createLinkNode(from, to, {\n    scope: {fn},\n    node: [step.compute({fn: callStack})],\n    meta: {op},\n  })\n\nconst createEventFiltration = (event: any, op: string, fn: any, node: any) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = fn.fn\n  }\n  const mapped = createEvent(joinName(event, ' →? *'), config)\n  createLinkNode(event, mapped, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n  return mapped\n}\n\nfunction callCreate(unit: any, template: any, payload: any, args: any[]): any {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const event: any = (payload: Payload, ...args: any[]) => {\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }\n  event.graphite = createNode({\n    meta: initUnit(EVENT, event, maybeConfig, nameOrConfig),\n  })\n  //eslint-disable-next-line no-unused-vars\n  event.create = (payload: any, _: any) => {\n    const target = forkPage ? forkPage.find(event) : event\n    launch(target, payload)\n    return payload\n  }\n  event.watch = bind(watchUnit, event)\n  event.map = (fn: any) => {\n    let config\n    let name\n    if (isObject(fn)) {\n      config = fn\n      name = fn.name\n      fn = fn.fn\n    }\n    const mapped = createEvent(mapName(event, name), config)\n    createComputation(event, mapped, MAP, fn)\n    return mapped\n  }\n  event.filter = (fn: any) =>\n    createEventFiltration(event, FILTER, fn.fn ? fn : fn.fn, [\n      step.filter({fn: callStack}),\n    ])\n  event.filterMap = (fn: any) =>\n    createEventFiltration(event, 'filterMap', fn, [\n      step.compute({fn: callStack}),\n      step.check.defined(),\n    ])\n  event.prepend = (fn: any) => {\n    const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n      parent: getParent(event),\n    })\n    const template = readTemplate()\n    if (template) {\n      getGraph(contramapped).seq.push(template.upward)\n    }\n    createComputation(contramapped, event, 'prepend', fn)\n    applyParentHook(event, contramapped)\n    return contramapped\n  }\n  const template = readTemplate()\n  return addToRegion(event)\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const plainState = createStateRef(defaultState)\n  const oldState = createStateRef(defaultState)\n  const updates = createNamedEvent('updates')\n  const template = readTemplate()\n  plainState.after = [{type: 'copy', to: oldState}]\n  if (template) {\n    template.plain.push(plainState, oldState)\n  }\n  const plainStateId = plainState.id\n  const store: any = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage && forkPage.reg[plainStateId]) {\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState(state: any) {\n      let target\n      if (forkPage) {\n        target = forkPage.nodeMap[getGraph(store).id]\n      }\n      if (!target) target = store\n      launch({\n        target,\n        params: state,\n        defer: true,\n      })\n    },\n    reset(...units: any[]) {\n      for (const unit of units) store.on(unit, () => store.defaultState)\n      return store\n    },\n    on(events: any, fn: Function) {\n      if (Array.isArray(events)) {\n        for (const event of events) {\n          onEvent(event, fn)\n        }\n      } else {\n        onEvent(events, fn)\n      }\n      return store\n    },\n    off(unit: any) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: any, firstState?: any) {\n      let config\n      let name\n      if (isObject(fn)) {\n        config = fn\n        name = fn.name\n        firstState = fn.firstState\n        fn = fn.fn\n      }\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (storeState !== undefined) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: mapName(store, name),\n        config,\n        strict: false,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, false, fn)\n\n      getStoreState(innerStore).before = [\n        {\n          type: MAP,\n          fn,\n          from: plainState,\n        },\n      ]\n      if (template) {\n        if (!includes(template.plain, plainState)) {\n          if (!includes(linkNode.seq, template.loader)) {\n            linkNode.seq.unshift(template.loader)\n          }\n        }\n      }\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        const template = readTemplate()\n        if (template) {\n          template.watch.push({\n            of: plainState,\n            fn: eventOrFn,\n          })\n        } else {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      if (!isFunction(fn)) throwError('second argument should be a function')\n      return eventOrFn.watch((payload: any) => fn(store.getState(), payload))\n    },\n  }\n  function onEvent(event: any, fn: Function) {\n    store.off(event)\n    getSubscribers(store).set(\n      event,\n      createSubscription(updateStore(event, store, 'on', true, fn)),\n    )\n  }\n  store.graphite = createNode({\n    scope: {state: plainState},\n    node: [\n      step.check.defined(),\n      step.update({\n        store: plainState,\n      }),\n      step.check.changed({\n        store: oldState,\n      }),\n      step.update({\n        store: oldState,\n      }),\n    ],\n    child: updates,\n    meta: initUnit(STORE, store, props),\n  })\n  if (isStrict && defaultState === undefined)\n    throwError(\"current state can't be undefined, use null instead\")\n  own(store, [updates])\n  return addToRegion(store)\n}\n\nconst updateStore = (\n  from: any,\n  store: Store<any>,\n  op: string,\n  stateFirst: boolean,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const node = [\n    step.mov({store: storeRef, to: REG_A}),\n    step.compute({\n      fn: stateFirst ? callARegStack : callStackAReg,\n    }),\n    step.check.defined(),\n    step.check.changed({store: storeRef}),\n    step.update({store: storeRef}),\n  ]\n  const template = readTemplate()\n  if (template) {\n    node.unshift(template.loader)\n    node.push(template.upward)\n    if (is.store(from)) {\n      const ref = getStoreState(from)\n      if (!includes(template.plain, ref)) {\n        //if (!includes(node, template.loader)) {\n        //  node.unshift(template.loader)\n        //}\n        if (!includes(template.closure, ref)) {\n          template.closure.push(ref)\n        }\n        if (!storeRef.before) storeRef.before = []\n        storeRef.before.push({\n          type: 'closure',\n          of: ref,\n        })\n      }\n    } else {\n      //if (!includes(node, template.loader)) {\n      //  node.unshift(template.loader)\n      //}\n    }\n  }\n  return createLinkNode(from, store, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n}\n","import {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef} from './stateRef'\nimport {step} from './typedef'\nimport {onConfigNesting} from './config'\nimport {getStoreState} from './getter'\nimport {is, isFunction, isObject} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {throwError} from './throw'\nimport {readTemplate} from './region'\nimport {forIn, includes} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  onConfigNesting(args[0], (injectedData, userConfig) => {\n    config = injectedData\n    args = userConfig\n  })\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      handler = spreadArgs(handler)\n    }\n  }\n  if (!isObject(structStoreShape)) throwError('shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst spreadArgs = (fn: Function) => (list: any[]) => fn(...list)\n\nconst storeCombination = (\n  isArray: boolean,\n  obj: any,\n  config?: string,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => list.slice() : (obj: any) => ({...obj})\n  const defaultState: any = isArray ? [] : {}\n  const template = readTemplate()\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  if (template) {\n    template.plain.push(rawShape, isFresh)\n  }\n  const store = createStore(stateNew, {\n    name: config ? config : unitObjectName(obj),\n  })\n  const node = [\n    step.check.defined(),\n    step.mov({\n      store: rawShape,\n      to: REG_A,\n    }),\n    //prettier-ignore\n    step.filter({\n      fn: (upd, {key}, {a}) => upd !== a[key],\n    }),\n    step.mov({\n      store: isFresh,\n      to: 'b',\n    }),\n    step.compute({\n      fn(upd, {clone, key}, reg) {\n        if (reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n      },\n    }),\n    step.mov({\n      from: REG_A,\n      target: rawShape,\n    }),\n    step.mov({\n      from: VALUE,\n      store: false,\n      target: isFresh,\n    }),\n    step.barrier({priority: BARRIER}),\n    step.mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n    }),\n    step.mov({store: rawShape}),\n    fn && step.compute({fn}),\n    step.check.changed({\n      store: getStoreState(store),\n    }),\n  ]\n  const before: any[] = (rawShape.before = [])\n  forIn(obj, (child, key) => {\n    if (!is.store(child)) {\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, {\n      scope: {key, clone},\n      node,\n      meta: {op: 'combine'},\n    })\n    const childRef = getStoreState(child)\n    before.push({\n      type: 'field',\n      field: key,\n      from: childRef,\n    })\n    if (template) {\n      if (!includes(template.plain, childRef)) {\n        linkNode.seq.unshift(template.loader)\n      }\n    }\n  })\n\n  store.defaultShape = obj\n  rawShape.after = [\n    fn\n      ? {\n          type: MAP,\n          to: getStoreState(store),\n          fn,\n        }\n      : {\n          type: 'copy',\n          to: getStoreState(store),\n        },\n  ]\n  if (!template) {\n    store.defaultState = fn\n      ? (getStoreState(store).current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n","export function createDefer(): {\n  rs: (value: any) => any\n  rj: (value: any) => any\n  req: Promise<any>\n} {\n  const result = {} as {\n    rs: (value: any) => any\n    rj: (value: any) => any\n    req: Promise<any>\n  }\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","import {step} from './typedef'\nimport {getForkPage, getGraph, getParent} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch} from './kernel'\nimport {createNamedEvent, createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {throwError} from './throw'\nimport {EFFECT} from './tag'\n\nexport function createEffect<Payload, Done>(\n  nameOrConfig: any,\n  maybeConfig: any,\n) {\n  const instance: any = createEvent(nameOrConfig, maybeConfig)\n  let handler =\n    instance.defaultConfig.handler ||\n    (() => throwError(`no handler used in ${instance.getType()}`))\n  const node = getGraph(instance)\n  node.meta.onCopy = ['runner']\n  node.meta.unit = instance.kind = EFFECT\n  instance.use = (fn: Function) => {\n    if (!isFunction(fn)) throwError('.use argument should be a function')\n    handler = fn\n    return instance\n  }\n  const anyway = (instance.finally = createNamedEvent('finally'))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({status, params, result}: any) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({status, params, error}: any) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: any) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: any) => error,\n  }))\n\n  const effectRunner = createNode({\n    scope: {\n      getHandler: instance.use.getCurrent = () => handler,\n      finally: anyway,\n    },\n    node: [\n      step.run({\n        fn({params, req}, {finally: anyway, getHandler}, stack) {\n          const onResolve = onSettled({\n            params,\n            req,\n            ok: true,\n            anyway,\n            stack,\n          })\n          const onReject = onSettled({\n            params,\n            req,\n            ok: false,\n            anyway,\n            stack,\n          })\n          let result\n          try {\n            result = getHandler()(params)\n          } catch (err) {\n            return void onReject(err)\n          }\n          if (isObject(result) && isFunction(result.then)) {\n            result.then(onResolve, onReject)\n          } else {\n            onResolve(result)\n          }\n        },\n      }),\n    ],\n    meta: {\n      op: 'fx',\n      fx: 'runner',\n      onCopy: ['finally'],\n    },\n  })\n  node.scope.runner = effectRunner\n  node.seq.push(\n    step.compute({\n      fn(params, scope, stack) {\n        // empty stack means that this node was launched directly\n        if (!getParent(stack)) return params\n        return {\n          params,\n          req: {\n            rs(data: any) {},\n            rj(data: any) {},\n          },\n        }\n      },\n    }),\n    step.run({\n      fn(upd, {runner}, stack) {\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          forkPage: getForkPage(stack),\n        })\n        return upd.params\n      },\n    }),\n  )\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req.finally(() => {\n          setForkPage(savedFork)\n        })\n      }\n      launch(forkPage.find(instance), payload)\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {named: 'inFlight'})\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1))\n\n  const pending = (instance.pending = inFlight.map({\n    //@ts-ignore\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [\n    anyway,\n    done,\n    fail,\n    doneData,\n    failData,\n    pending,\n    inFlight,\n    effectRunner,\n  ])\n  return instance\n}\n\nexport const onSettled = ({\n  params,\n  req,\n  ok,\n  anyway,\n  stack,\n}: {\n  params: any\n  req: {\n    rs(_: any): any\n    rj(_: any): any\n  }\n  ok: boolean\n  anyway: any\n  stack: any\n}) => (data: any) =>\n  launch({\n    target: [anyway, sidechain],\n    params: [\n      ok\n        ? {\n            status: 'done',\n            params,\n            result: data,\n          }\n        : {\n            status: 'fail',\n            params,\n            error: data,\n          },\n      {\n        fn: ok ? req.rs : req.rj,\n        value: data,\n      },\n    ],\n    defer: true,\n    page: stack.page,\n    forkPage: getForkPage(stack),\n  })\n\nconst sidechain = createNode({\n  node: [\n    step.run({\n      fn({fn, value}) {\n        fn(value)\n      },\n    }),\n  ],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import {combine} from './combine'\nimport {createEffect, onSettled} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {onConfigNesting} from './config'\nimport {getGraph, getStoreState} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {step} from './typedef'\nimport {launch} from './kernel'\nimport {addToReg} from './createNode'\nimport {STORE, EFFECT, REG_A} from './tag'\n\nexport function attach(config: any) {\n  let injected\n  onConfigNesting(config, (injectedData, userConfig) => {\n    injected = injectedData\n    config = userConfig\n  })\n  let {source, effect, mapParams} = config\n  if (!mapParams)\n    mapParams = source\n      ? (_: any, source: any) => source\n      : (params: any) => params\n  const attached = createEffect(config, injected)\n  const {runner} = getGraph(attached).scope\n\n  let runnerSteps\n  const runnerFn = (\n    {params, req}: any,\n    {finally: anyway, effect}: any,\n    stack: any,\n  ) => {\n    const rj = onSettled({\n      params,\n      req,\n      ok: false,\n      anyway,\n      stack,\n    })\n    let computedParams\n    try {\n      computedParams = mapParams(params, stack.a)\n    } catch (err) {\n      return rj(err)\n    }\n    launch({\n      target: effect,\n      params: {\n        params: computedParams,\n        req: {\n          rs: onSettled({\n            params,\n            req,\n            ok: true,\n            anyway,\n            stack,\n          }),\n          rj,\n        },\n      },\n      page: stack.page,\n      defer: true,\n    })\n  }\n  if (source) {\n    let state\n    if (is.store(source)) state = source\n    else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    const readStateRef = step.mov({\n      from: STORE,\n      store: getStoreState(state),\n      to: REG_A,\n    })\n    runnerSteps = [\n      /* let another side-effects run first */\n      step.run({fn: _ => _}),\n      /* read state. assumed it already stable here because of previous step */\n      readStateRef,\n      /* no need for step.run because of first step */\n      step.compute({fn: runnerFn}),\n    ]\n    addToReg(readStateRef, runner.reg)\n  } else {\n    runnerSteps = [step.run({fn: runnerFn})]\n  }\n  runner.scope.effect = effect\n  runner.meta.onCopy.push(EFFECT)\n  runner.seq.splice(0, 1, ...runnerSteps)\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import {Store, Event, Effect, Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {Config} from './index.h'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {forward} from './forward'\nimport {addToRegion} from './region'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {DOMAIN} from './tag'\n\nconst createHook = (trigger: Event<any>, acc: Set<any>, node: any) => {\n  trigger.watch(data => {\n    own(node, [data])\n    acc.add(data)\n    if (!data.ownerSet) data.ownerSet = acc\n    if (!getParent(data)) data.parent = node\n  })\n  own(node, [trigger])\n  return (hook: (data: any) => any) => {\n    acc.forEach(hook)\n    return trigger.watch(hook)\n  }\n}\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const domains: Set<Domain> = new Set()\n  const stores: Set<Store<any>> = new Set()\n  const effects: Set<Effect<any, any, any>> = new Set()\n  const events: Set<Event<any>> = new Set()\n\n  const node = createNode({\n    family: {type: DOMAIN},\n  })\n\n  const result: any = {\n    history: {\n      domains,\n      stores,\n      effects,\n      events,\n    },\n    graphite: node,\n  }\n\n  node.meta = initUnit(DOMAIN, result, maybeConfig, nameOrConfig)\n  const [event, effect, store, domain] = [\n    'onEvent',\n    'onEffect',\n    'onStore',\n    'onDomain',\n  ].map(createNamedEvent)\n\n  result.hooks = {\n    event,\n    effect,\n    store,\n    domain,\n  }\n  result.onCreateEvent = createHook(event, events, result)\n  result.onCreateEffect = createHook(effect, effects, result)\n  result.onCreateStore = createHook(store, stores, result)\n  result.onCreateDomain = createHook(domain, domains, result)\n\n  result.createEvent = result.event = (nameOrConfig: any, config?: Config) =>\n    event(\n      createEvent(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createEffect = result.effect = (nameOrConfig: any, config?: Config) =>\n    effect(\n      createEffect(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createDomain = result.domain = (nameOrConfig: any, config?: Config) =>\n    createDomain({\n      name: nameOrConfig,\n      parent: result,\n      config,\n    })\n  result.createStore = result.store = (state: any, config?: Config) =>\n    store(\n      createStore(state, {\n        parent: result,\n        config,\n      }),\n    )\n  addToRegion(result)\n  const parent = getParent(result)\n  if (parent) {\n    forIn(result.hooks, (from, key) => {\n      forward({from, to: parent.hooks[key]})\n    })\n    parent.hooks.domain(result)\n  }\n  return result\n}\n","import {observableSymbol} from './observable'\nimport {Event} from './unit.h'\nimport {clearNode} from './clearNode'\nimport {createEvent} from './createUnit'\nimport {bind2} from './bind'\nimport {assertObject} from './is'\nimport {throwError} from './throw'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  if (!observableItem.subscribe)\n    throwError('expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = bind2(clearNode, event, undefined)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {combine} from './combine'\nimport {step} from './typedef'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg, callARegStack} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {createNode} from './createNode'\nimport {addToRegion, readTemplate} from './region'\nimport {throwError} from './throw'\nimport {includes} from './collection'\nimport {REG_A, SAMPLE, SAMPLER, STACK, STORE, VALUE} from './tag'\n\nexport function sample(...args: any): any {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let greedy\n  //config case\n  if (clock === undefined && 'source' in source) {\n    if ('clock' in source && source.clock == null)\n      throwError('config.clock should be defined')\n    clock = source.clock\n    fn = source.fn\n    greedy = source.greedy\n    //optional target & name accepted only from config\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (clock === undefined) {\n    //still undefined!\n    clock = source\n  }\n  name = metadata || name || source.shortName\n  const template = readTemplate()\n  const isUpward = !!target\n  if (!target) {\n    if (is.store(source) && is.store(clock)) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name, sid})\n    } else {\n      target = createEvent(name)\n      if (template) {\n        getGraph(target).seq.push(template.loader)\n      }\n    }\n  }\n  const targetTemplate =\n    isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  if (is.store(source)) {\n    const sourceRef = getStoreState(source)\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {fn, targetTemplate},\n        node: [\n          template && template.loader,\n          //@ts-ignore\n          !greedy && step.barrier({priority: SAMPLER}),\n          step.mov({\n            store: sourceRef,\n            to: fn ? REG_A : STACK,\n          }),\n          fn && step.compute({fn: callARegStack}),\n          template && isUpward && template.upward,\n        ],\n        meta: {op: SAMPLE, sample: STORE},\n      }),\n    ])\n    if (template) {\n      if (\n        !includes(template.plain, sourceRef) &&\n        !includes(template.closure, sourceRef)\n      ) {\n        template.closure.push(sourceRef)\n      }\n    }\n  } else {\n    const hasSource = createStateRef(false)\n    const sourceState = createStateRef()\n    const clockState = createStateRef()\n    if (template) {\n      template.plain.push(hasSource, sourceState, clockState)\n    }\n    addToRegion(\n      createNode({\n        parent: source,\n        node: [\n          step.update({store: sourceState}),\n          step.mov({\n            from: VALUE,\n            store: true,\n            target: hasSource,\n          }),\n        ],\n        family: {\n          owners: [source, target, clock],\n          links: target,\n        },\n        meta: {op: SAMPLE, sample: 'source'},\n      }),\n    )\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {\n          fn,\n          targetTemplate,\n        },\n        node: [\n          template && template.loader,\n          step.update({store: clockState}),\n          step.mov({store: hasSource}),\n          step.filter({fn: hasSource => hasSource}),\n          //@ts-ignore\n          !greedy && step.barrier({priority: SAMPLER}),\n          step.mov({store: sourceState}),\n          step.mov({\n            store: clockState,\n            to: REG_A,\n          }),\n          fn && step.compute({fn: callStackAReg}),\n          template && isUpward && template.upward,\n        ],\n        meta: {op: SAMPLE, sample: 'clock'},\n      }),\n    ])\n  }\n  return target\n}\n","import {processArgsToConfig} from './config'\nimport {createLinkNode} from './forward'\nimport {sample} from './sample'\nimport {createEvent} from './createUnit'\nimport {combine} from './combine'\nimport {step} from './typedef'\nimport {callStack} from './caller'\nimport {is, isFunction} from './is'\nimport {createNode} from './createNode'\nimport {addToRegion} from './region'\nimport {throwError} from './throw'\n\nexport function guard(...args: any[]) {\n  const meta: Record<string, any> = {op: 'guard'}\n  let rawName = 'guard'\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (metadata) {\n    meta.config = metadata\n    if (metadata.name) rawName = metadata.name\n  }\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  const {filter, greedy, name = rawName} = config\n  const target = config.target || createEvent(name, meta.config)\n  if (!is.unit(source)) source = combine(source)\n\n  if (is.unit(filter)) {\n    sample({\n      source: filter,\n      clock: source,\n      target: addToRegion(\n        createNode({\n          node: [\n            step.filter({\n              fn: ({guard}) => guard,\n            }),\n            step.compute({\n              fn: ({data}) => data,\n            }),\n          ],\n          child: target,\n          meta,\n          family: {\n            owners: [source, filter, target],\n            links: target,\n          },\n        }),\n      ),\n      fn: (guard: any, data: any) => ({guard, data}),\n      greedy,\n      name,\n    })\n  } else {\n    if (!isFunction(filter)) throwError('`filter` should be function or unit')\n    createLinkNode(source, target, {\n      scope: {fn: filter},\n      node: [step.filter({fn: callStack})],\n      meta,\n    })\n  }\n  return target\n}\n","import {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {forward} from './forward'\nimport {unitObjectName} from './naming'\n\nexport function merge<T>(\n  events: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  const result = createEvent(config || unitObjectName(events, 'merge'))\n  forward({\n    from: events,\n    to: result,\n    meta: {op: 'merge'},\n  })\n  return result\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\n\nexport function restore(obj: any, defaultState: any, config?: any): any {\n  if (is.store(obj)) {\n    return obj\n  }\n  if (is.unit(obj)) {\n    const domain = getParent(obj)\n    let result\n    if (is.event(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        ɔ: config,\n      }).on(obj, (_, v) => v)\n    }\n    if (is.effect(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        ɔ: config,\n      }).on(obj.done, (_: any, {result}: any) => result)\n    }\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(obj, (value, key) => {\n    result[key] = is.store(value) ? value : createStore(value, {name: key})\n  })\n  return result\n}\n","import {Event} from './unit.h'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {forward} from './forward'\nimport {processArgsToConfig} from './config'\n\nexport function split(...args: any[]): any {\n  let cases: any\n  let [[unit, match], metadata] = processArgsToConfig(args)\n  const knownCases = !match\n  if (knownCases) {\n    cases = unit.cases\n    match = unit.match\n    unit = unit.source\n  }\n  const result = {} as Record<string, Event<any>>\n  let current: Event<any> = is.store(unit) ? unit.updates : unit\n  forIn(match, (fn, key) => {\n    //@ts-ignore\n    result[key] = current.filter({fn, config: metadata})\n    //@ts-ignore\n    current = current.filter({\n      fn: data => !fn(data),\n      config: metadata,\n    })\n  })\n  result.__ = current\n  if (knownCases) {\n    forIn(result, (event, key) => {\n      if (cases[key]) {\n        forward({\n          from: event,\n          to: cases[key],\n        })\n      }\n    })\n  } else return result\n}\n","import {getForkPage, getGraph, getLinks, getOwners} from './getter'\nimport {bind} from './bind'\nimport {createDefer} from './defer'\nimport {watchUnit} from './watch'\nimport {is, isObject} from './is'\nimport {throwError} from './throw'\nimport {launch, forkPage, setForkPage} from './kernel'\nimport {createNode} from './createNode'\nimport {step} from './typedef'\nimport {Domain, Store} from './unit.h'\nimport {Graph, StateRef} from './index.h'\nimport {removeItem, forEach, includes, forIn} from './collection'\nimport {DOMAIN, STORE, EVENT, EFFECT, SAMPLER, MAP, FORK_COUNTER} from './tag'\n\n/**\nhydrate state on client\n\nconst root = createDomain()\nhydrate(root, {\n  values: window.__initialState__\n})\n\n*/\nexport function hydrate(domain: Domain, {values}: {values: any}) {\n  const isScope = isObject(domain) && (domain as any).cloneOf\n  if (!is.domain(domain) && !isScope) {\n    throwError('first argument of hydrate should be domain or scope')\n  }\n  if (!isObject(values)) {\n    throwError('values property should be an object')\n  }\n  const normalizedValues = normalizeValues(values)\n  let storeWatches: Graph[]\n  let storeWatchesRefs: any[]\n  if (isScope) {\n    storeWatches = []\n    storeWatchesRefs = []\n    forIn(normalizedValues, (val, sid) => {\n      //@ts-ignore\n      const node = domain.sidMap[sid]\n      if (node) {\n        storeWatches.push(node)\n        storeWatchesRefs.push(val)\n      }\n    })\n  } else {\n    const fillResult = fillValues({\n      flatGraphUnits: flatGraph(domain),\n      values: normalizedValues,\n      collectWatches: true,\n    })\n    storeWatches = fillResult.storeWatches\n    storeWatchesRefs = fillResult.storeWatchesRefs.map(({current}) => current)\n  }\n\n  launch({\n    target: storeWatches,\n    params: storeWatchesRefs,\n    forkPage: isScope ? domain : false,\n  })\n}\n\nfunction fillValues({\n  flatGraphUnits,\n  values,\n  collectWatches,\n}: {\n  flatGraphUnits: Graph[]\n  values: Record<string, any>\n  collectWatches: boolean\n}) {\n  const storeWatches = []\n  const storeWatchesRefs = []\n  const refsMap = {} as Record<string, StateRef>\n  const predefinedRefs = new Set()\n  const valuesSidList = Object.getOwnPropertyNames(values)\n  for (const node of flatGraphUnits) {\n    const {reg} = node\n    const {op, unit, sid} = node.meta\n    if (unit === STORE) {\n      if (sid && includes(valuesSidList, sid)) {\n        const {state} = node.scope\n        state.current = values[sid]\n        predefinedRefs.add(state)\n      }\n    }\n    if (collectWatches && op === 'watch') {\n      const owner = node.family.owners[0]\n      if (owner.meta.unit === STORE) {\n        storeWatches.push(node)\n        storeWatchesRefs.push(owner.scope.state)\n      }\n    }\n    for (const id in reg) {\n      refsMap[id] = reg[id]\n    }\n  }\n  const refGraph = createRefGraph(refsMap)\n  const result = toposort(refGraph)\n  forEach(result, id => {\n    execRef(refsMap[id])\n  })\n\n  return {\n    storeWatches,\n    storeWatchesRefs,\n  }\n  function execRef(ref: StateRef) {\n    let isFresh = false\n    if (ref.before && !predefinedRefs.has(ref)) {\n      for (const cmd of ref.before) {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            ref.current = cmd.fn(from.current)\n            break\n          }\n          case 'field': {\n            const from = cmd.from\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            ref.current[cmd.field] = from.current\n            break\n          }\n          case 'closure':\n            break\n        }\n      }\n    }\n    if (!ref.after) return\n    const value = ref.current\n    for (const cmd of ref.after) {\n      const to = cmd.to\n      // if (predefinedRefs.has(to)) continue\n      switch (cmd.type) {\n        case 'copy':\n          to.current = value\n          break\n        case MAP:\n          to.current = cmd.fn(value)\n          break\n      }\n    }\n  }\n}\n\nfunction createRefGraph(refsMap: Record<string, StateRef>) {\n  const items = Object.values(refsMap)\n  const refGraph = {} as Record<string, string[]>\n  for (const {id} of items) {\n    refGraph[id] = []\n  }\n  //prettier-ignore\n  for (const {id, before, after} of items) {\n    before && forEach(before, cmd => {\n      refGraph[cmd.from.id].push(id)\n    })\n    after && forEach(after, cmd => {\n      refGraph[id].push(cmd.to.id)\n    })\n  }\n  return refGraph\n}\n\n/**\nserialize state on server\n*/\nexport function serialize(\n  {clones, getState, cloneOf}: any,\n  {\n    ignore = [],\n    onlyChanges,\n  }: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  const result = {} as Record<string, any>\n  if (onlyChanges) {\n    ignore = [...ignore]\n    for (const store of cloneOf.history.stores) {\n      if (getState(store) === store.defaultState) {\n        ignore.push(store)\n      }\n    }\n  }\n  for (const {meta, scope, reg} of clones) {\n    if (meta.unit !== STORE) continue\n    const {sid} = meta\n    if (!sid) continue\n    result[sid] = reg[scope.state.id].current\n  }\n  for (const {sid} of ignore) {\n    if (sid) delete result[sid]\n  }\n  return result\n}\n\n/** bind event to scope */\nexport function scopeBind(unit: any) {\n  if (!forkPage) {\n    throwError('scopeBind cannot be called outside of forked .watch')\n  }\n  const result = forkPage.find(unit)\n  const savedStack = forkPage\n  return (payload: any) => {\n    launch({\n      target: result,\n      params: payload,\n      forkPage: savedStack,\n    })\n  }\n}\n\nfunction normalizeValues(values: Map<Store<any>, any> | Record<string, any>) {\n  if (values instanceof Map) {\n    const result = {} as Record<string, any>\n    for (const [key, value] of values) {\n      if (!is.unit(key)) throwError('Map key should be a unit')\n      result[key.sid!] = value\n    }\n    return result\n  }\n  return values\n}\nexport function fork(\n  domain: Domain,\n  {values, handlers}: {values?: any; handlers?: any} = {},\n) {\n  if (!is.domain(domain)) throwError('first argument of fork should be domain')\n  const needToFill = !!values\n  values = normalizeValues(values || {})\n  const forked = cloneGraph(domain)\n  if (needToFill) {\n    fillValues()\n  }\n  if (handlers) {\n    handlers = normalizeValues(handlers)\n    const handlerKeys = Object.keys(handlers)\n    for (const {scope, meta} of forked.clones) {\n      if (meta.sid && includes(handlerKeys, meta.sid)) {\n        scope.runner.scope.getHandler = () => handlers[meta.sid]\n      }\n    }\n  }\n  return forked\n\n  function fillValues() {\n    const sourceList = flatGraph(domain)\n    const sourceRefsMap = {} as Record<string, StateRef>\n    const refsMap = {} as Record<string, StateRef>\n    const predefinedRefs = new Set()\n    const templateOwnedRefs = new Set<string>()\n    const valuesSidList = Object.getOwnPropertyNames(values)\n    for (const {reg, meta} of sourceList) {\n      const {nativeTemplate} = meta\n      for (const id in reg) {\n        sourceRefsMap[id] = reg[id]\n        if (nativeTemplate) {\n          templateOwnedRefs.add(id)\n        }\n      }\n    }\n    for (const node of forked.clones) {\n      const {reg} = node\n      const {unit, sid} = node.meta\n      if (unit === STORE) {\n        if (sid && includes(valuesSidList, sid)) {\n          const {state} = node.scope\n          reg[state.id].current = values[sid]\n          predefinedRefs.add(state)\n        }\n      }\n      for (const id in reg) {\n        refsMap[id] = reg[id]\n      }\n    }\n    const refGraph = createRefGraph(sourceRefsMap)\n    const result = toposort(refGraph, templateOwnedRefs)\n    forEach(result, id => {\n      execRef(refsMap[id], sourceRefsMap[id])\n    })\n\n    function execRef(ref: StateRef, sourceRef?: StateRef) {\n      let isFresh = false\n      if (sourceRef && sourceRef.before && !predefinedRefs.has(ref)) {\n        for (const cmd of sourceRef.before) {\n          switch (cmd.type) {\n            case MAP: {\n              const from = refsMap[cmd.from.id]\n              ref.current = cmd.fn(from.current)\n              break\n            }\n            case 'field': {\n              const from = refsMap[cmd.from.id]\n              if (!isFresh) {\n                isFresh = true\n                if (Array.isArray(ref.current)) {\n                  ref.current = [...ref.current]\n                } else {\n                  ref.current = {...ref.current}\n                }\n              }\n              ref.current[cmd.field] = from.current\n              break\n            }\n            case 'closure':\n              break\n          }\n        }\n      }\n      if (!sourceRef || !sourceRef.after) return\n      const value = ref.current\n      for (const cmd of sourceRef.after) {\n        const to = refsMap[cmd.to.id]\n        // if (predefinedRefs.has(to)) continue\n        switch (cmd.type) {\n          case 'copy':\n            to.current = value\n            break\n          case MAP:\n            to.current = cmd.fn(value)\n            break\n        }\n      }\n    }\n  }\n}\nfunction toposort(rawGraph: Record<string, string[]>, ignore?: Set<string>) {\n  const graph = {} as Record<string, string[]>\n  for (const id in rawGraph) {\n    graph[id] = [...new Set(rawGraph[id])]\n  }\n  const result = [] as string[]\n  const visited = {} as Record<string, boolean>\n  const temp = {} as Record<string, boolean>\n  for (const node in graph) {\n    if (!visited[node] && !temp[node]) {\n      topologicalSortHelper(node)\n    }\n  }\n  result.reverse()\n  if (ignore && ignore.size > 0) {\n    const processed = [] as string[]\n    const ignored = [...ignore]\n    let item: string | void\n    while ((item = ignored.shift())) {\n      processed.push(item)\n      forEach(graph[item], child => {\n        if (includes(processed, child) || includes(ignored, child)) return\n        ignored.push(child)\n      })\n    }\n    forEach(processed, item => {\n      removeItem(result, item)\n    })\n  }\n  return result\n  function topologicalSortHelper(node: string) {\n    temp[node] = true\n    const neighbors = graph[node]\n    for (let i = 0; i < neighbors.length; i++) {\n      const n = neighbors[i]\n      if (temp[n]) {\n        continue\n        // throw Error('found cycle in DAG')\n      }\n      if (!visited[n]) {\n        topologicalSortHelper(n)\n      }\n    }\n    temp[node] = false\n    visited[node] = true\n    result.push(node)\n  }\n}\nexport function allSettled(\n  start: any,\n  {scope, params: ctx}: {scope: any; params?: any},\n) {\n  if (!is.unit(start))\n    return Promise.reject(Error('first argument should be unit'))\n  const defer = createDefer()\n  //@ts-ignore\n  defer.parentFork = forkPage\n  const {forkInFlightCounter} = scope.graphite.scope\n  forkInFlightCounter.scope.defers.push(defer)\n  const contextStart = scope.find(start)\n\n  const launchUnits = [contextStart]\n  const launchParams = []\n  if (is.effect(start)) {\n    launchParams.push({\n      params: ctx,\n      req: {\n        rs(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'done', value}\n        },\n        rj(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'fail', value}\n        },\n      },\n    })\n  } else {\n    launchParams.push(ctx)\n  }\n  launchUnits.push(forkInFlightCounter)\n  launchParams.push(null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    forkPage: scope,\n  })\n  return defer.req\n}\nfunction flatGraph(unit: any) {\n  const list = [] as Graph[]\n  ;(function traverse(node) {\n    if (includes(list, node)) return\n    list.push(node)\n    forEachRelatedNode(node, traverse)\n  })(getGraph(unit))\n  return list\n}\n/**\neverything we need to clone graph section\nreachable from given unit\n*/\nfunction cloneGraph(unit: any) {\n  const list = flatGraph(unit)\n  const refs = new Map()\n  const scope = {\n    defers: [],\n    inFlight: 0,\n    fxID: 0,\n  }\n  const forkPageSetter = step.compute({\n    fn(data, _, stack) {\n      setForkPage(getForkPage(stack))\n      return data\n    },\n  })\n  const forkInFlightCounter = createNode({\n    scope,\n    node: [\n      step.compute({\n        fn(_, scope, stack) {\n          if (!stack.parent) {\n            scope.fxID += 1\n            return\n          }\n          if (stack.parent.node.meta.named === 'finally') {\n            scope.inFlight -= 1\n          } else {\n            scope.inFlight += 1\n            scope.fxID += 1\n          }\n        },\n      }),\n      step.barrier({priority: SAMPLER}),\n      step.run({\n        fn(_, scope) {\n          const {inFlight, defers, fxID} = scope\n          if (inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), (defer: any) => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n      }),\n    ],\n    meta: {unit: FORK_COUNTER},\n  })\n  const nodeMap = {} as Record<string, Graph>\n  const sidMap = {} as Record<string, Graph>\n  const clones = list.map(node => {\n    const {seq, next, meta, scope} = node\n    const result = createNode({\n      node: seq.map(step => ({\n        id: step.id,\n        type: step.type,\n        data: {...step.data},\n        hasRef: step.hasRef,\n      })) as any,\n      child: [...next],\n      meta: {forkOf: node, ...meta},\n      scope: {...scope},\n    })\n    result.family = {\n      type: node.family.type,\n      links: [...getLinks(node)],\n      owners: [...getOwners(node)],\n    }\n    nodeMap[node.id] = result\n    if (meta.sid) sidMap[meta.sid] = result\n    return result\n  })\n  const page = {} as Record<string, StateRef>\n  forEach(clones, node => {\n    const {\n      reg,\n      scope,\n      meta: {onCopy, op, unit},\n    } = node\n    for (const id in reg) {\n      const ref = reg[id]\n      let newRef = refs.get(ref)\n      if (!newRef) {\n        newRef = {\n          id: ref.id,\n          current: ref.current, //ref.id in values ? values[ref.id] : ref.current,\n        }\n        refs.set(ref, newRef)\n      }\n      page[id] = reg[id] = newRef\n    }\n    if (onCopy) {\n      for (let j = 0; j < onCopy.length; j++) {\n        scope[onCopy[j]] = findClone(scope[onCopy[j]])\n      }\n    }\n    forEachRelatedNode(node, (node, i, siblings) => {\n      siblings[i] = findClone(node)\n    })\n    const itemTag = op || unit\n    switch (itemTag) {\n      case STORE:\n        node.meta.wrapped = wrapStore(node)\n        break\n      case EVENT:\n        node.seq.unshift(forkPageSetter)\n        break\n      case EFFECT:\n        node.next.push(forkInFlightCounter)\n        node.seq.unshift(forkPageSetter)\n        break\n      case 'fx': {\n        scope.finally.next.push(forkInFlightCounter)\n        node.seq.unshift(forkPageSetter)\n        break\n      }\n      case 'watch':\n        node.seq.unshift(forkPageSetter)\n        break\n    }\n  })\n\n  return {\n    cloneOf: unit,\n    nodeMap,\n    sidMap,\n    clones,\n    find: findClone,\n    reg: page,\n    getState: (store: any) => findClone(store).meta.wrapped.getState(),\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, ...clones],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n  }\n  function findClone(unit: any) {\n    const node = getGraph(unit)\n    const index = list.indexOf(node)\n    if (index === -1) {\n      let unitName = 'unit'\n      if (unit !== node && unit.id !== unit.shortName) unitName = unit.shortName\n      throwError(`${unitName} not found in forked scope`)\n    }\n    return clones[index]\n  }\n}\n\nfunction wrapStore(node: Graph) {\n  return {\n    kind: STORE,\n    getState: () => node.reg[node.scope.state.id].current,\n    updates: {\n      watch: bind(watchUnit, node),\n    },\n    graphite: node,\n    family: node.family,\n  }\n}\nfunction forEachRelatedNode(\n  node: Graph,\n  cb: (node: Graph, index: number, siblings: Graph[]) => void,\n) {\n  const unit = node.meta.unit\n  if (unit === 'fork' || unit === FORK_COUNTER) return\n  forEach(node.next, cb)\n  forEach(getOwners(node), cb)\n  forEach(getLinks(node), cb)\n}\n","export const observableSymbol: any =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import {kind} from './index.h'\nimport {DOMAIN, STORE, EVENT, EFFECT} from './tag'\nimport {isObject, isFunction} from './is'\n\nexport const unit = (obj: any) =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: kind) => (obj: any) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE)\nexport const event = is(EVENT)\nexport const effect = is(EFFECT)\nexport const domain = is(DOMAIN)\n","export const throwError = (message: string) => {\n  throw Error(message)\n}\n","//eslint-disable-next-line\nexport * as is from './validate'\nimport {throwError} from './throw'\n\nexport const isObject = (value: any) =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: any) => typeof value === 'function'\n\nexport const assertObject = (value: any) => {\n  if (!isObject(value) && !isFunction(value))\n    throwError('expect first argument be an object') // or function\n}\n","const idCount = () => {\n  let id = 0\n  return () => (++id).toString(36)\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","export const bind = (fn: Function, target: any) => fn.bind(null, target)\nexport const bind2 = (fn: Function, target: any, arg: any) =>\n  fn.bind(null, target, arg)\n","import {StateRef, Run, Filter, Compute, Barrier, Check, Mov} from './index.h'\nimport {nextStepID} from './id'\nimport {bind2} from './bind'\nimport {BARRIER, FILTER, STACK, STORE} from './tag'\n\nconst cmd = (type: any, hasRef: boolean, data: any): any => ({\n  id: nextStepID(),\n  type,\n  data,\n  hasRef,\n})\n\nlet nextBarrierID = 0\n\nexport const barrier: (data: {priority?: 'barrier' | 'sampler'}) => Barrier = ({\n  priority = BARRIER,\n}) =>\n  cmd(BARRIER, false, {\n    barrierID: ++nextBarrierID,\n    priority,\n  })\nexport const mov: (data: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b'\n  store?: any\n  target?: any\n}) => Mov = ({from = STORE, store, target, to = target ? STORE : STACK}) =>\n  cmd('mov', from === STORE, {from, store, to, target})\nexport const check: {\n  defined(): Check\n  changed(config: {store: StateRef}): Check\n} = {\n  defined: () => cmd('check', false, {type: 'defined'}),\n  changed: ({store}) => cmd('check', true, {type: 'changed', store}),\n}\nexport const compute: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Compute = bind2(cmd, 'compute', false)\nexport const filter: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Filter = bind2(cmd, FILTER, false)\nexport const run: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Run = bind2(cmd, 'run', false)\nexport const update: (data: {store: StateRef}) => Mov = ({store}) =>\n  mov({from: STACK, target: store})\n","import {StateRef} from './index.h'\nimport {nextStepID} from './id'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n","export const callStackAReg = (stack: any, {fn}: any, {a}: any) => fn(stack, a)\nexport const callARegStack = (stack: any, {fn}: any, {a}: any) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: any, _: any) => fn(stack)\n","import {Graph} from './index.h'\n\nexport const getGraph = (graph: any): Graph => graph.graphite || graph\nexport const getOwners = (node: Graph) => node.family.owners\nexport const getLinks = (node: Graph) => node.family.links\nexport const getStoreState = (store: any) => store.stateRef\nexport const getConfig = (opts: any) => opts.config\nexport const getNestedConfig = (opts: any) => opts.ɔ\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: any) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any) => val.forkPage\n","import {Graphite} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\n\nexport const own = (ownerUnit: Graphite, links: Graphite[]) => {\n  const owner = getGraph(ownerUnit)\n  for (let i = 0; i < links.length; i++) {\n    const link = getGraph(links[i])\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    getOwners(link).push(owner)\n    getLinks(owner).push(link)\n  }\n}\n","import {Graph} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getValue} from './getter'\nimport {\n  STORE,\n  EFFECT,\n  SAMPLER,\n  STACK,\n  BARRIER,\n  VALUE,\n  FILTER,\n  REG_A,\n} from './tag'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Graph\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Call stack */\ntype Stack = {\n  value: any\n  a: any\n  b: any\n  parent: Stack | null\n  node: Graph\n  page: {[id: string]: any} | null\n  forkPage?: any\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  const isSameType = a.v.type === b.v.type\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (isSameType && a.v.id > b.v.id) ||\n    /** if first node is \"sampler\" and second node is \"barrier\" */\n    (!isSameType && a.v.type === SAMPLER)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 5) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  queue.push({first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 5; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * second bucket is for \"barrier\" PriorityType (used in combine)\n       * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 2 || i === 3) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: {[id: string]: any} | null,\n  node: Graph,\n  parent: Stack | null,\n  value: any,\n  forkPage: any | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      forkPage,\n    },\n    type,\n  )\nconst pushHeap = (idx: number, stack: Stack, type: PriorityTag, id = 0) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    //@ts-ignore\n    l: 0,\n    //@ts-ignore\n    r: 0,\n  }\n  /**\n   * second bucket is for \"barrier\" PriorityType (used in combine)\n   * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 2 || priority === 3) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case BARRIER:\n      return 2\n    case SAMPLER:\n      return 3\n    case EFFECT:\n      return 4\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set()\n\nlet isRoot = true\nexport let isWatch = false\nexport let currentPage: any = null\nexport let forkPage: any\nexport const setForkPage = (newForkPage: any) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: any) => {\n  currentPage = newPage\n}\n\n/** main execution method */\nconst exec = () => {\n  const lastStartedState = {isRoot, currentPage, forkPage, isWatch}\n  isRoot = false\n  let stop\n  let skip\n  let graph\n  let value\n  let page\n  let reg\n  mem: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    graph = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    reg = (page ? page : graph).reg\n    const local: Local = {\n      fail: false,\n      scope: graph.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < graph.seq.length && !stop; stepn++) {\n      const step = graph.seq[stepn]\n      const data = step.data\n      switch (step.type) {\n        case BARRIER: {\n          let id = data.barrierID\n          if (page) {\n            id = `${page.fullID}_${id}`\n          }\n          const priority = data.priority\n          if (stepn !== idx || type !== priority) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, id)\n            }\n            continue mem\n          }\n          barriers.delete(id)\n          break\n        }\n        case 'mov': {\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (!reg[data.store.id]) {\n                // if (!page.parent) {\n                stack.page = page = null\n                reg = graph.reg\n                // }\n              }\n              value = readRef(reg[data.store.id])\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              reg[data.target.id].current = value\n              break\n          }\n          break\n        }\n        case 'check':\n          switch (data.type) {\n            case 'defined':\n              skip = getValue(stack) === undefined\n              break\n            case 'changed':\n              skip = getValue(stack) === readRef(reg[data.store.id])\n              break\n          }\n          break\n        case FILTER:\n          /**\n           * handled edge case: if step.fn will throw,\n           * tryRun will return null\n           * thereby forcing that branch to stop\n           */\n          skip = !tryRun(local, data, stack)\n          break\n        case 'run':\n          /** exec 'compute' step when stepn === idx */\n          if (stepn !== idx || type !== EFFECT) {\n            pushHeap(stepn, stack, EFFECT)\n            continue mem\n          }\n        case 'compute':\n          isWatch = graph.meta.op === 'watch'\n          stack.value = tryRun(local, data, stack)\n          isWatch = lastStartedState.isWatch\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      for (let stepn = 0; stepn < graph.next.length; stepn++) {\n        pushFirstHeapItem(\n          'child',\n          page,\n          graph.next[stepn],\n          stack,\n          getValue(stack),\n          getForkPage(stack),\n        )\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\nexport const launch = (unit: any, payload?: any, upsert?: boolean) => {\n  let page = currentPage\n  let stack = null\n  let forkedPage = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    page = 'page' in unit ? unit.page : page\n    if (unit[STACK]) stack = unit[STACK]\n    forkedPage = getForkPage(unit) || forkedPage\n    unit = unit.target\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        page,\n        getGraph(unit[i]),\n        stack,\n        payload[i],\n        forkedPage,\n      )\n    }\n  } else {\n    pushFirstHeapItem('pure', page, getGraph(unit), stack, payload, forkedPage)\n  }\n  if (upsert && !isRoot) return\n  exec()\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, {fn}: any, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import {getConfig, getNestedConfig} from './getter'\nimport {assertObject} from './is'\n\nexport const onConfigNesting = (\n  rawConfig: any,\n  fn: (babelData: any, userConfig: any) => void,\n) => {\n  assertObject(rawConfig)\n  if (getNestedConfig(rawConfig)) {\n    fn(getConfig(rawConfig), getNestedConfig(rawConfig))\n  }\n}\n\nexport const processArgsToConfig = (args: any[]): [any[], any | void] => {\n  let metadata\n  onConfigNesting(args[0], (injected, config) => {\n    metadata = injected\n    args = config\n  })\n  return [args, metadata]\n}\n","import {Graph, Graphite} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Graph, targetNode: Graph) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Graph,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-ignore\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && !targetNode.meta.sample) ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        currentNode.meta.op !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        currentNode.meta.op !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: any) => map.clear()\nexport const clearNode = (\n  graphite: Graphite,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-ignore\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    //@ts-ignore\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import {Subscription, Graphite} from './index.h'\nimport {bind2} from './bind'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: Graphite): Subscription => {\n  const result = bind2(clearNode, node, undefined)\n  result.unsubscribe = result\n  return result\n}\n","import {onConfigNesting} from './config'\nimport {createNode} from './createNode'\nimport {Subscription, Graphite, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {throwError} from './throw'\nimport {addToRegion} from './region'\n\nexport const createLinkNode = (\n  parent: Graphite,\n  child: Graphite,\n  {\n    node,\n    scope,\n    meta,\n  }: {\n    node?: Array<Cmd | false | void | null>\n    scope?: {[name: string]: any}\n    meta?: {[name: string]: any}\n  },\n) =>\n  addToRegion(\n    createNode({\n      node,\n      parent,\n      child,\n      scope,\n      meta,\n      family: {\n        owners: [parent, child],\n        links: child,\n      },\n    }),\n  )\nexport const forward = (opts: {\n  from: Graphite | Graphite[]\n  to: Graphite | Graphite[]\n  meta?: Record<string, any>\n}): Subscription => {\n  let config\n  onConfigNesting(opts, (injectedData, userConfig) => {\n    config = injectedData\n    opts = userConfig\n  })\n  const {from, to, meta = {op: 'forward'}} = opts\n  if (!from || !to) throwError('from and to fields should be defined')\n  if (config) meta.config = config\n  return createSubscription(\n    addToRegion(\n      createNode({\n        parent: from,\n        child: to,\n        meta,\n        family: {},\n      }),\n    ),\n  )\n}\n","import {step} from './typedef'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, Unit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {addToRegion} from './region'\nimport {throwError} from './throw'\nimport {isFunction} from './is'\nimport {forkPage} from './kernel'\nimport {getGraph} from './getter'\n\nexport const watchUnit = (\n  unit: Unit,\n  handler: (payload: any) => any,\n): Subscription => {\n  if (!isFunction(handler)) throwError('.watch argument should be a function')\n  if (forkPage) {\n    const forkedNode = forkPage.nodeMap[getGraph(unit).id]\n    if (forkedNode) unit = forkedNode\n  }\n  return createSubscription(\n    addToRegion(\n      createNode({\n        scope: {fn: handler},\n        node: [step.run({fn: callStack})],\n        parent: unit,\n        meta: {op: 'watch'},\n        family: {\n          owners: unit,\n        },\n      }),\n    ),\n  )\n}\n"],"names":["createNode","node","from","source","parent","to","target","child","scope","meta","family","familyRaw","type","sources","arrifyNodes","links","owners","seq","reg","i","length","item","push","addToReg","result","id","nextNodeID","next","getOwners","getLinks","unitObjectName","objOrArr","method","name","comma","key","unit","is","compositeName","fullName","toString","setStoreName","store","rawName","createName","getParent","shortName","currentComposite","path","composite","concat","forEach","list","fn","withRegion","cb","unitMeta","getGraph","regionStack","value","template","readTemplate","sidRoot","createEvent","nameOrConfig","maybeConfig","event","payload","args","currentPage","oldPage","page","setCurrentPage","create","callCreate","graphite","initUnit","forkPage","find","launch","watch","bind","watchUnit","map","config","isObject","mapped","mapName","createComputation","MAP","filter","createEventFiltration","step","callStack","filterMap","defined","prepend","contramapped","upward","applyParentHook","addToRegion","createStore","defaultState","props","onEvent","off","getSubscribers","set","createSubscription","updateStore","plainState","createStateRef","oldState","updates","createNamedEvent","after","plain","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","readRef","setState","state","nodeMap","params","defer","reset","units","on","events","Array","isArray","currentSubscription","get","delete","firstState","lastResult","storeState","undefined","innerStore","strict","linkNode","getStoreState","before","includes","loader","unshift","eventOrFn","subscription","of","isFunction","throwError","changed","STORE","isStrict","own","combine","handler","stores","onConfigNesting","injectedData","userConfig","structStoreShape","shapeReady","rawHandler","slice","obj","spreadArgs","storeCombination","createDefer","req","Promise","rs","rj","catch","err","createEffect","instance","defaultConfig","getType","onCopy","kind","use","anyway","finally","done","named","status","fail","error","doneData","failData","effectRunner","getHandler","getCurrent","stack","onResolve","onSettled","ok","onReject","then","op","fx","runner","data","upd","getForkPage","isWatch","savedFork","setForkPage","inFlight","x","pending","amount","attach","injected","effect","mapParams","_","runnerSteps","attached","runnerFn","computedParams","a","readStateRef","splice","createApi","setters","metadata","processArgsToConfig","forIn","createDomain","domains","Set","effects","history","domain","hooks","onCreateEvent","createHook","onCreateEffect","onCreateStore","onCreateDomain","forward","fromObservable","observable","assertObject","observableItem","observableSymbol","subscribe","disposer","bind2","clearNode","complete","sample","sid","greedy","clock","isUpward","targetTemplate","nativeTemplate","sourceRef","createLinkNode","priority","callARegStack","closure","hasSource","sourceState","clockState","callStackAReg","guard","merge","restore","ɔ","v","split","cases","match","knownCases","current","__","hydrate","values","isScope","cloneOf","storeWatches","storeWatchesRefs","normalizedValues","normalizeValues","val","sidMap","fillResult","flatGraphUnits","collectWatches","refsMap","predefinedRefs","valuesSidList","Object","getOwnPropertyNames","add","owner","toposort","createRefGraph","ref","isFresh","has","cmd","field","execRef","fillValues","flatGraph","items","refGraph","serialize","clones","ignore","onlyChanges","scopeBind","savedStack","fork","handlers","needToFill","forked","findClone","index","indexOf","unitName","refs","forkPageSetter","forkInFlightCounter","defers","fxID","resolve","parentFork","hasRef","forkOf","newRef","j","forEachRelatedNode","siblings","wrapped","wrapStore","EFFECT","cloneGraph","sourceList","sourceRefsMap","templateOwnedRefs","handlerKeys","keys","rawGraph","topologicalSortHelper","temp","neighbors","graph","n","visited","reverse","size","processed","ignored","shift","removeItem","allSettled","start","ctx","reject","Error","launchUnits","launchParams","traverse","Symbol","message","idCount","nextUnitID","nextStepID","arg","nextBarrierID","barrier","barrierID","mov","check","compute","run","update","getConfig","opts","getNestedConfig","getValue","ownerUnit","link","heap","b","ret","isSameType","r","l","queue","ix","first","last","deleteMin","pushFirstHeapItem","pushHeap","idx","getPriority","bucket","t","barriers","isRoot","newForkPage","newPage","upsert","forkedPage","stop","skip","lastStartedState","mem","local","stepn","fullID","tryRun","exec","console","joinName","tag","rawConfig","pos","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","ownerSet","unsubscribe","readSidRoot","withFactory","loc","forkedNode","normalizeConfig","part","hookType","rawConfigA","rawConfigB","isDomain","unitId","thru","observer","stateFirst","storeRef","clone","stateNew","rawShape","childRef","defaultShape","sidechain","trigger","acc","hook"],"mappings":"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"}