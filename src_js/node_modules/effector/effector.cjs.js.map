{"version":3,"file":"effector.cjs.js","sources":["effector/createNode.ts","effector/tag.ts","effector/naming.ts","effector/collection.ts","effector/region.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/sample.ts","effector/fork.ts","effector/observable.ts","effector/validate.ts","effector/throw.ts","effector/is.ts","effector/id.ts","effector/bind.ts","effector/step.ts","effector/stateRef.ts","effector/caller.ts","effector/getter.ts","effector/own.ts","effector/kernel.ts","effector/config.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts","effector/createDomain.ts","effector/attach.ts","effector/createApi.ts","effector/fromObservable.ts","effector/guard.ts","effector/merge.ts","effector/restore.ts","effector/split.ts"],"sourcesContent":["import {Graph, Graphite, Cmd, StateRef} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK, STORE} from './tag'\n\nconst arrifyNodes = (list: Graphite | Graphite[] = []): Graph[] => {\n  const result = []\n  if (Array.isArray(list)) {\n    for (let i = 0; i < list.length; i++) {\n      if (Array.isArray(list[i])) result.push(...(list[i] as any))\n      else result.push(list[i])\n    }\n  } else {\n    result.push(list)\n  }\n  return result.map(getGraph)\n}\nexport const addToReg = (\n  {hasRef, type, data}: any,\n  reg: Record<string, StateRef>,\n) => {\n  let store\n  if (hasRef) {\n    store = data.store\n    reg[store.id] = store\n  }\n  if (type === 'mov' && data.to === STORE) {\n    store = data.target\n    reg[store.id] = store\n  }\n}\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: Graphite | Graphite[]\n  source?: Graphite | Graphite[]\n  parent?: Graphite | Graphite[]\n  to?: Graphite | Graphite[]\n  target?: Graphite | Graphite[]\n  child?: Graphite | Graphite[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: Graphite | Graphite[]\n    owners?: Graphite | Graphite[]\n  }\n} = {}): Graph {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  const reg: {[id: string]: StateRef} = {}\n  for (let i = 0; i < node.length; i++) {\n    const item = node[i]\n    if (!item) continue\n    seq.push(item)\n    addToReg(item, reg)\n  }\n  const result: Graph = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n    reg,\n  }\n  for (let i = 0; i < links.length; i++) {\n    getOwners(links[i]).push(result)\n  }\n  for (let i = 0; i < owners.length; i++) {\n    getLinks(owners[i]).push(result)\n  }\n  for (let i = 0; i < sources.length; i++) {\n    sources[i].next.push(result)\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const FORK_COUNTER = 'forkInFlightCounter'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import {Store, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent} from './getter'\n\nexport const joinName = (unit: any, tag: string) => '' + unit.shortName + tag\n\nexport const mapName = (unit: any, name?: string) =>\n  name == null ? joinName(unit, ' → *') : name\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  //@ts-ignore\n  for (const key in objOrArr) {\n    //@ts-ignore\n    const unit = objOrArr[key]\n    if (unit != null) {\n      name += comma\n      //@ts-ignore\n      name += is.unit(unit) ? unit.compositeName.fullName : unit.toString()\n    }\n    i += 1\n    /* inlined max object names constant */\n    if (i === 25) break\n    comma = ', '\n  }\n  name += ')'\n  return name\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  const compositeName = createName(rawName, getParent(store))\n  store.shortName = rawName\n  if (!store.compositeName) {\n    store.compositeName = compositeName\n    return\n  }\n  const currentComposite = store.compositeName\n  currentComposite.path = compositeName.path\n  currentComposite.shortName = compositeName.shortName\n  currentComposite.fullName = compositeName.fullName\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  let composite\n  const shortName = name\n  if (!parent) {\n    if (name.length === 0) {\n      path = []\n    } else {\n      path = [name]\n    }\n    fullName = name\n  } else {\n    composite = parent.compositeName\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      if (composite.fullName.length === 0) {\n        fullName = name\n      } else {\n        fullName = '' + composite.fullName + '/' + name\n      }\n    }\n  }\n  return {shortName, fullName, path}\n}\n","export const forIn = (obj: any, cb: (value: any, key: string) => void) => {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = (list: any[], item: any) => list.includes(item)\n\nexport const removeItem = (list: any[], item: any) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","import {getValue, getGraph, getParent} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: any\n  sidRoot?: string\n}\n\nexport const addToRegion = (unit: any) => {\n  if (regionStack) own(getValue(regionStack), [unit])\n  return unit\n}\n\nlet regionStack: RegionStack | null = null\n\nexport const readTemplate = () => regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}ɔ${sid}`\n  return sid\n}\n\nexport function withRegion(unit: any, cb: () => void) {\n  const unitMeta = getGraph(unit).meta\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: unitMeta.template || readTemplate(),\n    sidRoot: unitMeta.sidRoot || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {\n      sidRoot: readSidRoot(sid),\n      name,\n      loc,\n      method,\n    },\n  })\n  return withRegion(sidNode, fn)\n}\n","import {observableSymbol} from './observable'\n\nimport {is, isObject, isFunction, assertObject} from './is'\nimport {Store, Event} from './unit.h'\n\nimport {step} from './typedef'\nimport {createStateRef, readRef} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {bind} from './bind'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, currentPage, forkPage, setCurrentPage} from './kernel'\n\nimport {Subscriber, Config} from './index.h'\nimport {createName, mapName, joinName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {addToRegion, readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getConfig,\n  getNestedConfig,\n  getStoreState,\n  getGraph,\n  getParent,\n} from './getter'\nimport {includes} from './collection'\nimport {throwError} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, REG_A} from './tag'\n\nconst normalizeConfig = (part: any, config: any) => {\n  if (isObject(part)) {\n    normalizeConfig(getConfig(part), config)\n    if (part.name != null) {\n      if (isObject(part.name)) normalizeConfig(part.name, config)\n      else if (isFunction(part.name)) config.handler = part.name\n      else config.name = part.name\n    }\n    if (part.loc) config.loc = part.loc\n    if (part.sid || part.sid === null) config.sid = part.sid\n    if (part.handler) config.handler = part.handler\n    if (getParent(part)) config.parent = getParent(part)\n    if ('strict' in part) config.strict = part.strict\n    if (part.named) config.named = part.named\n    normalizeConfig(getNestedConfig(part), config)\n  }\n  return config\n}\n\nexport const applyParentHook = (\n  source: any,\n  target: any,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nlet isStrict: boolean\nexport const initUnit = (\n  kind: any,\n  unit: any,\n  rawConfigA: any,\n  rawConfigB?: any,\n) => {\n  const config = normalizeConfig(\n    {\n      name: rawConfigB,\n      config: rawConfigA,\n    },\n    {},\n  )\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  let {parent = null, sid = null, strict = true, named = null} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n\n  const meta: Record<string, any> = {\n    unit: unit.kind = kind,\n    name: unit.shortName = name,\n    sid: unit.sid = readSidRoot(sid),\n    named,\n    unitId: unit.id = id,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => fn(unit)\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => {\n              if (observer.next) {\n                observer.next(upd)\n              }\n            },\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  isStrict = strict\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst createComputation = (from: any, to: any, op: any, fn: Function) =>\n  createLinkNode(from, to, {\n    scope: {fn},\n    node: [step.compute({fn: callStack})],\n    meta: {op},\n  })\n\nconst createEventFiltration = (event: any, op: string, fn: any, node: any) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = fn.fn\n  }\n  const mapped = createEvent(joinName(event, ' →? *'), config)\n  createLinkNode(event, mapped, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n  return mapped\n}\n\nfunction callCreate(unit: any, template: any, payload: any, args: any[]): any {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const event: any = (payload: Payload, ...args: any[]) => {\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }\n  event.graphite = createNode({\n    meta: initUnit(EVENT, event, maybeConfig, nameOrConfig),\n  })\n  //eslint-disable-next-line no-unused-vars\n  event.create = (payload: any, _: any) => {\n    const target = forkPage ? forkPage.find(event) : event\n    launch(target, payload)\n    return payload\n  }\n  event.watch = bind(watchUnit, event)\n  event.map = (fn: any) => {\n    let config\n    let name\n    if (isObject(fn)) {\n      config = fn\n      name = fn.name\n      fn = fn.fn\n    }\n    const mapped = createEvent(mapName(event, name), config)\n    createComputation(event, mapped, MAP, fn)\n    return mapped\n  }\n  event.filter = (fn: any) =>\n    createEventFiltration(event, FILTER, fn.fn ? fn : fn.fn, [\n      step.filter({fn: callStack}),\n    ])\n  event.filterMap = (fn: any) =>\n    createEventFiltration(event, 'filterMap', fn, [\n      step.compute({fn: callStack}),\n      step.check.defined(),\n    ])\n  event.prepend = (fn: any) => {\n    const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n      parent: getParent(event),\n    })\n    const template = readTemplate()\n    if (template) {\n      getGraph(contramapped).seq.push(template.upward)\n    }\n    createComputation(contramapped, event, 'prepend', fn)\n    applyParentHook(event, contramapped)\n    return contramapped\n  }\n  const template = readTemplate()\n  return addToRegion(event)\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const plainState = createStateRef(defaultState)\n  const oldState = createStateRef(defaultState)\n  const updates = createNamedEvent('updates')\n  const template = readTemplate()\n  plainState.after = [{type: 'copy', to: oldState}]\n  if (template) {\n    template.plain.push(plainState, oldState)\n  }\n  const plainStateId = plainState.id\n  const store: any = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage && forkPage.reg[plainStateId]) {\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState(state: any) {\n      let target\n      if (forkPage) {\n        target = forkPage.nodeMap[getGraph(store).id]\n      }\n      if (!target) target = store\n      launch({\n        target,\n        params: state,\n        defer: true,\n      })\n    },\n    reset(...units: any[]) {\n      for (const unit of units) store.on(unit, () => store.defaultState)\n      return store\n    },\n    on(events: any, fn: Function) {\n      if (Array.isArray(events)) {\n        for (const event of events) {\n          onEvent(event, fn)\n        }\n      } else {\n        onEvent(events, fn)\n      }\n      return store\n    },\n    off(unit: any) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: any, firstState?: any) {\n      let config\n      let name\n      if (isObject(fn)) {\n        config = fn\n        name = fn.name\n        firstState = fn.firstState\n        fn = fn.fn\n      }\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (storeState !== undefined) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: mapName(store, name),\n        config,\n        strict: false,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, false, fn)\n\n      getStoreState(innerStore).before = [\n        {\n          type: MAP,\n          fn,\n          from: plainState,\n        },\n      ]\n      if (template) {\n        if (!includes(template.plain, plainState)) {\n          if (!includes(linkNode.seq, template.loader)) {\n            linkNode.seq.unshift(template.loader)\n          }\n        }\n      }\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        const template = readTemplate()\n        if (template) {\n          template.watch.push({\n            of: plainState,\n            fn: eventOrFn,\n          })\n        } else {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      if (!isFunction(fn)) throwError('second argument should be a function')\n      return eventOrFn.watch((payload: any) => fn(store.getState(), payload))\n    },\n  }\n  function onEvent(event: any, fn: Function) {\n    store.off(event)\n    getSubscribers(store).set(\n      event,\n      createSubscription(updateStore(event, store, 'on', true, fn)),\n    )\n  }\n  store.graphite = createNode({\n    scope: {state: plainState},\n    node: [\n      step.check.defined(),\n      step.update({\n        store: plainState,\n      }),\n      step.check.changed({\n        store: oldState,\n      }),\n      step.update({\n        store: oldState,\n      }),\n    ],\n    child: updates,\n    meta: initUnit(STORE, store, props),\n  })\n  if (isStrict && defaultState === undefined)\n    throwError(\"current state can't be undefined, use null instead\")\n  own(store, [updates])\n  return addToRegion(store)\n}\n\nconst updateStore = (\n  from: any,\n  store: Store<any>,\n  op: string,\n  stateFirst: boolean,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const node = [\n    step.mov({store: storeRef, to: REG_A}),\n    step.compute({\n      fn: stateFirst ? callARegStack : callStackAReg,\n    }),\n    step.check.defined(),\n    step.check.changed({store: storeRef}),\n    step.update({store: storeRef}),\n  ]\n  const template = readTemplate()\n  if (template) {\n    node.unshift(template.loader)\n    node.push(template.upward)\n    if (is.store(from)) {\n      const ref = getStoreState(from)\n      if (!includes(template.plain, ref)) {\n        //if (!includes(node, template.loader)) {\n        //  node.unshift(template.loader)\n        //}\n        if (!includes(template.closure, ref)) {\n          template.closure.push(ref)\n        }\n        if (!storeRef.before) storeRef.before = []\n        storeRef.before.push({\n          type: 'closure',\n          of: ref,\n        })\n      }\n    } else {\n      //if (!includes(node, template.loader)) {\n      //  node.unshift(template.loader)\n      //}\n    }\n  }\n  return createLinkNode(from, store, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n}\n","import {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef} from './stateRef'\nimport {step} from './typedef'\nimport {onConfigNesting} from './config'\nimport {getStoreState} from './getter'\nimport {is, isFunction, isObject} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {throwError} from './throw'\nimport {readTemplate} from './region'\nimport {forIn, includes} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  onConfigNesting(args[0], (injectedData, userConfig) => {\n    config = injectedData\n    args = userConfig\n  })\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      handler = spreadArgs(handler)\n    }\n  }\n  if (!isObject(structStoreShape)) throwError('shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst spreadArgs = (fn: Function) => (list: any[]) => fn(...list)\n\nconst storeCombination = (\n  isArray: boolean,\n  obj: any,\n  config?: string,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => list.slice() : (obj: any) => ({...obj})\n  const defaultState: any = isArray ? [] : {}\n  const template = readTemplate()\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  if (template) {\n    template.plain.push(rawShape, isFresh)\n  }\n  const store = createStore(stateNew, {\n    name: config ? config : unitObjectName(obj),\n  })\n  const node = [\n    step.check.defined(),\n    step.mov({\n      store: rawShape,\n      to: REG_A,\n    }),\n    //prettier-ignore\n    step.filter({\n      fn: (upd, {key}, {a}) => upd !== a[key],\n    }),\n    step.mov({\n      store: isFresh,\n      to: 'b',\n    }),\n    step.compute({\n      fn(upd, {clone, key}, reg) {\n        if (reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n      },\n    }),\n    step.mov({\n      from: REG_A,\n      target: rawShape,\n    }),\n    step.mov({\n      from: VALUE,\n      store: false,\n      target: isFresh,\n    }),\n    step.barrier({priority: BARRIER}),\n    step.mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n    }),\n    step.mov({store: rawShape}),\n    fn && step.compute({fn}),\n    step.check.changed({\n      store: getStoreState(store),\n    }),\n  ]\n  const before: any[] = (rawShape.before = [])\n  forIn(obj, (child, key) => {\n    if (!is.store(child)) {\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, {\n      scope: {key, clone},\n      node,\n      meta: {op: 'combine'},\n    })\n    const childRef = getStoreState(child)\n    before.push({\n      type: 'field',\n      field: key,\n      from: childRef,\n    })\n    if (template) {\n      if (!includes(template.plain, childRef)) {\n        linkNode.seq.unshift(template.loader)\n      }\n    }\n  })\n\n  store.defaultShape = obj\n  rawShape.after = [\n    fn\n      ? {\n          type: MAP,\n          to: getStoreState(store),\n          fn,\n        }\n      : {\n          type: 'copy',\n          to: getStoreState(store),\n        },\n  ]\n  if (!template) {\n    store.defaultState = fn\n      ? (getStoreState(store).current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n","export function createDefer(): {\n  rs: (value: any) => any\n  rj: (value: any) => any\n  req: Promise<any>\n} {\n  const result = {} as {\n    rs: (value: any) => any\n    rj: (value: any) => any\n    req: Promise<any>\n  }\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","import {step} from './typedef'\nimport {getForkPage, getGraph, getParent} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch} from './kernel'\nimport {createNamedEvent, createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {throwError} from './throw'\nimport {EFFECT} from './tag'\n\nexport function createEffect<Payload, Done>(\n  nameOrConfig: any,\n  maybeConfig: any,\n) {\n  const instance: any = createEvent(nameOrConfig, maybeConfig)\n  let handler =\n    instance.defaultConfig.handler ||\n    (() => throwError(`no handler used in ${instance.getType()}`))\n  const node = getGraph(instance)\n  node.meta.onCopy = ['runner']\n  node.meta.unit = instance.kind = EFFECT\n  instance.use = (fn: Function) => {\n    if (!isFunction(fn)) throwError('.use argument should be a function')\n    handler = fn\n    return instance\n  }\n  const anyway = (instance.finally = createNamedEvent('finally'))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({status, params, result}: any) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({status, params, error}: any) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: any) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: any) => error,\n  }))\n\n  const effectRunner = createNode({\n    scope: {\n      getHandler: instance.use.getCurrent = () => handler,\n      finally: anyway,\n    },\n    node: [\n      step.run({\n        fn({params, req}, {finally: anyway, getHandler}, stack) {\n          const onResolve = onSettled({\n            params,\n            req,\n            ok: true,\n            anyway,\n            stack,\n          })\n          const onReject = onSettled({\n            params,\n            req,\n            ok: false,\n            anyway,\n            stack,\n          })\n          let result\n          try {\n            result = getHandler()(params)\n          } catch (err) {\n            return void onReject(err)\n          }\n          if (isObject(result) && isFunction(result.then)) {\n            result.then(onResolve, onReject)\n          } else {\n            onResolve(result)\n          }\n        },\n      }),\n    ],\n    meta: {\n      op: 'fx',\n      fx: 'runner',\n      onCopy: ['finally'],\n    },\n  })\n  node.scope.runner = effectRunner\n  node.seq.push(\n    step.compute({\n      fn(params, scope, stack) {\n        // empty stack means that this node was launched directly\n        if (!getParent(stack)) return params\n        return {\n          params,\n          req: {\n            rs(data: any) {},\n            rj(data: any) {},\n          },\n        }\n      },\n    }),\n    step.run({\n      fn(upd, {runner}, stack) {\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          forkPage: getForkPage(stack),\n        })\n        return upd.params\n      },\n    }),\n  )\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req.finally(() => {\n          setForkPage(savedFork)\n        })\n      }\n      launch(forkPage.find(instance), payload)\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {named: 'inFlight'})\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1))\n\n  const pending = (instance.pending = inFlight.map({\n    //@ts-ignore\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [\n    anyway,\n    done,\n    fail,\n    doneData,\n    failData,\n    pending,\n    inFlight,\n    effectRunner,\n  ])\n  return instance\n}\n\nexport const onSettled = ({\n  params,\n  req,\n  ok,\n  anyway,\n  stack,\n}: {\n  params: any\n  req: {\n    rs(_: any): any\n    rj(_: any): any\n  }\n  ok: boolean\n  anyway: any\n  stack: any\n}) => (data: any) =>\n  launch({\n    target: [anyway, sidechain],\n    params: [\n      ok\n        ? {\n            status: 'done',\n            params,\n            result: data,\n          }\n        : {\n            status: 'fail',\n            params,\n            error: data,\n          },\n      {\n        fn: ok ? req.rs : req.rj,\n        value: data,\n      },\n    ],\n    defer: true,\n    page: stack.page,\n    forkPage: getForkPage(stack),\n  })\n\nconst sidechain = createNode({\n  node: [\n    step.run({\n      fn({fn, value}) {\n        fn(value)\n      },\n    }),\n  ],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import {combine} from './combine'\nimport {step} from './typedef'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg, callARegStack} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {createNode} from './createNode'\nimport {addToRegion, readTemplate} from './region'\nimport {throwError} from './throw'\nimport {includes} from './collection'\nimport {REG_A, SAMPLE, SAMPLER, STACK, STORE, VALUE} from './tag'\n\nexport function sample(...args: any): any {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let greedy\n  //config case\n  if (clock === undefined && 'source' in source) {\n    if ('clock' in source && source.clock == null)\n      throwError('config.clock should be defined')\n    clock = source.clock\n    fn = source.fn\n    greedy = source.greedy\n    //optional target & name accepted only from config\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (clock === undefined) {\n    //still undefined!\n    clock = source\n  }\n  name = metadata || name || source.shortName\n  const template = readTemplate()\n  const isUpward = !!target\n  if (!target) {\n    if (is.store(source) && is.store(clock)) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name, sid})\n    } else {\n      target = createEvent(name)\n      if (template) {\n        getGraph(target).seq.push(template.loader)\n      }\n    }\n  }\n  const targetTemplate =\n    isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  if (is.store(source)) {\n    const sourceRef = getStoreState(source)\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {fn, targetTemplate},\n        node: [\n          template && template.loader,\n          //@ts-ignore\n          !greedy && step.barrier({priority: SAMPLER}),\n          step.mov({\n            store: sourceRef,\n            to: fn ? REG_A : STACK,\n          }),\n          fn && step.compute({fn: callARegStack}),\n          template && isUpward && template.upward,\n        ],\n        meta: {op: SAMPLE, sample: STORE},\n      }),\n    ])\n    if (template) {\n      if (\n        !includes(template.plain, sourceRef) &&\n        !includes(template.closure, sourceRef)\n      ) {\n        template.closure.push(sourceRef)\n      }\n    }\n  } else {\n    const hasSource = createStateRef(false)\n    const sourceState = createStateRef()\n    const clockState = createStateRef()\n    if (template) {\n      template.plain.push(hasSource, sourceState, clockState)\n    }\n    addToRegion(\n      createNode({\n        parent: source,\n        node: [\n          step.update({store: sourceState}),\n          step.mov({\n            from: VALUE,\n            store: true,\n            target: hasSource,\n          }),\n        ],\n        family: {\n          owners: [source, target, clock],\n          links: target,\n        },\n        meta: {op: SAMPLE, sample: 'source'},\n      }),\n    )\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {\n          fn,\n          targetTemplate,\n        },\n        node: [\n          template && template.loader,\n          step.update({store: clockState}),\n          step.mov({store: hasSource}),\n          step.filter({fn: hasSource => hasSource}),\n          //@ts-ignore\n          !greedy && step.barrier({priority: SAMPLER}),\n          step.mov({store: sourceState}),\n          step.mov({\n            store: clockState,\n            to: REG_A,\n          }),\n          fn && step.compute({fn: callStackAReg}),\n          template && isUpward && template.upward,\n        ],\n        meta: {op: SAMPLE, sample: 'clock'},\n      }),\n    ])\n  }\n  return target\n}\n","import {getForkPage, getGraph, getLinks, getOwners} from './getter'\nimport {bind} from './bind'\nimport {createDefer} from './defer'\nimport {watchUnit} from './watch'\nimport {is, isObject} from './is'\nimport {throwError} from './throw'\nimport {launch, forkPage, setForkPage} from './kernel'\nimport {createNode} from './createNode'\nimport {step} from './typedef'\nimport {Domain, Store} from './unit.h'\nimport {Graph, StateRef} from './index.h'\nimport {removeItem, forEach, includes, forIn} from './collection'\nimport {DOMAIN, STORE, EVENT, EFFECT, SAMPLER, MAP, FORK_COUNTER} from './tag'\n\n/**\nhydrate state on client\n\nconst root = createDomain()\nhydrate(root, {\n  values: window.__initialState__\n})\n\n*/\nexport function hydrate(domain: Domain, {values}: {values: any}) {\n  const isScope = isObject(domain) && (domain as any).cloneOf\n  if (!is.domain(domain) && !isScope) {\n    throwError('first argument of hydrate should be domain or scope')\n  }\n  if (!isObject(values)) {\n    throwError('values property should be an object')\n  }\n  const normalizedValues = normalizeValues(values)\n  let storeWatches: Graph[]\n  let storeWatchesRefs: any[]\n  if (isScope) {\n    storeWatches = []\n    storeWatchesRefs = []\n    forIn(normalizedValues, (val, sid) => {\n      //@ts-ignore\n      const node = domain.sidMap[sid]\n      if (node) {\n        storeWatches.push(node)\n        storeWatchesRefs.push(val)\n      }\n    })\n  } else {\n    const fillResult = fillValues({\n      flatGraphUnits: flatGraph(domain),\n      values: normalizedValues,\n      collectWatches: true,\n    })\n    storeWatches = fillResult.storeWatches\n    storeWatchesRefs = fillResult.storeWatchesRefs.map(({current}) => current)\n  }\n\n  launch({\n    target: storeWatches,\n    params: storeWatchesRefs,\n    forkPage: isScope ? domain : false,\n  })\n}\n\nfunction fillValues({\n  flatGraphUnits,\n  values,\n  collectWatches,\n}: {\n  flatGraphUnits: Graph[]\n  values: Record<string, any>\n  collectWatches: boolean\n}) {\n  const storeWatches = []\n  const storeWatchesRefs = []\n  const refsMap = {} as Record<string, StateRef>\n  const predefinedRefs = new Set()\n  const valuesSidList = Object.getOwnPropertyNames(values)\n  for (const node of flatGraphUnits) {\n    const {reg} = node\n    const {op, unit, sid} = node.meta\n    if (unit === STORE) {\n      if (sid && includes(valuesSidList, sid)) {\n        const {state} = node.scope\n        state.current = values[sid]\n        predefinedRefs.add(state)\n      }\n    }\n    if (collectWatches && op === 'watch') {\n      const owner = node.family.owners[0]\n      if (owner.meta.unit === STORE) {\n        storeWatches.push(node)\n        storeWatchesRefs.push(owner.scope.state)\n      }\n    }\n    for (const id in reg) {\n      refsMap[id] = reg[id]\n    }\n  }\n  const refGraph = createRefGraph(refsMap)\n  const result = toposort(refGraph)\n  forEach(result, id => {\n    execRef(refsMap[id])\n  })\n\n  return {\n    storeWatches,\n    storeWatchesRefs,\n  }\n  function execRef(ref: StateRef) {\n    let isFresh = false\n    if (ref.before && !predefinedRefs.has(ref)) {\n      for (const cmd of ref.before) {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            ref.current = cmd.fn(from.current)\n            break\n          }\n          case 'field': {\n            const from = cmd.from\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            ref.current[cmd.field] = from.current\n            break\n          }\n          case 'closure':\n            break\n        }\n      }\n    }\n    if (!ref.after) return\n    const value = ref.current\n    for (const cmd of ref.after) {\n      const to = cmd.to\n      // if (predefinedRefs.has(to)) continue\n      switch (cmd.type) {\n        case 'copy':\n          to.current = value\n          break\n        case MAP:\n          to.current = cmd.fn(value)\n          break\n      }\n    }\n  }\n}\n\nfunction createRefGraph(refsMap: Record<string, StateRef>) {\n  const items = Object.values(refsMap)\n  const refGraph = {} as Record<string, string[]>\n  for (const {id} of items) {\n    refGraph[id] = []\n  }\n  //prettier-ignore\n  for (const {id, before, after} of items) {\n    before && forEach(before, cmd => {\n      refGraph[cmd.from.id].push(id)\n    })\n    after && forEach(after, cmd => {\n      refGraph[id].push(cmd.to.id)\n    })\n  }\n  return refGraph\n}\n\n/**\nserialize state on server\n*/\nexport function serialize(\n  {clones, getState, cloneOf}: any,\n  {\n    ignore = [],\n    onlyChanges,\n  }: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  const result = {} as Record<string, any>\n  if (onlyChanges) {\n    ignore = [...ignore]\n    for (const store of cloneOf.history.stores) {\n      if (getState(store) === store.defaultState) {\n        ignore.push(store)\n      }\n    }\n  }\n  for (const {meta, scope, reg} of clones) {\n    if (meta.unit !== STORE) continue\n    const {sid} = meta\n    if (!sid) continue\n    result[sid] = reg[scope.state.id].current\n  }\n  for (const {sid} of ignore) {\n    if (sid) delete result[sid]\n  }\n  return result\n}\n\n/** bind event to scope */\nexport function scopeBind(unit: any) {\n  if (!forkPage) {\n    throwError('scopeBind cannot be called outside of forked .watch')\n  }\n  const result = forkPage.find(unit)\n  const savedStack = forkPage\n  return (payload: any) => {\n    launch({\n      target: result,\n      params: payload,\n      forkPage: savedStack,\n    })\n  }\n}\n\nfunction normalizeValues(values: Map<Store<any>, any> | Record<string, any>) {\n  if (values instanceof Map) {\n    const result = {} as Record<string, any>\n    for (const [key, value] of values) {\n      if (!is.unit(key)) throwError('Map key should be a unit')\n      result[key.sid!] = value\n    }\n    return result\n  }\n  return values\n}\nexport function fork(\n  domain: Domain,\n  {values, handlers}: {values?: any; handlers?: any} = {},\n) {\n  if (!is.domain(domain)) throwError('first argument of fork should be domain')\n  const needToFill = !!values\n  values = normalizeValues(values || {})\n  const forked = cloneGraph(domain)\n  if (needToFill) {\n    fillValues()\n  }\n  if (handlers) {\n    handlers = normalizeValues(handlers)\n    const handlerKeys = Object.keys(handlers)\n    for (const {scope, meta} of forked.clones) {\n      if (meta.sid && includes(handlerKeys, meta.sid)) {\n        scope.runner.scope.getHandler = () => handlers[meta.sid]\n      }\n    }\n  }\n  return forked\n\n  function fillValues() {\n    const sourceList = flatGraph(domain)\n    const sourceRefsMap = {} as Record<string, StateRef>\n    const refsMap = {} as Record<string, StateRef>\n    const predefinedRefs = new Set()\n    const templateOwnedRefs = new Set<string>()\n    const valuesSidList = Object.getOwnPropertyNames(values)\n    for (const {reg, meta} of sourceList) {\n      const {nativeTemplate} = meta\n      for (const id in reg) {\n        sourceRefsMap[id] = reg[id]\n        if (nativeTemplate) {\n          templateOwnedRefs.add(id)\n        }\n      }\n    }\n    for (const node of forked.clones) {\n      const {reg} = node\n      const {unit, sid} = node.meta\n      if (unit === STORE) {\n        if (sid && includes(valuesSidList, sid)) {\n          const {state} = node.scope\n          reg[state.id].current = values[sid]\n          predefinedRefs.add(state)\n        }\n      }\n      for (const id in reg) {\n        refsMap[id] = reg[id]\n      }\n    }\n    const refGraph = createRefGraph(sourceRefsMap)\n    const result = toposort(refGraph, templateOwnedRefs)\n    forEach(result, id => {\n      execRef(refsMap[id], sourceRefsMap[id])\n    })\n\n    function execRef(ref: StateRef, sourceRef?: StateRef) {\n      let isFresh = false\n      if (sourceRef && sourceRef.before && !predefinedRefs.has(ref)) {\n        for (const cmd of sourceRef.before) {\n          switch (cmd.type) {\n            case MAP: {\n              const from = refsMap[cmd.from.id]\n              ref.current = cmd.fn(from.current)\n              break\n            }\n            case 'field': {\n              const from = refsMap[cmd.from.id]\n              if (!isFresh) {\n                isFresh = true\n                if (Array.isArray(ref.current)) {\n                  ref.current = [...ref.current]\n                } else {\n                  ref.current = {...ref.current}\n                }\n              }\n              ref.current[cmd.field] = from.current\n              break\n            }\n            case 'closure':\n              break\n          }\n        }\n      }\n      if (!sourceRef || !sourceRef.after) return\n      const value = ref.current\n      for (const cmd of sourceRef.after) {\n        const to = refsMap[cmd.to.id]\n        // if (predefinedRefs.has(to)) continue\n        switch (cmd.type) {\n          case 'copy':\n            to.current = value\n            break\n          case MAP:\n            to.current = cmd.fn(value)\n            break\n        }\n      }\n    }\n  }\n}\nfunction toposort(rawGraph: Record<string, string[]>, ignore?: Set<string>) {\n  const graph = {} as Record<string, string[]>\n  for (const id in rawGraph) {\n    graph[id] = [...new Set(rawGraph[id])]\n  }\n  const result = [] as string[]\n  const visited = {} as Record<string, boolean>\n  const temp = {} as Record<string, boolean>\n  for (const node in graph) {\n    if (!visited[node] && !temp[node]) {\n      topologicalSortHelper(node)\n    }\n  }\n  result.reverse()\n  if (ignore && ignore.size > 0) {\n    const processed = [] as string[]\n    const ignored = [...ignore]\n    let item: string | void\n    while ((item = ignored.shift())) {\n      processed.push(item)\n      forEach(graph[item], child => {\n        if (includes(processed, child) || includes(ignored, child)) return\n        ignored.push(child)\n      })\n    }\n    forEach(processed, item => {\n      removeItem(result, item)\n    })\n  }\n  return result\n  function topologicalSortHelper(node: string) {\n    temp[node] = true\n    const neighbors = graph[node]\n    for (let i = 0; i < neighbors.length; i++) {\n      const n = neighbors[i]\n      if (temp[n]) {\n        continue\n        // throw Error('found cycle in DAG')\n      }\n      if (!visited[n]) {\n        topologicalSortHelper(n)\n      }\n    }\n    temp[node] = false\n    visited[node] = true\n    result.push(node)\n  }\n}\nexport function allSettled(\n  start: any,\n  {scope, params: ctx}: {scope: any; params?: any},\n) {\n  if (!is.unit(start))\n    return Promise.reject(Error('first argument should be unit'))\n  const defer = createDefer()\n  //@ts-ignore\n  defer.parentFork = forkPage\n  const {forkInFlightCounter} = scope.graphite.scope\n  forkInFlightCounter.scope.defers.push(defer)\n  const contextStart = scope.find(start)\n\n  const launchUnits = [contextStart]\n  const launchParams = []\n  if (is.effect(start)) {\n    launchParams.push({\n      params: ctx,\n      req: {\n        rs(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'done', value}\n        },\n        rj(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'fail', value}\n        },\n      },\n    })\n  } else {\n    launchParams.push(ctx)\n  }\n  launchUnits.push(forkInFlightCounter)\n  launchParams.push(null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    forkPage: scope,\n  })\n  return defer.req\n}\nfunction flatGraph(unit: any) {\n  const list = [] as Graph[]\n  ;(function traverse(node) {\n    if (includes(list, node)) return\n    list.push(node)\n    forEachRelatedNode(node, traverse)\n  })(getGraph(unit))\n  return list\n}\n/**\neverything we need to clone graph section\nreachable from given unit\n*/\nfunction cloneGraph(unit: any) {\n  const list = flatGraph(unit)\n  const refs = new Map()\n  const scope = {\n    defers: [],\n    inFlight: 0,\n    fxID: 0,\n  }\n  const forkPageSetter = step.compute({\n    fn(data, _, stack) {\n      setForkPage(getForkPage(stack))\n      return data\n    },\n  })\n  const forkInFlightCounter = createNode({\n    scope,\n    node: [\n      step.compute({\n        fn(_, scope, stack) {\n          if (!stack.parent) {\n            scope.fxID += 1\n            return\n          }\n          if (stack.parent.node.meta.named === 'finally') {\n            scope.inFlight -= 1\n          } else {\n            scope.inFlight += 1\n            scope.fxID += 1\n          }\n        },\n      }),\n      step.barrier({priority: SAMPLER}),\n      step.run({\n        fn(_, scope) {\n          const {inFlight, defers, fxID} = scope\n          if (inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), (defer: any) => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n      }),\n    ],\n    meta: {unit: FORK_COUNTER},\n  })\n  const nodeMap = {} as Record<string, Graph>\n  const sidMap = {} as Record<string, Graph>\n  const clones = list.map(node => {\n    const {seq, next, meta, scope} = node\n    const result = createNode({\n      node: seq.map(step => ({\n        id: step.id,\n        type: step.type,\n        data: {...step.data},\n        hasRef: step.hasRef,\n      })) as any,\n      child: [...next],\n      meta: {forkOf: node, ...meta},\n      scope: {...scope},\n    })\n    result.family = {\n      type: node.family.type,\n      links: [...getLinks(node)],\n      owners: [...getOwners(node)],\n    }\n    nodeMap[node.id] = result\n    if (meta.sid) sidMap[meta.sid] = result\n    return result\n  })\n  const page = {} as Record<string, StateRef>\n  forEach(clones, node => {\n    const {\n      reg,\n      scope,\n      meta: {onCopy, op, unit},\n    } = node\n    for (const id in reg) {\n      const ref = reg[id]\n      let newRef = refs.get(ref)\n      if (!newRef) {\n        newRef = {\n          id: ref.id,\n          current: ref.current, //ref.id in values ? values[ref.id] : ref.current,\n        }\n        refs.set(ref, newRef)\n      }\n      page[id] = reg[id] = newRef\n    }\n    if (onCopy) {\n      for (let j = 0; j < onCopy.length; j++) {\n        scope[onCopy[j]] = findClone(scope[onCopy[j]])\n      }\n    }\n    forEachRelatedNode(node, (node, i, siblings) => {\n      siblings[i] = findClone(node)\n    })\n    const itemTag = op || unit\n    switch (itemTag) {\n      case STORE:\n        node.meta.wrapped = wrapStore(node)\n        break\n      case EVENT:\n        node.seq.unshift(forkPageSetter)\n        break\n      case EFFECT:\n        node.next.push(forkInFlightCounter)\n        node.seq.unshift(forkPageSetter)\n        break\n      case 'fx': {\n        scope.finally.next.push(forkInFlightCounter)\n        node.seq.unshift(forkPageSetter)\n        break\n      }\n      case 'watch':\n        node.seq.unshift(forkPageSetter)\n        break\n    }\n  })\n\n  return {\n    cloneOf: unit,\n    nodeMap,\n    sidMap,\n    clones,\n    find: findClone,\n    reg: page,\n    getState: (store: any) => findClone(store).meta.wrapped.getState(),\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, ...clones],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n  }\n  function findClone(unit: any) {\n    const node = getGraph(unit)\n    const index = list.indexOf(node)\n    if (index === -1) {\n      let unitName = 'unit'\n      if (unit !== node && unit.id !== unit.shortName) unitName = unit.shortName\n      throwError(`${unitName} not found in forked scope`)\n    }\n    return clones[index]\n  }\n}\n\nfunction wrapStore(node: Graph) {\n  return {\n    kind: STORE,\n    getState: () => node.reg[node.scope.state.id].current,\n    updates: {\n      watch: bind(watchUnit, node),\n    },\n    graphite: node,\n    family: node.family,\n  }\n}\nfunction forEachRelatedNode(\n  node: Graph,\n  cb: (node: Graph, index: number, siblings: Graph[]) => void,\n) {\n  const unit = node.meta.unit\n  if (unit === 'fork' || unit === FORK_COUNTER) return\n  forEach(node.next, cb)\n  forEach(getOwners(node), cb)\n  forEach(getLinks(node), cb)\n}\n","export const observableSymbol: any =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import {kind} from './index.h'\nimport {DOMAIN, STORE, EVENT, EFFECT} from './tag'\nimport {isObject, isFunction} from './is'\n\nexport const unit = (obj: any) =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: kind) => (obj: any) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE)\nexport const event = is(EVENT)\nexport const effect = is(EFFECT)\nexport const domain = is(DOMAIN)\n","export const throwError = (message: string) => {\n  throw Error(message)\n}\n","//eslint-disable-next-line\nexport * as is from './validate'\nimport {throwError} from './throw'\n\nexport const isObject = (value: any) =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: any) => typeof value === 'function'\n\nexport const assertObject = (value: any) => {\n  if (!isObject(value) && !isFunction(value))\n    throwError('expect first argument be an object') // or function\n}\n","const idCount = () => {\n  let id = 0\n  return () => (++id).toString(36)\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","export const bind = (fn: Function, target: any) => fn.bind(null, target)\nexport const bind2 = (fn: Function, target: any, arg: any) =>\n  fn.bind(null, target, arg)\n","import {StateRef, Run, Filter, Compute, Barrier, Check, Mov} from './index.h'\nimport {nextStepID} from './id'\nimport {bind2} from './bind'\nimport {BARRIER, FILTER, STACK, STORE} from './tag'\n\nconst cmd = (type: any, hasRef: boolean, data: any): any => ({\n  id: nextStepID(),\n  type,\n  data,\n  hasRef,\n})\n\nlet nextBarrierID = 0\n\nexport const barrier: (data: {priority?: 'barrier' | 'sampler'}) => Barrier = ({\n  priority = BARRIER,\n}) =>\n  cmd(BARRIER, false, {\n    barrierID: ++nextBarrierID,\n    priority,\n  })\nexport const mov: (data: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b'\n  store?: any\n  target?: any\n}) => Mov = ({from = STORE, store, target, to = target ? STORE : STACK}) =>\n  cmd('mov', from === STORE, {from, store, to, target})\nexport const check: {\n  defined(): Check\n  changed(config: {store: StateRef}): Check\n} = {\n  defined: () => cmd('check', false, {type: 'defined'}),\n  changed: ({store}) => cmd('check', true, {type: 'changed', store}),\n}\nexport const compute: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Compute = bind2(cmd, 'compute', false)\nexport const filter: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Filter = bind2(cmd, FILTER, false)\nexport const run: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Run = bind2(cmd, 'run', false)\nexport const update: (data: {store: StateRef}) => Mov = ({store}) =>\n  mov({from: STACK, target: store})\n","import {StateRef} from './index.h'\nimport {nextStepID} from './id'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n","export const callStackAReg = (stack: any, {fn}: any, {a}: any) => fn(stack, a)\nexport const callARegStack = (stack: any, {fn}: any, {a}: any) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: any, _: any) => fn(stack)\n","import {Graph} from './index.h'\n\nexport const getGraph = (graph: any): Graph => graph.graphite || graph\nexport const getOwners = (node: Graph) => node.family.owners\nexport const getLinks = (node: Graph) => node.family.links\nexport const getStoreState = (store: any) => store.stateRef\nexport const getConfig = (opts: any) => opts.config\nexport const getNestedConfig = (opts: any) => opts.ɔ\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: any) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any) => val.forkPage\n","import {Graphite} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\n\nexport const own = (ownerUnit: Graphite, links: Graphite[]) => {\n  const owner = getGraph(ownerUnit)\n  for (let i = 0; i < links.length; i++) {\n    const link = getGraph(links[i])\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    getOwners(link).push(owner)\n    getLinks(owner).push(link)\n  }\n}\n","import {Graph} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getValue} from './getter'\nimport {\n  STORE,\n  EFFECT,\n  SAMPLER,\n  STACK,\n  BARRIER,\n  VALUE,\n  FILTER,\n  REG_A,\n} from './tag'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Graph\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Call stack */\ntype Stack = {\n  value: any\n  a: any\n  b: any\n  parent: Stack | null\n  node: Graph\n  page: {[id: string]: any} | null\n  forkPage?: any\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  const isSameType = a.v.type === b.v.type\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (isSameType && a.v.id > b.v.id) ||\n    /** if first node is \"sampler\" and second node is \"barrier\" */\n    (!isSameType && a.v.type === SAMPLER)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 5) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  queue.push({first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 5; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * second bucket is for \"barrier\" PriorityType (used in combine)\n       * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 2 || i === 3) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: {[id: string]: any} | null,\n  node: Graph,\n  parent: Stack | null,\n  value: any,\n  forkPage: any | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      forkPage,\n    },\n    type,\n  )\nconst pushHeap = (idx: number, stack: Stack, type: PriorityTag, id = 0) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    //@ts-ignore\n    l: 0,\n    //@ts-ignore\n    r: 0,\n  }\n  /**\n   * second bucket is for \"barrier\" PriorityType (used in combine)\n   * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 2 || priority === 3) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case BARRIER:\n      return 2\n    case SAMPLER:\n      return 3\n    case EFFECT:\n      return 4\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set()\n\nlet isRoot = true\nexport let isWatch = false\nexport let currentPage: any = null\nexport let forkPage: any\nexport const setForkPage = (newForkPage: any) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: any) => {\n  currentPage = newPage\n}\n\n/** main execution method */\nconst exec = () => {\n  const lastStartedState = {isRoot, currentPage, forkPage, isWatch}\n  isRoot = false\n  let stop\n  let skip\n  let graph\n  let value\n  let page\n  let reg\n  mem: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    graph = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    reg = (page ? page : graph).reg\n    const local: Local = {\n      fail: false,\n      scope: graph.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < graph.seq.length && !stop; stepn++) {\n      const step = graph.seq[stepn]\n      const data = step.data\n      switch (step.type) {\n        case BARRIER: {\n          let id = data.barrierID\n          if (page) {\n            id = `${page.fullID}_${id}`\n          }\n          const priority = data.priority\n          if (stepn !== idx || type !== priority) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, id)\n            }\n            continue mem\n          }\n          barriers.delete(id)\n          break\n        }\n        case 'mov': {\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (!reg[data.store.id]) {\n                // if (!page.parent) {\n                stack.page = page = null\n                reg = graph.reg\n                // }\n              }\n              value = readRef(reg[data.store.id])\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              reg[data.target.id].current = value\n              break\n          }\n          break\n        }\n        case 'check':\n          switch (data.type) {\n            case 'defined':\n              skip = getValue(stack) === undefined\n              break\n            case 'changed':\n              skip = getValue(stack) === readRef(reg[data.store.id])\n              break\n          }\n          break\n        case FILTER:\n          /**\n           * handled edge case: if step.fn will throw,\n           * tryRun will return null\n           * thereby forcing that branch to stop\n           */\n          skip = !tryRun(local, data, stack)\n          break\n        case 'run':\n          /** exec 'compute' step when stepn === idx */\n          if (stepn !== idx || type !== EFFECT) {\n            pushHeap(stepn, stack, EFFECT)\n            continue mem\n          }\n        case 'compute':\n          isWatch = graph.meta.op === 'watch'\n          stack.value = tryRun(local, data, stack)\n          isWatch = lastStartedState.isWatch\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      for (let stepn = 0; stepn < graph.next.length; stepn++) {\n        pushFirstHeapItem(\n          'child',\n          page,\n          graph.next[stepn],\n          stack,\n          getValue(stack),\n          getForkPage(stack),\n        )\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\nexport const launch = (unit: any, payload?: any, upsert?: boolean) => {\n  let page = currentPage\n  let stack = null\n  let forkedPage = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    page = 'page' in unit ? unit.page : page\n    if (unit[STACK]) stack = unit[STACK]\n    forkedPage = getForkPage(unit) || forkedPage\n    unit = unit.target\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        page,\n        getGraph(unit[i]),\n        stack,\n        payload[i],\n        forkedPage,\n      )\n    }\n  } else {\n    pushFirstHeapItem('pure', page, getGraph(unit), stack, payload, forkedPage)\n  }\n  if (upsert && !isRoot) return\n  exec()\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, {fn}: any, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import {getConfig, getNestedConfig} from './getter'\nimport {assertObject} from './is'\n\nexport const onConfigNesting = (\n  rawConfig: any,\n  fn: (babelData: any, userConfig: any) => void,\n) => {\n  assertObject(rawConfig)\n  if (getNestedConfig(rawConfig)) {\n    fn(getConfig(rawConfig), getNestedConfig(rawConfig))\n  }\n}\n\nexport const processArgsToConfig = (args: any[]): [any[], any | void] => {\n  let metadata\n  onConfigNesting(args[0], (injected, config) => {\n    metadata = injected\n    args = config\n  })\n  return [args, metadata]\n}\n","import {Graph, Graphite} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Graph, targetNode: Graph) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Graph,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-ignore\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && !targetNode.meta.sample) ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        currentNode.meta.op !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        currentNode.meta.op !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: any) => map.clear()\nexport const clearNode = (\n  graphite: Graphite,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-ignore\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    //@ts-ignore\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import {Subscription, Graphite} from './index.h'\nimport {bind2} from './bind'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: Graphite): Subscription => {\n  const result = bind2(clearNode, node, undefined)\n  result.unsubscribe = result\n  return result\n}\n","import {onConfigNesting} from './config'\nimport {createNode} from './createNode'\nimport {Subscription, Graphite, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {throwError} from './throw'\nimport {addToRegion} from './region'\n\nexport const createLinkNode = (\n  parent: Graphite,\n  child: Graphite,\n  {\n    node,\n    scope,\n    meta,\n  }: {\n    node?: Array<Cmd | false | void | null>\n    scope?: {[name: string]: any}\n    meta?: {[name: string]: any}\n  },\n) =>\n  addToRegion(\n    createNode({\n      node,\n      parent,\n      child,\n      scope,\n      meta,\n      family: {\n        owners: [parent, child],\n        links: child,\n      },\n    }),\n  )\nexport const forward = (opts: {\n  from: Graphite | Graphite[]\n  to: Graphite | Graphite[]\n  meta?: Record<string, any>\n}): Subscription => {\n  let config\n  onConfigNesting(opts, (injectedData, userConfig) => {\n    config = injectedData\n    opts = userConfig\n  })\n  const {from, to, meta = {op: 'forward'}} = opts\n  if (!from || !to) throwError('from and to fields should be defined')\n  if (config) meta.config = config\n  return createSubscription(\n    addToRegion(\n      createNode({\n        parent: from,\n        child: to,\n        meta,\n        family: {},\n      }),\n    ),\n  )\n}\n","import {step} from './typedef'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, Unit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {addToRegion} from './region'\nimport {throwError} from './throw'\nimport {isFunction} from './is'\nimport {forkPage} from './kernel'\nimport {getGraph} from './getter'\n\nexport const watchUnit = (\n  unit: Unit,\n  handler: (payload: any) => any,\n): Subscription => {\n  if (!isFunction(handler)) throwError('.watch argument should be a function')\n  if (forkPage) {\n    const forkedNode = forkPage.nodeMap[getGraph(unit).id]\n    if (forkedNode) unit = forkedNode\n  }\n  return createSubscription(\n    addToRegion(\n      createNode({\n        scope: {fn: handler},\n        node: [step.run({fn: callStack})],\n        parent: unit,\n        meta: {op: 'watch'},\n        family: {\n          owners: unit,\n        },\n      }),\n    ),\n  )\n}\n","import {Store, Event, Effect, Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {Config} from './index.h'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {forward} from './forward'\nimport {addToRegion} from './region'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {DOMAIN} from './tag'\n\nconst createHook = (trigger: Event<any>, acc: Set<any>, node: any) => {\n  trigger.watch(data => {\n    own(node, [data])\n    acc.add(data)\n    if (!data.ownerSet) data.ownerSet = acc\n    if (!getParent(data)) data.parent = node\n  })\n  own(node, [trigger])\n  return (hook: (data: any) => any) => {\n    acc.forEach(hook)\n    return trigger.watch(hook)\n  }\n}\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const domains: Set<Domain> = new Set()\n  const stores: Set<Store<any>> = new Set()\n  const effects: Set<Effect<any, any, any>> = new Set()\n  const events: Set<Event<any>> = new Set()\n\n  const node = createNode({\n    family: {type: DOMAIN},\n  })\n\n  const result: any = {\n    history: {\n      domains,\n      stores,\n      effects,\n      events,\n    },\n    graphite: node,\n  }\n\n  node.meta = initUnit(DOMAIN, result, maybeConfig, nameOrConfig)\n  const [event, effect, store, domain] = [\n    'onEvent',\n    'onEffect',\n    'onStore',\n    'onDomain',\n  ].map(createNamedEvent)\n\n  result.hooks = {\n    event,\n    effect,\n    store,\n    domain,\n  }\n  result.onCreateEvent = createHook(event, events, result)\n  result.onCreateEffect = createHook(effect, effects, result)\n  result.onCreateStore = createHook(store, stores, result)\n  result.onCreateDomain = createHook(domain, domains, result)\n\n  result.createEvent = result.event = (nameOrConfig: any, config?: Config) =>\n    event(\n      createEvent(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createEffect = result.effect = (nameOrConfig: any, config?: Config) =>\n    effect(\n      createEffect(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createDomain = result.domain = (nameOrConfig: any, config?: Config) =>\n    createDomain({\n      name: nameOrConfig,\n      parent: result,\n      config,\n    })\n  result.createStore = result.store = (state: any, config?: Config) =>\n    store(\n      createStore(state, {\n        parent: result,\n        config,\n      }),\n    )\n  addToRegion(result)\n  const parent = getParent(result)\n  if (parent) {\n    forIn(result.hooks, (from, key) => {\n      forward({from, to: parent.hooks[key]})\n    })\n    parent.hooks.domain(result)\n  }\n  return result\n}\n","import {combine} from './combine'\nimport {createEffect, onSettled} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {onConfigNesting} from './config'\nimport {getGraph, getStoreState} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {step} from './typedef'\nimport {launch} from './kernel'\nimport {addToReg} from './createNode'\nimport {STORE, EFFECT, REG_A} from './tag'\n\nexport function attach(config: any) {\n  let injected\n  onConfigNesting(config, (injectedData, userConfig) => {\n    injected = injectedData\n    config = userConfig\n  })\n  let {source, effect, mapParams} = config\n  if (!mapParams)\n    mapParams = source\n      ? (_: any, source: any) => source\n      : (params: any) => params\n  const attached = createEffect(config, injected)\n  const {runner} = getGraph(attached).scope\n\n  let runnerSteps\n  const runnerFn = (\n    {params, req}: any,\n    {finally: anyway, effect}: any,\n    stack: any,\n  ) => {\n    const rj = onSettled({\n      params,\n      req,\n      ok: false,\n      anyway,\n      stack,\n    })\n    let computedParams\n    try {\n      computedParams = mapParams(params, stack.a)\n    } catch (err) {\n      return rj(err)\n    }\n    launch({\n      target: effect,\n      params: {\n        params: computedParams,\n        req: {\n          rs: onSettled({\n            params,\n            req,\n            ok: true,\n            anyway,\n            stack,\n          }),\n          rj,\n        },\n      },\n      page: stack.page,\n      defer: true,\n    })\n  }\n  if (source) {\n    let state\n    if (is.store(source)) state = source\n    else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    const readStateRef = step.mov({\n      from: STORE,\n      store: getStoreState(state),\n      to: REG_A,\n    })\n    runnerSteps = [\n      /* let another side-effects run first */\n      step.run({fn: _ => _}),\n      /* read state. assumed it already stable here because of previous step */\n      readStateRef,\n      /* no need for step.run because of first step */\n      step.compute({fn: runnerFn}),\n    ]\n    addToReg(readStateRef, runner.reg)\n  } else {\n    runnerSteps = [step.run({fn: runnerFn})]\n  }\n  runner.scope.effect = effect\n  runner.meta.onCopy.push(EFFECT)\n  runner.seq.splice(0, 1, ...runnerSteps)\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import {observableSymbol} from './observable'\nimport {Event} from './unit.h'\nimport {clearNode} from './clearNode'\nimport {createEvent} from './createUnit'\nimport {bind2} from './bind'\nimport {assertObject} from './is'\nimport {throwError} from './throw'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  if (!observableItem.subscribe)\n    throwError('expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = bind2(clearNode, event, undefined)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {processArgsToConfig} from './config'\nimport {createLinkNode} from './forward'\nimport {sample} from './sample'\nimport {createEvent} from './createUnit'\nimport {combine} from './combine'\nimport {step} from './typedef'\nimport {callStack} from './caller'\nimport {is, isFunction} from './is'\nimport {createNode} from './createNode'\nimport {addToRegion} from './region'\nimport {throwError} from './throw'\n\nexport function guard(...args: any[]) {\n  const meta: Record<string, any> = {op: 'guard'}\n  let rawName = 'guard'\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (metadata) {\n    meta.config = metadata\n    if (metadata.name) rawName = metadata.name\n  }\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  const {filter, greedy, name = rawName} = config\n  const target = config.target || createEvent(name, meta.config)\n  if (!is.unit(source)) source = combine(source)\n\n  if (is.unit(filter)) {\n    sample({\n      source: filter,\n      clock: source,\n      target: addToRegion(\n        createNode({\n          node: [\n            step.filter({\n              fn: ({guard}) => guard,\n            }),\n            step.compute({\n              fn: ({data}) => data,\n            }),\n          ],\n          child: target,\n          meta,\n          family: {\n            owners: [source, filter, target],\n            links: target,\n          },\n        }),\n      ),\n      fn: (guard: any, data: any) => ({guard, data}),\n      greedy,\n      name,\n    })\n  } else {\n    if (!isFunction(filter)) throwError('`filter` should be function or unit')\n    createLinkNode(source, target, {\n      scope: {fn: filter},\n      node: [step.filter({fn: callStack})],\n      meta,\n    })\n  }\n  return target\n}\n","import {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {forward} from './forward'\nimport {unitObjectName} from './naming'\n\nexport function merge<T>(\n  events: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  const result = createEvent(config || unitObjectName(events, 'merge'))\n  forward({\n    from: events,\n    to: result,\n    meta: {op: 'merge'},\n  })\n  return result\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\n\nexport function restore(obj: any, defaultState: any, config?: any): any {\n  if (is.store(obj)) {\n    return obj\n  }\n  if (is.unit(obj)) {\n    const domain = getParent(obj)\n    let result\n    if (is.event(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        ɔ: config,\n      }).on(obj, (_, v) => v)\n    }\n    if (is.effect(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        ɔ: config,\n      }).on(obj.done, (_: any, {result}: any) => result)\n    }\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(obj, (value, key) => {\n    result[key] = is.store(value) ? value : createStore(value, {name: key})\n  })\n  return result\n}\n","import {Event} from './unit.h'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {forward} from './forward'\nimport {processArgsToConfig} from './config'\n\nexport function split(...args: any[]): any {\n  let cases: any\n  let [[unit, match], metadata] = processArgsToConfig(args)\n  const knownCases = !match\n  if (knownCases) {\n    cases = unit.cases\n    match = unit.match\n    unit = unit.source\n  }\n  const result = {} as Record<string, Event<any>>\n  let current: Event<any> = is.store(unit) ? unit.updates : unit\n  forIn(match, (fn, key) => {\n    //@ts-ignore\n    result[key] = current.filter({fn, config: metadata})\n    //@ts-ignore\n    current = current.filter({\n      fn: data => !fn(data),\n      config: metadata,\n    })\n  })\n  result.__ = current\n  if (knownCases) {\n    forIn(result, (event, key) => {\n      if (cases[key]) {\n        forward({\n          from: event,\n          to: cases[key],\n        })\n      }\n    })\n  } else return result\n}\n"],"names":["createNode","node","from","source","parent","to","target","child","scope","meta","family","familyRaw","type","sources","arrifyNodes","links","owners","seq","reg","i","length","item","push","addToReg","result","id","nextNodeID","next","getOwners","getLinks","unitObjectName","objOrArr","method","name","comma","key","unit","is","compositeName","fullName","toString","createName","path","composite","shortName","concat","forEach","list","fn","withRegion","cb","unitMeta","getGraph","regionStack","value","template","readTemplate","sidRoot","getParent","createEvent","nameOrConfig","maybeConfig","event","payload","args","currentPage","oldPage","page","setCurrentPage","create","callCreate","graphite","initUnit","forkPage","find","launch","watch","bind","watchUnit","map","config","isObject","mapped","mapName","createComputation","MAP","filter","createEventFiltration","step","callStack","filterMap","defined","prepend","contramapped","upward","applyParentHook","addToRegion","createStore","defaultState","props","onEvent","store","off","getSubscribers","set","createSubscription","updateStore","plainState","createStateRef","oldState","updates","createNamedEvent","after","plain","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","readRef","setState","state","nodeMap","params","defer","reset","units","on","events","Array","isArray","currentSubscription","get","delete","firstState","lastResult","storeState","undefined","innerStore","strict","linkNode","getStoreState","before","includes","loader","unshift","eventOrFn","subscription","of","isFunction","throwError","changed","STORE","isStrict","own","combine","handler","stores","onConfigNesting","injectedData","userConfig","structStoreShape","shapeReady","rawHandler","slice","obj","spreadArgs","storeCombination","createDefer","req","Promise","rs","rj","catch","err","createEffect","instance","defaultConfig","getType","onCopy","kind","use","anyway","finally","done","named","status","fail","error","doneData","failData","effectRunner","getHandler","getCurrent","stack","onResolve","onSettled","ok","onReject","then","op","fx","runner","data","upd","getForkPage","isWatch","savedFork","setForkPage","inFlight","x","pending","amount","sample","sid","greedy","clock","metadata","processArgsToConfig","isUpward","targetTemplate","nativeTemplate","sourceRef","createLinkNode","priority","callARegStack","closure","hasSource","sourceState","clockState","callStackAReg","createRefGraph","refsMap","items","Object","values","refGraph","cmd","normalizeValues","toposort","rawGraph","ignore","topologicalSortHelper","temp","neighbors","graph","n","visited","Set","reverse","size","processed","ignored","shift","removeItem","flatGraph","traverse","forEachRelatedNode","observableSymbol","Symbol","observable","effect","domain","message","Error","assertObject","idCount","nextUnitID","nextStepID","bind2","arg","hasRef","nextBarrierID","barrier","barrierID","mov","check","compute","run","update","current","a","getConfig","opts","getNestedConfig","ɔ","getValue","val","ownerUnit","owner","link","heap","merge","b","ret","isSameType","v","r","l","queue","ix","first","last","deleteMin","pushFirstHeapItem","pushHeap","idx","getPriority","bucket","t","barriers","isRoot","newForkPage","newPage","upsert","forkedPage","stop","skip","lastStartedState","mem","local","stepn","fullID","has","add","tryRun","exec","console","joinName","tag","rawConfig","injected","forIn","pos","indexOf","splice","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","clearNode","ownerSet","history","effects","domains","unsubscribe","readSidRoot","forward","forkedNode","normalizeConfig","part","loc","hookType","hooks","rawConfigA","rawConfigB","isDomain","unitId","thru","subscribe","observer","stateFirst","storeRef","ref","clone","stateNew","rawShape","isFresh","childRef","field","defaultShape","sidechain","createHook","trigger","acc","hook","start","ctx","reject","parentFork","forkInFlightCounter","defers","launchUnits","launchParams","mapParams","_","runnerSteps","attached","runnerFn","computedParams","readStateRef","setters","createDomain","onCreateEvent","onCreateEffect","onCreateStore","onCreateDomain","handlers","needToFill","forked","findClone","index","unitName","clones","refs","forkPageSetter","fxID","resolve","sidMap","forkOf","newRef","j","siblings","wrapped","wrapStore","cloneOf","cloneGraph","sourceList","sourceRefsMap","predefinedRefs","templateOwnedRefs","valuesSidList","getOwnPropertyNames","execRef","fillValues","handlerKeys","keys","observableItem","disposer","complete","rawName","guard","isScope","storeWatches","storeWatchesRefs","normalizedValues","fillResult","flatGraphUnits","collectWatches","savedStack","onlyChanges","currentComposite","cases","match","knownCases","__"],"mappings":"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"}