{"version":3,"file":"compat.js","sources":["effector/createNode.ts","effector/tag.ts","effector/naming.ts","effector/collection.ts","effector/region.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/sample.ts","effector/fork.ts","effector/kernel.ts","effector/observable.ts","effector/validate.ts","effector/throw.ts","effector/is.ts","effector/id.ts","effector/bind.ts","effector/step.ts","effector/stateRef.ts","effector/caller.ts","effector/getter.ts","effector/own.ts","effector/config.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts","effector/createDomain.ts","effector/attach.ts","effector/createApi.ts","effector/fromObservable.ts","effector/guard.ts","effector/merge.ts","effector/restore.ts","effector/split.ts"],"sourcesContent":["import {Graph, Graphite, Cmd, StateRef} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK, STORE} from './tag'\n\nconst arrifyNodes = (list: Graphite | Graphite[] = []): Graph[] => {\n  const result = []\n  if (Array.isArray(list)) {\n    for (let i = 0; i < list.length; i++) {\n      if (Array.isArray(list[i])) result.push(...(list[i] as any))\n      else result.push(list[i])\n    }\n  } else {\n    result.push(list)\n  }\n  return result.map(getGraph)\n}\nexport const addToReg = (\n  {hasRef, type, data}: any,\n  reg: Record<string, StateRef>,\n) => {\n  let store\n  if (hasRef) {\n    store = data.store\n    reg[store.id] = store\n  }\n  if (type === 'mov' && data.to === STORE) {\n    store = data.target\n    reg[store.id] = store\n  }\n}\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: Graphite | Graphite[]\n  source?: Graphite | Graphite[]\n  parent?: Graphite | Graphite[]\n  to?: Graphite | Graphite[]\n  target?: Graphite | Graphite[]\n  child?: Graphite | Graphite[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: Graphite | Graphite[]\n    owners?: Graphite | Graphite[]\n  }\n} = {}): Graph {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  const reg: {[id: string]: StateRef} = {}\n  for (let i = 0; i < node.length; i++) {\n    const item = node[i]\n    if (!item) continue\n    seq.push(item)\n    addToReg(item, reg)\n  }\n  const result: Graph = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n    reg,\n  }\n  for (let i = 0; i < links.length; i++) {\n    getOwners(links[i]).push(result)\n  }\n  for (let i = 0; i < owners.length; i++) {\n    getLinks(owners[i]).push(result)\n  }\n  for (let i = 0; i < sources.length; i++) {\n    sources[i].next.push(result)\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const FORK_COUNTER = 'forkInFlightCounter'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import {Store, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent} from './getter'\n\nexport const joinName = (unit: any, tag: string) => '' + unit.shortName + tag\n\nexport const mapName = (unit: any, name?: string) =>\n  name == null ? joinName(unit, ' → *') : name\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  //@ts-ignore\n  for (const key in objOrArr) {\n    //@ts-ignore\n    const unit = objOrArr[key]\n    if (unit != null) {\n      name += comma\n      //@ts-ignore\n      name += is.unit(unit) ? unit.compositeName.fullName : unit.toString()\n    }\n    i += 1\n    /* inlined max object names constant */\n    if (i === 25) break\n    comma = ', '\n  }\n  name += ')'\n  return name\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  const compositeName = createName(rawName, getParent(store))\n  store.shortName = rawName\n  if (!store.compositeName) {\n    store.compositeName = compositeName\n    return\n  }\n  const currentComposite = store.compositeName\n  currentComposite.path = compositeName.path\n  currentComposite.shortName = compositeName.shortName\n  currentComposite.fullName = compositeName.fullName\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  let composite\n  const shortName = name\n  if (!parent) {\n    if (name.length === 0) {\n      path = []\n    } else {\n      path = [name]\n    }\n    fullName = name\n  } else {\n    composite = parent.compositeName\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      if (composite.fullName.length === 0) {\n        fullName = name\n      } else {\n        fullName = '' + composite.fullName + '/' + name\n      }\n    }\n  }\n  return {shortName, fullName, path}\n}\n","export const forIn = (obj: any, cb: (value: any, key: string) => void) => {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = (list: any[], item: any) => list.includes(item)\n\nexport const removeItem = (list: any[], item: any) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","import {getValue, getGraph, getParent} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: any\n  sidRoot?: string\n}\n\nexport const addToRegion = (unit: any) => {\n  if (regionStack) own(getValue(regionStack), [unit])\n  return unit\n}\n\nlet regionStack: RegionStack | null = null\n\nexport const readTemplate = () => regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}ɔ${sid}`\n  return sid\n}\n\nexport function withRegion(unit: any, cb: () => void) {\n  const unitMeta = getGraph(unit).meta\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: unitMeta.template || readTemplate(),\n    sidRoot: unitMeta.sidRoot || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {\n      sidRoot: readSidRoot(sid),\n      name,\n      loc,\n      method,\n    },\n  })\n  return withRegion(sidNode, fn)\n}\n","import {observableSymbol} from './observable'\n\nimport {is, isObject, isFunction, assertObject} from './is'\nimport {Store, Event} from './unit.h'\n\nimport {step} from './typedef'\nimport {createStateRef, readRef} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {bind} from './bind'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, currentPage, forkPage, setCurrentPage} from './kernel'\n\nimport {Subscriber, Config} from './index.h'\nimport {createName, mapName, joinName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {addToRegion, readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getConfig,\n  getNestedConfig,\n  getStoreState,\n  getGraph,\n  getParent,\n} from './getter'\nimport {includes} from './collection'\nimport {throwError} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, REG_A} from './tag'\n\nconst normalizeConfig = (part: any, config: any) => {\n  if (isObject(part)) {\n    normalizeConfig(getConfig(part), config)\n    if (part.name != null) {\n      if (isObject(part.name)) normalizeConfig(part.name, config)\n      else if (isFunction(part.name)) config.handler = part.name\n      else config.name = part.name\n    }\n    if (part.loc) config.loc = part.loc\n    if (part.sid || part.sid === null) config.sid = part.sid\n    if (part.handler) config.handler = part.handler\n    if (getParent(part)) config.parent = getParent(part)\n    if ('strict' in part) config.strict = part.strict\n    if (part.named) config.named = part.named\n    normalizeConfig(getNestedConfig(part), config)\n  }\n  return config\n}\n\nexport const applyParentHook = (\n  source: any,\n  target: any,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nlet isStrict: boolean\nexport const initUnit = (\n  kind: any,\n  unit: any,\n  rawConfigA: any,\n  rawConfigB?: any,\n) => {\n  const config = normalizeConfig(\n    {\n      name: rawConfigB,\n      config: rawConfigA,\n    },\n    {},\n  )\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  let {parent = null, sid = null, strict = true, named = null} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n\n  const meta: Record<string, any> = {\n    unit: unit.kind = kind,\n    name: unit.shortName = name,\n    sid: unit.sid = readSidRoot(sid),\n    named,\n    unitId: unit.id = id,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => fn(unit)\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => {\n              if (observer.next) {\n                observer.next(upd)\n              }\n            },\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  isStrict = strict\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst createComputation = (from: any, to: any, op: any, fn: Function) =>\n  createLinkNode(from, to, {\n    scope: {fn},\n    node: [step.compute({fn: callStack})],\n    meta: {op},\n  })\n\nconst createEventFiltration = (event: any, op: string, fn: any, node: any) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = fn.fn\n  }\n  const mapped = createEvent(joinName(event, ' →? *'), config)\n  createLinkNode(event, mapped, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n  return mapped\n}\n\nfunction callCreate(unit: any, template: any, payload: any, args: any[]): any {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const event: any = (payload: Payload, ...args: any[]) => {\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }\n  event.graphite = createNode({\n    meta: initUnit(EVENT, event, maybeConfig, nameOrConfig),\n  })\n  //eslint-disable-next-line no-unused-vars\n  event.create = (payload: any, _: any) => {\n    const target = forkPage ? forkPage.find(event) : event\n    launch(target, payload)\n    return payload\n  }\n  event.watch = bind(watchUnit, event)\n  event.map = (fn: any) => {\n    let config\n    let name\n    if (isObject(fn)) {\n      config = fn\n      name = fn.name\n      fn = fn.fn\n    }\n    const mapped = createEvent(mapName(event, name), config)\n    createComputation(event, mapped, MAP, fn)\n    return mapped\n  }\n  event.filter = (fn: any) =>\n    createEventFiltration(event, FILTER, fn.fn ? fn : fn.fn, [\n      step.filter({fn: callStack}),\n    ])\n  event.filterMap = (fn: any) =>\n    createEventFiltration(event, 'filterMap', fn, [\n      step.compute({fn: callStack}),\n      step.check.defined(),\n    ])\n  event.prepend = (fn: any) => {\n    const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n      parent: getParent(event),\n    })\n    const template = readTemplate()\n    if (template) {\n      getGraph(contramapped).seq.push(template.upward)\n    }\n    createComputation(contramapped, event, 'prepend', fn)\n    applyParentHook(event, contramapped)\n    return contramapped\n  }\n  const template = readTemplate()\n  return addToRegion(event)\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const plainState = createStateRef(defaultState)\n  const oldState = createStateRef(defaultState)\n  const updates = createNamedEvent('updates')\n  const template = readTemplate()\n  plainState.after = [{type: 'copy', to: oldState}]\n  if (template) {\n    template.plain.push(plainState, oldState)\n  }\n  const plainStateId = plainState.id\n  const store: any = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage && forkPage.reg[plainStateId]) {\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState(state: any) {\n      let target\n      if (forkPage) {\n        target = forkPage.nodeMap[getGraph(store).id]\n      }\n      if (!target) target = store\n      launch({\n        target,\n        params: state,\n        defer: true,\n      })\n    },\n    reset(...units: any[]) {\n      for (const unit of units) store.on(unit, () => store.defaultState)\n      return store\n    },\n    on(events: any, fn: Function) {\n      if (Array.isArray(events)) {\n        for (const event of events) {\n          onEvent(event, fn)\n        }\n      } else {\n        onEvent(events, fn)\n      }\n      return store\n    },\n    off(unit: any) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: any, firstState?: any) {\n      let config\n      let name\n      if (isObject(fn)) {\n        config = fn\n        name = fn.name\n        firstState = fn.firstState\n        fn = fn.fn\n      }\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (storeState !== undefined) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: mapName(store, name),\n        config,\n        strict: false,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, false, fn)\n\n      getStoreState(innerStore).before = [\n        {\n          type: MAP,\n          fn,\n          from: plainState,\n        },\n      ]\n      if (template) {\n        if (!includes(template.plain, plainState)) {\n          if (!includes(linkNode.seq, template.loader)) {\n            linkNode.seq.unshift(template.loader)\n          }\n        }\n      }\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        const template = readTemplate()\n        if (template) {\n          template.watch.push({\n            of: plainState,\n            fn: eventOrFn,\n          })\n        } else {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      if (!isFunction(fn)) throwError('second argument should be a function')\n      return eventOrFn.watch((payload: any) => fn(store.getState(), payload))\n    },\n  }\n  function onEvent(event: any, fn: Function) {\n    store.off(event)\n    getSubscribers(store).set(\n      event,\n      createSubscription(updateStore(event, store, 'on', true, fn)),\n    )\n  }\n  store.graphite = createNode({\n    scope: {state: plainState},\n    node: [\n      step.check.defined(),\n      step.update({\n        store: plainState,\n      }),\n      step.check.changed({\n        store: oldState,\n      }),\n      step.update({\n        store: oldState,\n      }),\n    ],\n    child: updates,\n    meta: initUnit(STORE, store, props),\n  })\n  if (isStrict && defaultState === undefined)\n    throwError(\"current state can't be undefined, use null instead\")\n  own(store, [updates])\n  return addToRegion(store)\n}\n\nconst updateStore = (\n  from: any,\n  store: Store<any>,\n  op: string,\n  stateFirst: boolean,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const node = [\n    step.mov({store: storeRef, to: REG_A}),\n    step.compute({\n      fn: stateFirst ? callARegStack : callStackAReg,\n    }),\n    step.check.defined(),\n    step.check.changed({store: storeRef}),\n    step.update({store: storeRef}),\n  ]\n  const template = readTemplate()\n  if (template) {\n    node.unshift(template.loader)\n    node.push(template.upward)\n    if (is.store(from)) {\n      const ref = getStoreState(from)\n      if (!includes(template.plain, ref)) {\n        //if (!includes(node, template.loader)) {\n        //  node.unshift(template.loader)\n        //}\n        if (!includes(template.closure, ref)) {\n          template.closure.push(ref)\n        }\n        if (!storeRef.before) storeRef.before = []\n        storeRef.before.push({\n          type: 'closure',\n          of: ref,\n        })\n      }\n    } else {\n      //if (!includes(node, template.loader)) {\n      //  node.unshift(template.loader)\n      //}\n    }\n  }\n  return createLinkNode(from, store, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n}\n","import {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef} from './stateRef'\nimport {step} from './typedef'\nimport {onConfigNesting} from './config'\nimport {getStoreState} from './getter'\nimport {is, isFunction, isObject} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {throwError} from './throw'\nimport {readTemplate} from './region'\nimport {forIn, includes} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  onConfigNesting(args[0], (injectedData, userConfig) => {\n    config = injectedData\n    args = userConfig\n  })\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      handler = spreadArgs(handler)\n    }\n  }\n  if (!isObject(structStoreShape)) throwError('shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst spreadArgs = (fn: Function) => (list: any[]) => fn(...list)\n\nconst storeCombination = (\n  isArray: boolean,\n  obj: any,\n  config?: string,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => list.slice() : (obj: any) => ({...obj})\n  const defaultState: any = isArray ? [] : {}\n  const template = readTemplate()\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  if (template) {\n    template.plain.push(rawShape, isFresh)\n  }\n  const store = createStore(stateNew, {\n    name: config ? config : unitObjectName(obj),\n  })\n  const node = [\n    step.check.defined(),\n    step.mov({\n      store: rawShape,\n      to: REG_A,\n    }),\n    //prettier-ignore\n    step.filter({\n      fn: (upd, {key}, {a}) => upd !== a[key],\n    }),\n    step.mov({\n      store: isFresh,\n      to: 'b',\n    }),\n    step.compute({\n      fn(upd, {clone, key}, reg) {\n        if (reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n      },\n    }),\n    step.mov({\n      from: REG_A,\n      target: rawShape,\n    }),\n    step.mov({\n      from: VALUE,\n      store: false,\n      target: isFresh,\n    }),\n    step.barrier({priority: BARRIER}),\n    step.mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n    }),\n    step.mov({store: rawShape}),\n    fn && step.compute({fn}),\n    step.check.changed({\n      store: getStoreState(store),\n    }),\n  ]\n  const before: any[] = (rawShape.before = [])\n  forIn(obj, (child, key) => {\n    if (!is.store(child)) {\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, {\n      scope: {key, clone},\n      node,\n      meta: {op: 'combine'},\n    })\n    const childRef = getStoreState(child)\n    before.push({\n      type: 'field',\n      field: key,\n      from: childRef,\n    })\n    if (template) {\n      if (!includes(template.plain, childRef)) {\n        linkNode.seq.unshift(template.loader)\n      }\n    }\n  })\n\n  store.defaultShape = obj\n  rawShape.after = [\n    fn\n      ? {\n          type: MAP,\n          to: getStoreState(store),\n          fn,\n        }\n      : {\n          type: 'copy',\n          to: getStoreState(store),\n        },\n  ]\n  if (!template) {\n    store.defaultState = fn\n      ? (getStoreState(store).current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n","export function createDefer(): {\n  rs: (value: any) => any\n  rj: (value: any) => any\n  req: Promise<any>\n} {\n  const result = {} as {\n    rs: (value: any) => any\n    rj: (value: any) => any\n    req: Promise<any>\n  }\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","import {step} from './typedef'\nimport {getForkPage, getGraph, getParent} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch} from './kernel'\nimport {createNamedEvent, createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {throwError} from './throw'\nimport {EFFECT} from './tag'\n\nexport function createEffect<Payload, Done>(\n  nameOrConfig: any,\n  maybeConfig: any,\n) {\n  const instance: any = createEvent(nameOrConfig, maybeConfig)\n  let handler =\n    instance.defaultConfig.handler ||\n    (() => throwError(`no handler used in ${instance.getType()}`))\n  const node = getGraph(instance)\n  node.meta.onCopy = ['runner']\n  node.meta.unit = instance.kind = EFFECT\n  instance.use = (fn: Function) => {\n    if (!isFunction(fn)) throwError('.use argument should be a function')\n    handler = fn\n    return instance\n  }\n  const anyway = (instance.finally = createNamedEvent('finally'))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({status, params, result}: any) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({status, params, error}: any) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: any) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: any) => error,\n  }))\n\n  const effectRunner = createNode({\n    scope: {\n      getHandler: instance.use.getCurrent = () => handler,\n      finally: anyway,\n    },\n    node: [\n      step.run({\n        fn({params, req}, {finally: anyway, getHandler}, stack) {\n          const onResolve = onSettled({\n            params,\n            req,\n            ok: true,\n            anyway,\n            stack,\n          })\n          const onReject = onSettled({\n            params,\n            req,\n            ok: false,\n            anyway,\n            stack,\n          })\n          let result\n          try {\n            result = getHandler()(params)\n          } catch (err) {\n            return void onReject(err)\n          }\n          if (isObject(result) && isFunction(result.then)) {\n            result.then(onResolve, onReject)\n          } else {\n            onResolve(result)\n          }\n        },\n      }),\n    ],\n    meta: {\n      op: 'fx',\n      fx: 'runner',\n      onCopy: ['finally'],\n    },\n  })\n  node.scope.runner = effectRunner\n  node.seq.push(\n    step.compute({\n      fn(params, scope, stack) {\n        // empty stack means that this node was launched directly\n        if (!getParent(stack)) return params\n        return {\n          params,\n          req: {\n            rs(data: any) {},\n            rj(data: any) {},\n          },\n        }\n      },\n    }),\n    step.run({\n      fn(upd, {runner}, stack) {\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          forkPage: getForkPage(stack),\n        })\n        return upd.params\n      },\n    }),\n  )\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req.finally(() => {\n          setForkPage(savedFork)\n        })\n      }\n      launch(forkPage.find(instance), payload)\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {named: 'inFlight'})\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1))\n\n  const pending = (instance.pending = inFlight.map({\n    //@ts-ignore\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [\n    anyway,\n    done,\n    fail,\n    doneData,\n    failData,\n    pending,\n    inFlight,\n    effectRunner,\n  ])\n  return instance\n}\n\nexport const onSettled = ({\n  params,\n  req,\n  ok,\n  anyway,\n  stack,\n}: {\n  params: any\n  req: {\n    rs(_: any): any\n    rj(_: any): any\n  }\n  ok: boolean\n  anyway: any\n  stack: any\n}) => (data: any) =>\n  launch({\n    target: [anyway, sidechain],\n    params: [\n      ok\n        ? {\n            status: 'done',\n            params,\n            result: data,\n          }\n        : {\n            status: 'fail',\n            params,\n            error: data,\n          },\n      {\n        fn: ok ? req.rs : req.rj,\n        value: data,\n      },\n    ],\n    defer: true,\n    page: stack.page,\n    forkPage: getForkPage(stack),\n  })\n\nconst sidechain = createNode({\n  node: [\n    step.run({\n      fn({fn, value}) {\n        fn(value)\n      },\n    }),\n  ],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import {combine} from './combine'\nimport {step} from './typedef'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg, callARegStack} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {createNode} from './createNode'\nimport {addToRegion, readTemplate} from './region'\nimport {throwError} from './throw'\nimport {includes} from './collection'\nimport {REG_A, SAMPLE, SAMPLER, STACK, STORE, VALUE} from './tag'\n\nexport function sample(...args: any): any {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let greedy\n  //config case\n  if (clock === undefined && 'source' in source) {\n    if ('clock' in source && source.clock == null)\n      throwError('config.clock should be defined')\n    clock = source.clock\n    fn = source.fn\n    greedy = source.greedy\n    //optional target & name accepted only from config\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (clock === undefined) {\n    //still undefined!\n    clock = source\n  }\n  name = metadata || name || source.shortName\n  const template = readTemplate()\n  const isUpward = !!target\n  if (!target) {\n    if (is.store(source) && is.store(clock)) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name, sid})\n    } else {\n      target = createEvent(name)\n      if (template) {\n        getGraph(target).seq.push(template.loader)\n      }\n    }\n  }\n  const targetTemplate =\n    isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  if (is.store(source)) {\n    const sourceRef = getStoreState(source)\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {fn, targetTemplate},\n        node: [\n          template && template.loader,\n          //@ts-ignore\n          !greedy && step.barrier({priority: SAMPLER}),\n          step.mov({\n            store: sourceRef,\n            to: fn ? REG_A : STACK,\n          }),\n          fn && step.compute({fn: callARegStack}),\n          template && isUpward && template.upward,\n        ],\n        meta: {op: SAMPLE, sample: STORE},\n      }),\n    ])\n    if (template) {\n      if (\n        !includes(template.plain, sourceRef) &&\n        !includes(template.closure, sourceRef)\n      ) {\n        template.closure.push(sourceRef)\n      }\n    }\n  } else {\n    const hasSource = createStateRef(false)\n    const sourceState = createStateRef()\n    const clockState = createStateRef()\n    if (template) {\n      template.plain.push(hasSource, sourceState, clockState)\n    }\n    addToRegion(\n      createNode({\n        parent: source,\n        node: [\n          step.update({store: sourceState}),\n          step.mov({\n            from: VALUE,\n            store: true,\n            target: hasSource,\n          }),\n        ],\n        family: {\n          owners: [source, target, clock],\n          links: target,\n        },\n        meta: {op: SAMPLE, sample: 'source'},\n      }),\n    )\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {\n          fn,\n          targetTemplate,\n        },\n        node: [\n          template && template.loader,\n          step.update({store: clockState}),\n          step.mov({store: hasSource}),\n          step.filter({fn: hasSource => hasSource}),\n          //@ts-ignore\n          !greedy && step.barrier({priority: SAMPLER}),\n          step.mov({store: sourceState}),\n          step.mov({\n            store: clockState,\n            to: REG_A,\n          }),\n          fn && step.compute({fn: callStackAReg}),\n          template && isUpward && template.upward,\n        ],\n        meta: {op: SAMPLE, sample: 'clock'},\n      }),\n    ])\n  }\n  return target\n}\n","import {getForkPage, getGraph, getLinks, getOwners} from './getter'\nimport {bind} from './bind'\nimport {createDefer} from './defer'\nimport {watchUnit} from './watch'\nimport {is, isObject} from './is'\nimport {throwError} from './throw'\nimport {launch, forkPage, setForkPage} from './kernel'\nimport {createNode} from './createNode'\nimport {step} from './typedef'\nimport {Domain, Store} from './unit.h'\nimport {Graph, StateRef} from './index.h'\nimport {removeItem, forEach, includes, forIn} from './collection'\nimport {DOMAIN, STORE, EVENT, EFFECT, SAMPLER, MAP, FORK_COUNTER} from './tag'\n\n/**\nhydrate state on client\n\nconst root = createDomain()\nhydrate(root, {\n  values: window.__initialState__\n})\n\n*/\nexport function hydrate(domain: Domain, {values}: {values: any}) {\n  const isScope = isObject(domain) && (domain as any).cloneOf\n  if (!is.domain(domain) && !isScope) {\n    throwError('first argument of hydrate should be domain or scope')\n  }\n  if (!isObject(values)) {\n    throwError('values property should be an object')\n  }\n  const normalizedValues = normalizeValues(values)\n  let storeWatches: Graph[]\n  let storeWatchesRefs: any[]\n  if (isScope) {\n    storeWatches = []\n    storeWatchesRefs = []\n    forIn(normalizedValues, (val, sid) => {\n      //@ts-ignore\n      const node = domain.sidMap[sid]\n      if (node) {\n        storeWatches.push(node)\n        storeWatchesRefs.push(val)\n      }\n    })\n  } else {\n    const fillResult = fillValues({\n      flatGraphUnits: flatGraph(domain),\n      values: normalizedValues,\n      collectWatches: true,\n    })\n    storeWatches = fillResult.storeWatches\n    storeWatchesRefs = fillResult.storeWatchesRefs.map(({current}) => current)\n  }\n\n  launch({\n    target: storeWatches,\n    params: storeWatchesRefs,\n    forkPage: isScope ? domain : false,\n  })\n}\n\nfunction fillValues({\n  flatGraphUnits,\n  values,\n  collectWatches,\n}: {\n  flatGraphUnits: Graph[]\n  values: Record<string, any>\n  collectWatches: boolean\n}) {\n  const storeWatches = []\n  const storeWatchesRefs = []\n  const refsMap = {} as Record<string, StateRef>\n  const predefinedRefs = new Set()\n  const valuesSidList = Object.getOwnPropertyNames(values)\n  for (const node of flatGraphUnits) {\n    const {reg} = node\n    const {op, unit, sid} = node.meta\n    if (unit === STORE) {\n      if (sid && includes(valuesSidList, sid)) {\n        const {state} = node.scope\n        state.current = values[sid]\n        predefinedRefs.add(state)\n      }\n    }\n    if (collectWatches && op === 'watch') {\n      const owner = node.family.owners[0]\n      if (owner.meta.unit === STORE) {\n        storeWatches.push(node)\n        storeWatchesRefs.push(owner.scope.state)\n      }\n    }\n    for (const id in reg) {\n      refsMap[id] = reg[id]\n    }\n  }\n  const refGraph = createRefGraph(refsMap)\n  const result = toposort(refGraph)\n  forEach(result, id => {\n    execRef(refsMap[id])\n  })\n\n  return {\n    storeWatches,\n    storeWatchesRefs,\n  }\n  function execRef(ref: StateRef) {\n    let isFresh = false\n    if (ref.before && !predefinedRefs.has(ref)) {\n      for (const cmd of ref.before) {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            ref.current = cmd.fn(from.current)\n            break\n          }\n          case 'field': {\n            const from = cmd.from\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            ref.current[cmd.field] = from.current\n            break\n          }\n          case 'closure':\n            break\n        }\n      }\n    }\n    if (!ref.after) return\n    const value = ref.current\n    for (const cmd of ref.after) {\n      const to = cmd.to\n      // if (predefinedRefs.has(to)) continue\n      switch (cmd.type) {\n        case 'copy':\n          to.current = value\n          break\n        case MAP:\n          to.current = cmd.fn(value)\n          break\n      }\n    }\n  }\n}\n\nfunction createRefGraph(refsMap: Record<string, StateRef>) {\n  const items = Object.values(refsMap)\n  const refGraph = {} as Record<string, string[]>\n  for (const {id} of items) {\n    refGraph[id] = []\n  }\n  //prettier-ignore\n  for (const {id, before, after} of items) {\n    before && forEach(before, cmd => {\n      refGraph[cmd.from.id].push(id)\n    })\n    after && forEach(after, cmd => {\n      refGraph[id].push(cmd.to.id)\n    })\n  }\n  return refGraph\n}\n\n/**\nserialize state on server\n*/\nexport function serialize(\n  {clones, getState, cloneOf}: any,\n  {\n    ignore = [],\n    onlyChanges,\n  }: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  const result = {} as Record<string, any>\n  if (onlyChanges) {\n    ignore = [...ignore]\n    for (const store of cloneOf.history.stores) {\n      if (getState(store) === store.defaultState) {\n        ignore.push(store)\n      }\n    }\n  }\n  for (const {meta, scope, reg} of clones) {\n    if (meta.unit !== STORE) continue\n    const {sid} = meta\n    if (!sid) continue\n    result[sid] = reg[scope.state.id].current\n  }\n  for (const {sid} of ignore) {\n    if (sid) delete result[sid]\n  }\n  return result\n}\n\n/** bind event to scope */\nexport function scopeBind(unit: any) {\n  if (!forkPage) {\n    throwError('scopeBind cannot be called outside of forked .watch')\n  }\n  const result = forkPage.find(unit)\n  const savedStack = forkPage\n  return (payload: any) => {\n    launch({\n      target: result,\n      params: payload,\n      forkPage: savedStack,\n    })\n  }\n}\n\nfunction normalizeValues(values: Map<Store<any>, any> | Record<string, any>) {\n  if (values instanceof Map) {\n    const result = {} as Record<string, any>\n    for (const [key, value] of values) {\n      if (!is.unit(key)) throwError('Map key should be a unit')\n      result[key.sid!] = value\n    }\n    return result\n  }\n  return values\n}\nexport function fork(\n  domain: Domain,\n  {values, handlers}: {values?: any; handlers?: any} = {},\n) {\n  if (!is.domain(domain)) throwError('first argument of fork should be domain')\n  const needToFill = !!values\n  values = normalizeValues(values || {})\n  const forked = cloneGraph(domain)\n  if (needToFill) {\n    fillValues()\n  }\n  if (handlers) {\n    handlers = normalizeValues(handlers)\n    const handlerKeys = Object.keys(handlers)\n    for (const {scope, meta} of forked.clones) {\n      if (meta.sid && includes(handlerKeys, meta.sid)) {\n        scope.runner.scope.getHandler = () => handlers[meta.sid]\n      }\n    }\n  }\n  return forked\n\n  function fillValues() {\n    const sourceList = flatGraph(domain)\n    const sourceRefsMap = {} as Record<string, StateRef>\n    const refsMap = {} as Record<string, StateRef>\n    const predefinedRefs = new Set()\n    const templateOwnedRefs = new Set<string>()\n    const valuesSidList = Object.getOwnPropertyNames(values)\n    for (const {reg, meta} of sourceList) {\n      const {nativeTemplate} = meta\n      for (const id in reg) {\n        sourceRefsMap[id] = reg[id]\n        if (nativeTemplate) {\n          templateOwnedRefs.add(id)\n        }\n      }\n    }\n    for (const node of forked.clones) {\n      const {reg} = node\n      const {unit, sid} = node.meta\n      if (unit === STORE) {\n        if (sid && includes(valuesSidList, sid)) {\n          const {state} = node.scope\n          reg[state.id].current = values[sid]\n          predefinedRefs.add(state)\n        }\n      }\n      for (const id in reg) {\n        refsMap[id] = reg[id]\n      }\n    }\n    const refGraph = createRefGraph(sourceRefsMap)\n    const result = toposort(refGraph, templateOwnedRefs)\n    forEach(result, id => {\n      execRef(refsMap[id], sourceRefsMap[id])\n    })\n\n    function execRef(ref: StateRef, sourceRef?: StateRef) {\n      let isFresh = false\n      if (sourceRef && sourceRef.before && !predefinedRefs.has(ref)) {\n        for (const cmd of sourceRef.before) {\n          switch (cmd.type) {\n            case MAP: {\n              const from = refsMap[cmd.from.id]\n              ref.current = cmd.fn(from.current)\n              break\n            }\n            case 'field': {\n              const from = refsMap[cmd.from.id]\n              if (!isFresh) {\n                isFresh = true\n                if (Array.isArray(ref.current)) {\n                  ref.current = [...ref.current]\n                } else {\n                  ref.current = {...ref.current}\n                }\n              }\n              ref.current[cmd.field] = from.current\n              break\n            }\n            case 'closure':\n              break\n          }\n        }\n      }\n      if (!sourceRef || !sourceRef.after) return\n      const value = ref.current\n      for (const cmd of sourceRef.after) {\n        const to = refsMap[cmd.to.id]\n        // if (predefinedRefs.has(to)) continue\n        switch (cmd.type) {\n          case 'copy':\n            to.current = value\n            break\n          case MAP:\n            to.current = cmd.fn(value)\n            break\n        }\n      }\n    }\n  }\n}\nfunction toposort(rawGraph: Record<string, string[]>, ignore?: Set<string>) {\n  const graph = {} as Record<string, string[]>\n  for (const id in rawGraph) {\n    graph[id] = [...new Set(rawGraph[id])]\n  }\n  const result = [] as string[]\n  const visited = {} as Record<string, boolean>\n  const temp = {} as Record<string, boolean>\n  for (const node in graph) {\n    if (!visited[node] && !temp[node]) {\n      topologicalSortHelper(node)\n    }\n  }\n  result.reverse()\n  if (ignore && ignore.size > 0) {\n    const processed = [] as string[]\n    const ignored = [...ignore]\n    let item: string | void\n    while ((item = ignored.shift())) {\n      processed.push(item)\n      forEach(graph[item], child => {\n        if (includes(processed, child) || includes(ignored, child)) return\n        ignored.push(child)\n      })\n    }\n    forEach(processed, item => {\n      removeItem(result, item)\n    })\n  }\n  return result\n  function topologicalSortHelper(node: string) {\n    temp[node] = true\n    const neighbors = graph[node]\n    for (let i = 0; i < neighbors.length; i++) {\n      const n = neighbors[i]\n      if (temp[n]) {\n        continue\n        // throw Error('found cycle in DAG')\n      }\n      if (!visited[n]) {\n        topologicalSortHelper(n)\n      }\n    }\n    temp[node] = false\n    visited[node] = true\n    result.push(node)\n  }\n}\nexport function allSettled(\n  start: any,\n  {scope, params: ctx}: {scope: any; params?: any},\n) {\n  if (!is.unit(start))\n    return Promise.reject(Error('first argument should be unit'))\n  const defer = createDefer()\n  //@ts-ignore\n  defer.parentFork = forkPage\n  const {forkInFlightCounter} = scope.graphite.scope\n  forkInFlightCounter.scope.defers.push(defer)\n  const contextStart = scope.find(start)\n\n  const launchUnits = [contextStart]\n  const launchParams = []\n  if (is.effect(start)) {\n    launchParams.push({\n      params: ctx,\n      req: {\n        rs(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'done', value}\n        },\n        rj(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'fail', value}\n        },\n      },\n    })\n  } else {\n    launchParams.push(ctx)\n  }\n  launchUnits.push(forkInFlightCounter)\n  launchParams.push(null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    forkPage: scope,\n  })\n  return defer.req\n}\nfunction flatGraph(unit: any) {\n  const list = [] as Graph[]\n  ;(function traverse(node) {\n    if (includes(list, node)) return\n    list.push(node)\n    forEachRelatedNode(node, traverse)\n  })(getGraph(unit))\n  return list\n}\n/**\neverything we need to clone graph section\nreachable from given unit\n*/\nfunction cloneGraph(unit: any) {\n  const list = flatGraph(unit)\n  const refs = new Map()\n  const scope = {\n    defers: [],\n    inFlight: 0,\n    fxID: 0,\n  }\n  const forkPageSetter = step.compute({\n    fn(data, _, stack) {\n      setForkPage(getForkPage(stack))\n      return data\n    },\n  })\n  const forkInFlightCounter = createNode({\n    scope,\n    node: [\n      step.compute({\n        fn(_, scope, stack) {\n          if (!stack.parent) {\n            scope.fxID += 1\n            return\n          }\n          if (stack.parent.node.meta.named === 'finally') {\n            scope.inFlight -= 1\n          } else {\n            scope.inFlight += 1\n            scope.fxID += 1\n          }\n        },\n      }),\n      step.barrier({priority: SAMPLER}),\n      step.run({\n        fn(_, scope) {\n          const {inFlight, defers, fxID} = scope\n          if (inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), (defer: any) => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n      }),\n    ],\n    meta: {unit: FORK_COUNTER},\n  })\n  const nodeMap = {} as Record<string, Graph>\n  const sidMap = {} as Record<string, Graph>\n  const clones = list.map(node => {\n    const {seq, next, meta, scope} = node\n    const result = createNode({\n      node: seq.map(step => ({\n        id: step.id,\n        type: step.type,\n        data: {...step.data},\n        hasRef: step.hasRef,\n      })) as any,\n      child: [...next],\n      meta: {forkOf: node, ...meta},\n      scope: {...scope},\n    })\n    result.family = {\n      type: node.family.type,\n      links: [...getLinks(node)],\n      owners: [...getOwners(node)],\n    }\n    nodeMap[node.id] = result\n    if (meta.sid) sidMap[meta.sid] = result\n    return result\n  })\n  const page = {} as Record<string, StateRef>\n  forEach(clones, node => {\n    const {\n      reg,\n      scope,\n      meta: {onCopy, op, unit},\n    } = node\n    for (const id in reg) {\n      const ref = reg[id]\n      let newRef = refs.get(ref)\n      if (!newRef) {\n        newRef = {\n          id: ref.id,\n          current: ref.current, //ref.id in values ? values[ref.id] : ref.current,\n        }\n        refs.set(ref, newRef)\n      }\n      page[id] = reg[id] = newRef\n    }\n    if (onCopy) {\n      for (let j = 0; j < onCopy.length; j++) {\n        scope[onCopy[j]] = findClone(scope[onCopy[j]])\n      }\n    }\n    forEachRelatedNode(node, (node, i, siblings) => {\n      siblings[i] = findClone(node)\n    })\n    const itemTag = op || unit\n    switch (itemTag) {\n      case STORE:\n        node.meta.wrapped = wrapStore(node)\n        break\n      case EVENT:\n        node.seq.unshift(forkPageSetter)\n        break\n      case EFFECT:\n        node.next.push(forkInFlightCounter)\n        node.seq.unshift(forkPageSetter)\n        break\n      case 'fx': {\n        scope.finally.next.push(forkInFlightCounter)\n        node.seq.unshift(forkPageSetter)\n        break\n      }\n      case 'watch':\n        node.seq.unshift(forkPageSetter)\n        break\n    }\n  })\n\n  return {\n    cloneOf: unit,\n    nodeMap,\n    sidMap,\n    clones,\n    find: findClone,\n    reg: page,\n    getState: (store: any) => findClone(store).meta.wrapped.getState(),\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, ...clones],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n  }\n  function findClone(unit: any) {\n    const node = getGraph(unit)\n    const index = list.indexOf(node)\n    if (index === -1) {\n      let unitName = 'unit'\n      if (unit !== node && unit.id !== unit.shortName) unitName = unit.shortName\n      throwError(`${unitName} not found in forked scope`)\n    }\n    return clones[index]\n  }\n}\n\nfunction wrapStore(node: Graph) {\n  return {\n    kind: STORE,\n    getState: () => node.reg[node.scope.state.id].current,\n    updates: {\n      watch: bind(watchUnit, node),\n    },\n    graphite: node,\n    family: node.family,\n  }\n}\nfunction forEachRelatedNode(\n  node: Graph,\n  cb: (node: Graph, index: number, siblings: Graph[]) => void,\n) {\n  const unit = node.meta.unit\n  if (unit === 'fork' || unit === FORK_COUNTER) return\n  forEach(node.next, cb)\n  forEach(getOwners(node), cb)\n  forEach(getLinks(node), cb)\n}\n","import {Graph} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getValue} from './getter'\nimport {\n  STORE,\n  EFFECT,\n  SAMPLER,\n  STACK,\n  BARRIER,\n  VALUE,\n  FILTER,\n  REG_A,\n} from './tag'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Graph\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Call stack */\ntype Stack = {\n  value: any\n  a: any\n  b: any\n  parent: Stack | null\n  node: Graph\n  page: {[id: string]: any} | null\n  forkPage?: any\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  const isSameType = a.v.type === b.v.type\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (isSameType && a.v.id > b.v.id) ||\n    /** if first node is \"sampler\" and second node is \"barrier\" */\n    (!isSameType && a.v.type === SAMPLER)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 5) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  queue.push({first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 5; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * second bucket is for \"barrier\" PriorityType (used in combine)\n       * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 2 || i === 3) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: {[id: string]: any} | null,\n  node: Graph,\n  parent: Stack | null,\n  value: any,\n  forkPage: any | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      forkPage,\n    },\n    type,\n  )\nconst pushHeap = (idx: number, stack: Stack, type: PriorityTag, id = 0) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    //@ts-ignore\n    l: 0,\n    //@ts-ignore\n    r: 0,\n  }\n  /**\n   * second bucket is for \"barrier\" PriorityType (used in combine)\n   * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 2 || priority === 3) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case BARRIER:\n      return 2\n    case SAMPLER:\n      return 3\n    case EFFECT:\n      return 4\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set()\n\nlet isRoot = true\nexport let isWatch = false\nexport let currentPage: any = null\nexport let forkPage: any\nexport const setForkPage = (newForkPage: any) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: any) => {\n  currentPage = newPage\n}\n\n/** main execution method */\nconst exec = () => {\n  const lastStartedState = {isRoot, currentPage, forkPage, isWatch}\n  isRoot = false\n  let stop\n  let skip\n  let graph\n  let value\n  let page\n  let reg\n  mem: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    graph = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    reg = (page ? page : graph).reg\n    const local: Local = {\n      fail: false,\n      scope: graph.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < graph.seq.length && !stop; stepn++) {\n      const step = graph.seq[stepn]\n      const data = step.data\n      switch (step.type) {\n        case BARRIER: {\n          let id = data.barrierID\n          if (page) {\n            id = `${page.fullID}_${id}`\n          }\n          const priority = data.priority\n          if (stepn !== idx || type !== priority) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, id)\n            }\n            continue mem\n          }\n          barriers.delete(id)\n          break\n        }\n        case 'mov': {\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (!reg[data.store.id]) {\n                // if (!page.parent) {\n                stack.page = page = null\n                reg = graph.reg\n                // }\n              }\n              value = readRef(reg[data.store.id])\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              reg[data.target.id].current = value\n              break\n          }\n          break\n        }\n        case 'check':\n          switch (data.type) {\n            case 'defined':\n              skip = getValue(stack) === undefined\n              break\n            case 'changed':\n              skip = getValue(stack) === readRef(reg[data.store.id])\n              break\n          }\n          break\n        case FILTER:\n          /**\n           * handled edge case: if step.fn will throw,\n           * tryRun will return null\n           * thereby forcing that branch to stop\n           */\n          skip = !tryRun(local, data, stack)\n          break\n        case 'run':\n          /** exec 'compute' step when stepn === idx */\n          if (stepn !== idx || type !== EFFECT) {\n            pushHeap(stepn, stack, EFFECT)\n            continue mem\n          }\n        case 'compute':\n          isWatch = graph.meta.op === 'watch'\n          stack.value = tryRun(local, data, stack)\n          isWatch = lastStartedState.isWatch\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      for (let stepn = 0; stepn < graph.next.length; stepn++) {\n        pushFirstHeapItem(\n          'child',\n          page,\n          graph.next[stepn],\n          stack,\n          getValue(stack),\n          getForkPage(stack),\n        )\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\nexport const launch = (unit: any, payload?: any, upsert?: boolean) => {\n  let page = currentPage\n  let stack = null\n  let forkedPage = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    page = 'page' in unit ? unit.page : page\n    if (unit[STACK]) stack = unit[STACK]\n    forkedPage = getForkPage(unit) || forkedPage\n    unit = unit.target\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        page,\n        getGraph(unit[i]),\n        stack,\n        payload[i],\n        forkedPage,\n      )\n    }\n  } else {\n    pushFirstHeapItem('pure', page, getGraph(unit), stack, payload, forkedPage)\n  }\n  if (upsert && !isRoot) return\n  exec()\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, {fn}: any, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","export const observableSymbol: any =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import {kind} from './index.h'\nimport {DOMAIN, STORE, EVENT, EFFECT} from './tag'\nimport {isObject, isFunction} from './is'\n\nexport const unit = (obj: any) =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: kind) => (obj: any) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE)\nexport const event = is(EVENT)\nexport const effect = is(EFFECT)\nexport const domain = is(DOMAIN)\n","export const throwError = (message: string) => {\n  throw Error(message)\n}\n","//eslint-disable-next-line\nexport * as is from './validate'\nimport {throwError} from './throw'\n\nexport const isObject = (value: any) =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: any) => typeof value === 'function'\n\nexport const assertObject = (value: any) => {\n  if (!isObject(value) && !isFunction(value))\n    throwError('expect first argument be an object') // or function\n}\n","const idCount = () => {\n  let id = 0\n  return () => (++id).toString(36)\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","export const bind = (fn: Function, target: any) => fn.bind(null, target)\nexport const bind2 = (fn: Function, target: any, arg: any) =>\n  fn.bind(null, target, arg)\n","import {StateRef, Run, Filter, Compute, Barrier, Check, Mov} from './index.h'\nimport {nextStepID} from './id'\nimport {bind2} from './bind'\nimport {BARRIER, FILTER, STACK, STORE} from './tag'\n\nconst cmd = (type: any, hasRef: boolean, data: any): any => ({\n  id: nextStepID(),\n  type,\n  data,\n  hasRef,\n})\n\nlet nextBarrierID = 0\n\nexport const barrier: (data: {priority?: 'barrier' | 'sampler'}) => Barrier = ({\n  priority = BARRIER,\n}) =>\n  cmd(BARRIER, false, {\n    barrierID: ++nextBarrierID,\n    priority,\n  })\nexport const mov: (data: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b'\n  store?: any\n  target?: any\n}) => Mov = ({from = STORE, store, target, to = target ? STORE : STACK}) =>\n  cmd('mov', from === STORE, {from, store, to, target})\nexport const check: {\n  defined(): Check\n  changed(config: {store: StateRef}): Check\n} = {\n  defined: () => cmd('check', false, {type: 'defined'}),\n  changed: ({store}) => cmd('check', true, {type: 'changed', store}),\n}\nexport const compute: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Compute = bind2(cmd, 'compute', false)\nexport const filter: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Filter = bind2(cmd, FILTER, false)\nexport const run: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Run = bind2(cmd, 'run', false)\nexport const update: (data: {store: StateRef}) => Mov = ({store}) =>\n  mov({from: STACK, target: store})\n","import {StateRef} from './index.h'\nimport {nextStepID} from './id'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n","export const callStackAReg = (stack: any, {fn}: any, {a}: any) => fn(stack, a)\nexport const callARegStack = (stack: any, {fn}: any, {a}: any) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: any, _: any) => fn(stack)\n","import {Graph} from './index.h'\n\nexport const getGraph = (graph: any): Graph => graph.graphite || graph\nexport const getOwners = (node: Graph) => node.family.owners\nexport const getLinks = (node: Graph) => node.family.links\nexport const getStoreState = (store: any) => store.stateRef\nexport const getConfig = (opts: any) => opts.config\nexport const getNestedConfig = (opts: any) => opts.ɔ\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: any) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any) => val.forkPage\n","import {Graphite} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\n\nexport const own = (ownerUnit: Graphite, links: Graphite[]) => {\n  const owner = getGraph(ownerUnit)\n  for (let i = 0; i < links.length; i++) {\n    const link = getGraph(links[i])\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    getOwners(link).push(owner)\n    getLinks(owner).push(link)\n  }\n}\n","import {getConfig, getNestedConfig} from './getter'\nimport {assertObject} from './is'\n\nexport const onConfigNesting = (\n  rawConfig: any,\n  fn: (babelData: any, userConfig: any) => void,\n) => {\n  assertObject(rawConfig)\n  if (getNestedConfig(rawConfig)) {\n    fn(getConfig(rawConfig), getNestedConfig(rawConfig))\n  }\n}\n\nexport const processArgsToConfig = (args: any[]): [any[], any | void] => {\n  let metadata\n  onConfigNesting(args[0], (injected, config) => {\n    metadata = injected\n    args = config\n  })\n  return [args, metadata]\n}\n","import {Graph, Graphite} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Graph, targetNode: Graph) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Graph,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-ignore\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && !targetNode.meta.sample) ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        currentNode.meta.op !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        currentNode.meta.op !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: any) => map.clear()\nexport const clearNode = (\n  graphite: Graphite,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-ignore\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    //@ts-ignore\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import {Subscription, Graphite} from './index.h'\nimport {bind2} from './bind'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: Graphite): Subscription => {\n  const result = bind2(clearNode, node, undefined)\n  result.unsubscribe = result\n  return result\n}\n","import {onConfigNesting} from './config'\nimport {createNode} from './createNode'\nimport {Subscription, Graphite, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {throwError} from './throw'\nimport {addToRegion} from './region'\n\nexport const createLinkNode = (\n  parent: Graphite,\n  child: Graphite,\n  {\n    node,\n    scope,\n    meta,\n  }: {\n    node?: Array<Cmd | false | void | null>\n    scope?: {[name: string]: any}\n    meta?: {[name: string]: any}\n  },\n) =>\n  addToRegion(\n    createNode({\n      node,\n      parent,\n      child,\n      scope,\n      meta,\n      family: {\n        owners: [parent, child],\n        links: child,\n      },\n    }),\n  )\nexport const forward = (opts: {\n  from: Graphite | Graphite[]\n  to: Graphite | Graphite[]\n  meta?: Record<string, any>\n}): Subscription => {\n  let config\n  onConfigNesting(opts, (injectedData, userConfig) => {\n    config = injectedData\n    opts = userConfig\n  })\n  const {from, to, meta = {op: 'forward'}} = opts\n  if (!from || !to) throwError('from and to fields should be defined')\n  if (config) meta.config = config\n  return createSubscription(\n    addToRegion(\n      createNode({\n        parent: from,\n        child: to,\n        meta,\n        family: {},\n      }),\n    ),\n  )\n}\n","import {step} from './typedef'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, Unit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {addToRegion} from './region'\nimport {throwError} from './throw'\nimport {isFunction} from './is'\nimport {forkPage} from './kernel'\nimport {getGraph} from './getter'\n\nexport const watchUnit = (\n  unit: Unit,\n  handler: (payload: any) => any,\n): Subscription => {\n  if (!isFunction(handler)) throwError('.watch argument should be a function')\n  if (forkPage) {\n    const forkedNode = forkPage.nodeMap[getGraph(unit).id]\n    if (forkedNode) unit = forkedNode\n  }\n  return createSubscription(\n    addToRegion(\n      createNode({\n        scope: {fn: handler},\n        node: [step.run({fn: callStack})],\n        parent: unit,\n        meta: {op: 'watch'},\n        family: {\n          owners: unit,\n        },\n      }),\n    ),\n  )\n}\n","import {Store, Event, Effect, Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {Config} from './index.h'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {forward} from './forward'\nimport {addToRegion} from './region'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {DOMAIN} from './tag'\n\nconst createHook = (trigger: Event<any>, acc: Set<any>, node: any) => {\n  trigger.watch(data => {\n    own(node, [data])\n    acc.add(data)\n    if (!data.ownerSet) data.ownerSet = acc\n    if (!getParent(data)) data.parent = node\n  })\n  own(node, [trigger])\n  return (hook: (data: any) => any) => {\n    acc.forEach(hook)\n    return trigger.watch(hook)\n  }\n}\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const domains: Set<Domain> = new Set()\n  const stores: Set<Store<any>> = new Set()\n  const effects: Set<Effect<any, any, any>> = new Set()\n  const events: Set<Event<any>> = new Set()\n\n  const node = createNode({\n    family: {type: DOMAIN},\n  })\n\n  const result: any = {\n    history: {\n      domains,\n      stores,\n      effects,\n      events,\n    },\n    graphite: node,\n  }\n\n  node.meta = initUnit(DOMAIN, result, maybeConfig, nameOrConfig)\n  const [event, effect, store, domain] = [\n    'onEvent',\n    'onEffect',\n    'onStore',\n    'onDomain',\n  ].map(createNamedEvent)\n\n  result.hooks = {\n    event,\n    effect,\n    store,\n    domain,\n  }\n  result.onCreateEvent = createHook(event, events, result)\n  result.onCreateEffect = createHook(effect, effects, result)\n  result.onCreateStore = createHook(store, stores, result)\n  result.onCreateDomain = createHook(domain, domains, result)\n\n  result.createEvent = result.event = (nameOrConfig: any, config?: Config) =>\n    event(\n      createEvent(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createEffect = result.effect = (nameOrConfig: any, config?: Config) =>\n    effect(\n      createEffect(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createDomain = result.domain = (nameOrConfig: any, config?: Config) =>\n    createDomain({\n      name: nameOrConfig,\n      parent: result,\n      config,\n    })\n  result.createStore = result.store = (state: any, config?: Config) =>\n    store(\n      createStore(state, {\n        parent: result,\n        config,\n      }),\n    )\n  addToRegion(result)\n  const parent = getParent(result)\n  if (parent) {\n    forIn(result.hooks, (from, key) => {\n      forward({from, to: parent.hooks[key]})\n    })\n    parent.hooks.domain(result)\n  }\n  return result\n}\n","import {combine} from './combine'\nimport {createEffect, onSettled} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {onConfigNesting} from './config'\nimport {getGraph, getStoreState} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {step} from './typedef'\nimport {launch} from './kernel'\nimport {addToReg} from './createNode'\nimport {STORE, EFFECT, REG_A} from './tag'\n\nexport function attach(config: any) {\n  let injected\n  onConfigNesting(config, (injectedData, userConfig) => {\n    injected = injectedData\n    config = userConfig\n  })\n  let {source, effect, mapParams} = config\n  if (!mapParams)\n    mapParams = source\n      ? (_: any, source: any) => source\n      : (params: any) => params\n  const attached = createEffect(config, injected)\n  const {runner} = getGraph(attached).scope\n\n  let runnerSteps\n  const runnerFn = (\n    {params, req}: any,\n    {finally: anyway, effect}: any,\n    stack: any,\n  ) => {\n    const rj = onSettled({\n      params,\n      req,\n      ok: false,\n      anyway,\n      stack,\n    })\n    let computedParams\n    try {\n      computedParams = mapParams(params, stack.a)\n    } catch (err) {\n      return rj(err)\n    }\n    launch({\n      target: effect,\n      params: {\n        params: computedParams,\n        req: {\n          rs: onSettled({\n            params,\n            req,\n            ok: true,\n            anyway,\n            stack,\n          }),\n          rj,\n        },\n      },\n      page: stack.page,\n      defer: true,\n    })\n  }\n  if (source) {\n    let state\n    if (is.store(source)) state = source\n    else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    const readStateRef = step.mov({\n      from: STORE,\n      store: getStoreState(state),\n      to: REG_A,\n    })\n    runnerSteps = [\n      /* let another side-effects run first */\n      step.run({fn: _ => _}),\n      /* read state. assumed it already stable here because of previous step */\n      readStateRef,\n      /* no need for step.run because of first step */\n      step.compute({fn: runnerFn}),\n    ]\n    addToReg(readStateRef, runner.reg)\n  } else {\n    runnerSteps = [step.run({fn: runnerFn})]\n  }\n  runner.scope.effect = effect\n  runner.meta.onCopy.push(EFFECT)\n  runner.seq.splice(0, 1, ...runnerSteps)\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import {observableSymbol} from './observable'\nimport {Event} from './unit.h'\nimport {clearNode} from './clearNode'\nimport {createEvent} from './createUnit'\nimport {bind2} from './bind'\nimport {assertObject} from './is'\nimport {throwError} from './throw'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  if (!observableItem.subscribe)\n    throwError('expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = bind2(clearNode, event, undefined)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {processArgsToConfig} from './config'\nimport {createLinkNode} from './forward'\nimport {sample} from './sample'\nimport {createEvent} from './createUnit'\nimport {combine} from './combine'\nimport {step} from './typedef'\nimport {callStack} from './caller'\nimport {is, isFunction} from './is'\nimport {createNode} from './createNode'\nimport {addToRegion} from './region'\nimport {throwError} from './throw'\n\nexport function guard(...args: any[]) {\n  const meta: Record<string, any> = {op: 'guard'}\n  let rawName = 'guard'\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (metadata) {\n    meta.config = metadata\n    if (metadata.name) rawName = metadata.name\n  }\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  const {filter, greedy, name = rawName} = config\n  const target = config.target || createEvent(name, meta.config)\n  if (!is.unit(source)) source = combine(source)\n\n  if (is.unit(filter)) {\n    sample({\n      source: filter,\n      clock: source,\n      target: addToRegion(\n        createNode({\n          node: [\n            step.filter({\n              fn: ({guard}) => guard,\n            }),\n            step.compute({\n              fn: ({data}) => data,\n            }),\n          ],\n          child: target,\n          meta,\n          family: {\n            owners: [source, filter, target],\n            links: target,\n          },\n        }),\n      ),\n      fn: (guard: any, data: any) => ({guard, data}),\n      greedy,\n      name,\n    })\n  } else {\n    if (!isFunction(filter)) throwError('`filter` should be function or unit')\n    createLinkNode(source, target, {\n      scope: {fn: filter},\n      node: [step.filter({fn: callStack})],\n      meta,\n    })\n  }\n  return target\n}\n","import {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {forward} from './forward'\nimport {unitObjectName} from './naming'\n\nexport function merge<T>(\n  events: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  const result = createEvent(config || unitObjectName(events, 'merge'))\n  forward({\n    from: events,\n    to: result,\n    meta: {op: 'merge'},\n  })\n  return result\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\n\nexport function restore(obj: any, defaultState: any, config?: any): any {\n  if (is.store(obj)) {\n    return obj\n  }\n  if (is.unit(obj)) {\n    const domain = getParent(obj)\n    let result\n    if (is.event(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        ɔ: config,\n      }).on(obj, (_, v) => v)\n    }\n    if (is.effect(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        ɔ: config,\n      }).on(obj.done, (_: any, {result}: any) => result)\n    }\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(obj, (value, key) => {\n    result[key] = is.store(value) ? value : createStore(value, {name: key})\n  })\n  return result\n}\n","import {Event} from './unit.h'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {forward} from './forward'\nimport {processArgsToConfig} from './config'\n\nexport function split(...args: any[]): any {\n  let cases: any\n  let [[unit, match], metadata] = processArgsToConfig(args)\n  const knownCases = !match\n  if (knownCases) {\n    cases = unit.cases\n    match = unit.match\n    unit = unit.source\n  }\n  const result = {} as Record<string, Event<any>>\n  let current: Event<any> = is.store(unit) ? unit.updates : unit\n  forIn(match, (fn, key) => {\n    //@ts-ignore\n    result[key] = current.filter({fn, config: metadata})\n    //@ts-ignore\n    current = current.filter({\n      fn: data => !fn(data),\n      config: metadata,\n    })\n  })\n  result.__ = current\n  if (knownCases) {\n    forIn(result, (event, key) => {\n      if (cases[key]) {\n        forward({\n          from: event,\n          to: cases[key],\n        })\n      }\n    })\n  } else return result\n}\n"],"names":["createNode","node","parent","child","to","target","scope","meta","family","familyRaw","type","sources","arrifyNodes","from","source","links","owners","seq","reg","i","length","item","push","addToReg","result","id","nextNodeID","next","getOwners","getLinks","unitObjectName","objOrArr","method","name","comma","key","unit","is","compositeName","fullName","toString","createName","path","composite","shortName","concat","forEach","list","fn","withRegion","cb","unitMeta","getGraph","regionStack","value","template","readTemplate","sidRoot","getParent","callCreate","payload","args","oldPage","currentPage","page","setCurrentPage","create","createEvent","nameOrConfig","maybeConfig","event","graphite","initUnit","forkPage","find","launch","watch","bind","watchUnit","map","config","isObject","mapped","mapName","createComputation","MAP","filter","createEventFiltration","step","callStack","filterMap","defined","prepend","contramapped","upward","applyParentHook","addToRegion","createStore","defaultState","props","onEvent","store","off","getSubscribers","set","createSubscription","updateStore","plainState","createStateRef","oldState","updates","createNamedEvent","after","plain","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","readRef","setState","state","nodeMap","params","defer","reset","units","on","events","Array","isArray","currentSubscription","get","delete","firstState","lastResult","storeState","undefined","innerStore","strict","linkNode","getStoreState","before","includes","loader","unshift","eventOrFn","subscription","of","isFunction","throwError","changed","STORE","isStrict","own","combine","handler","stores","onConfigNesting","injectedData","userConfig","structStoreShape","shapeReady","rawHandler","slice","obj","spreadArgs","storeCombination","createDefer","req","Promise","rs","rj","catch","createEffect","instance","defaultConfig","getType","onCopy","kind","use","anyway","finally","done","named","status","fail","error","doneData","failData","effectRunner","getHandler","getCurrent","stack","onResolve","onSettled","ok","onReject","err","then","op","fx","runner","upd","getForkPage","isWatch","savedFork","setForkPage","inFlight","x","pending","amount","sample","sid","greedy","processArgsToConfig","clock","metadata","isUpward","initialState","targetTemplate","nativeTemplate","sourceRef","createLinkNode","priority","STACK","callARegStack","closure","hasSource","sourceState","clockState","callStackAReg","createRefGraph","refsMap","items","Object","values","refGraph","cmd","normalizeValues","toposort","rawGraph","ignore","topologicalSortHelper","temp","neighbors","graph","n","visited","Set","reverse","size","processed","ignored","shift","removeItem","flatGraph","traverse","forEachRelatedNode","observableSymbol","Symbol","observable","effect","domain","message","Error","assertObject","idCount","nextUnitID","nextStepID","bind2","arg","hasRef","data","nextBarrierID","barrier","barrierID","mov","check","compute","run","update","current","a","getConfig","opts","getNestedConfig","ɔ","getValue","val","ownerUnit","owner","link","heap","merge","b","ret","isSameType","v","r","l","queue","ix","first","last","deleteMin","pushFirstHeapItem","pushHeap","idx","getPriority","bucket","t","barriers","isRoot","newForkPage","newPage","upsert","forkedPage","stop","skip","lastStartedState","mem","local","stepn","fullID","has","add","tryRun","exec","console","joinName","tag","rawConfig","injected","forIn","pos","indexOf","splice","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","clearNode","ownerSet","history","effects","domains","unsubscribe","readSidRoot","forward","forkedNode","normalizeConfig","part","loc","hookType","hooks","rawConfigA","rawConfigB","isDomain","unitId","thru","subscribe","observer","stateFirst","storeRef","ref","clone","stateNew","rawShape","isFresh","childRef","field","defaultShape","sidechain","createHook","trigger","acc","hook","start","ctx","reject","parentFork","forkInFlightCounter","defers","launchUnits","launchParams","mapParams","_","runnerSteps","attached","runnerFn","computedParams","readStateRef","setters","createDomain","onCreateEvent","onCreateEffect","onCreateStore","onCreateDomain","handlers","needToFill","forked","findClone","index","unitName","clones","refs","forkPageSetter","fxID","resolve","sidMap","forkOf","newRef","j","siblings","wrapped","wrapStore","cloneOf","cloneGraph","sourceList","sourceRefsMap","predefinedRefs","templateOwnedRefs","valuesSidList","getOwnPropertyNames","execRef","fillValues","handlerKeys","keys","observableItem","disposer","complete","rawName","guard","isScope","storeWatches","storeWatchesRefs","normalizedValues","fillResult","flatGraphUnits","collectWatches","savedStack","onlyChanges","currentComposite","cases","match","knownCases","__"],"mappings":"wzBA+BO,SAASA,0BA0BZ,SAzBFC,KAAAA,aAAO,SAGPC,WAGAC,MAAAA,eAFAC,MACAC,aAEAC,MAAAA,aAAQ,SACRC,KAAAA,aAAO,SACPC,OAAQC,aAAY,CAACC,KAAM,aAiBrBC,EAAUC,gBAzBhBC,QACAC,UAyBMC,EAAQH,GAAYH,EAAUM,OAC9BC,EAASJ,GAAYH,EAAUO,QAC/BC,EAAa,GACbC,EAAgC,GAC7BC,EAAI,EAAGA,EAAIlB,EAAKmB,OAAQD,IAAK,KAC9BE,EAAOpB,EAAKkB,GACbE,IACLJ,EAAIK,KAAKD,GACTE,GAASF,EAAMH,YAEXM,EAAgB,CACpBC,GAAIC,IACJT,IAAAA,EACAU,KAAMf,GAAYT,GAClBI,KAAAA,EACAD,MAAAA,EACAE,OAAQ,CACNE,KAAMD,EAAUC,MCvEG,YDwEnBK,MAAAA,EACAC,OAAAA,GAEFE,IAAAA,GAEOC,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAChCS,GAAUb,EAAMI,IAAIG,KAAKE,OAEtB,IAAIL,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IACjCU,GAASb,EAAOG,IAAIG,KAAKE,OAEtB,IAAIL,EAAI,EAAGA,EAAIR,EAAQS,OAAQD,IAClCR,EAAQQ,GAAGQ,KAAKL,KAAKE,UAEhBA,EElFF,SAASM,EAAeC,EAAeC,YAAAA,IAAAA,EAAiB,eACzDC,EAAOD,EAAS,IAChBE,EAAQ,GACRf,EAAI,MAEH,IAAMgB,KAAOJ,EAAU,KAEpBK,EAAOL,EAASI,MACV,MAARC,IACFH,GAAQC,EAERD,GAAQI,EAAQD,GAAQA,EAAKE,cAAcC,SAAWH,EAAKI,YAInD,MAFVrB,GAAK,GAES,MACde,EAAQ,YAEVD,EAAQ,IAuBH,SAASQ,EAAWR,EAAc/B,OACnCwC,EACAH,EACAI,EACEC,EAAYX,SACb/B,GAQHyC,EAAYzC,EAAOoC,cACC,IAAhBL,EAAKb,QACPsB,EAAOC,EAAUD,KACjBH,EAAWI,EAAUJ,WAErBG,EAAOC,EAAUD,KAAKG,OAAO,CAACZ,IAE5BM,EADgC,IAA9BI,EAAUJ,SAASnB,OACVa,EAEKU,EAAUJ,SAAW,IAAMN,KAf7CS,EADkB,IAAhBT,EAAKb,OACA,GAEA,CAACa,GAEVM,EAAWN,GAeN,CAACW,UAAAA,EAAWL,SAAAA,EAAUG,KAAAA,GCxDxB,SAASI,EAAQC,EAAWC,GACjCD,EAAKD,QAAQE,GCIR,SAASC,EAAWb,EAAWc,OAC9BC,EAAWC,GAAShB,GAAM7B,KAChC8C,GAAc,CACZnD,OAAQmD,GACRC,MAAOlB,EACPmB,SAAUJ,EAASI,UAAYC,KAC/BC,QAASN,EAASM,SAAYJ,IAAeA,GAAYI,oBAGlDP,YAEPG,GAAcK,GAAUL,KCmG5B,SAASM,EAAWvB,EAAWmB,EAAeK,EAAcC,OACpDC,EAAUC,GACZC,EAAO,QACPT,MACFS,EAAOD,GACAC,GAAQA,EAAKT,WAAaA,GAC/BS,EAAON,GAAUM,GAGrBC,GAAeD,OACTxC,EAASY,EAAK8B,OAAON,EAASC,UACpCI,GAAeH,GACRtC,EAGF,SAAS2C,EACdC,EACAC,OAEMC,EAAa,SAAbA,EAAcV,8BAAqBC,mCAAAA,2BACnCE,GACKJ,EAAWW,EAAOf,EAAUK,EAASC,GAEvCS,EAAMJ,OAAON,EAASC,IAE/BS,EAAMC,SAAWvE,EAAW,CAC1BO,KAAMiE,GJhKW,QIgKKF,EAAOD,EAAaD,KAG5CE,EAAMJ,OAAS,SAACN,OACRvD,EAASoE,GAAWA,GAASC,KAAKJ,GAASA,SACjDK,GAAOtE,EAAQuD,GACRA,GAETU,EAAMM,MAAQC,EAAKC,GAAWR,GAC9BA,EAAMS,IAAM,SAAC/B,OACPgC,EACA/C,EACAgD,EAASjC,KACXgC,EAAShC,EACTf,EAAOe,EAAGf,KACVe,EAAKA,EAAGA,QAEJkC,EAASf,EAAYgB,GAAQb,EAAOrC,GAAO+C,UACjDI,GAAkBd,EAAOY,EAAQG,EAAKrC,GAC/BkC,GAETZ,EAAMgB,OAAS,SAACtC,UACduC,GAAsBjB,EJ3KJ,SI2KmBtB,EAAGA,GAAKA,EAAKA,EAAGA,GAAI,CACvDwC,EAAY,CAACxC,GAAIyC,QAErBnB,EAAMoB,UAAY,SAAC1C,UACjBuC,GAAsBjB,EAAO,YAAatB,EAAI,CAC5CwC,EAAa,CAACxC,GAAIyC,KAClBD,EAAWG,aAEfrB,EAAMsB,QAAU,SAAC5C,OACT6C,EAA2B1B,EAAY,OAASG,EAAM1B,UAAW,CACrE1C,OAAQwD,GAAUY,KAEdf,EAAWC,YACbD,GACFH,GAASyC,GAAc5E,IAAIK,KAAKiC,EAASuC,QAE3CV,GAAkBS,EAAcvB,EAAO,UAAWtB,GAClD+C,GAAgBzB,EAAOuB,GAChBA,OAEHtC,EAAWC,YACVwC,GAAY1B,GAGd,SAAS2B,EACdC,EACAC,YA6HSC,EAAQ9B,EAAYtB,GAC3BqD,EAAMC,IAAIhC,GACViC,GAAeF,GAAOG,IACpBlC,EACAmC,GAAmBC,GAAYpC,EAAO+B,EAAO,KAAM,EAAMrD,SA/HvD2D,EAAaC,EAAeV,GAC5BW,EAAWD,EAAeV,GAC1BY,EAAUC,GAAiB,WAC3BxD,EAAWC,KACjBmD,EAAWK,MAAQ,CAAC,CAACtG,KAAM,OAAQN,GAAIyG,IACnCtD,GACFA,EAAS0D,MAAM3F,KAAKqF,EAAYE,OAE5BK,EAAeP,EAAWlF,GAC1B4E,EAAa,CACjBc,YAAa,IAAIC,IACjBN,QAAAA,EACAZ,aAAAA,EACAmB,SAAUV,EACVW,wBAEMC,EADAC,EAAYb,KAEZ5C,GAAa,SACXC,EAAOD,GACJC,IAASA,EAAK9C,IAAIgG,IACvBlD,EAAON,GAAUM,GAEfA,IAAMuD,EAAcvD,UAErBuD,GAAe9C,IAAYA,GAASvD,IAAIgG,KAC3CK,EAAc9C,IAEZ8C,IAAaC,EAAYD,EAAYrG,IAAIgG,IACtCO,EAAQD,IAEjBE,kBAASC,OACHtH,EACAoE,KACFpE,EAASoE,GAASmD,QAAQxE,GAASiD,GAAO5E,KAEvCpB,IAAQA,EAASgG,GACtB1B,GAAO,CACLtE,OAAAA,EACAwH,OAAQF,EACRG,MAAO,KAGXC,4CAASC,2BAAAA,gCACYA,sBAAR5F,OAAeiE,EAAM4B,GAAG7F,GAAM,kBAAMiE,EAAMH,uBAC9CG,GAET4B,YAAGC,EAAalF,MACVmF,MAAMC,QAAQF,iBACIA,kBAClB9B,UAAepD,QAGjBoD,EAAQ8B,EAAQlF,UAEXqD,GAETC,aAAIlE,OACIiG,EAAsB9B,GAAeF,GAAOiC,IAAIlG,UAClDiG,IACFA,IACA9B,GAAeF,GAAOkC,OAAOnG,IAExBiE,GAETtB,aAAI/B,EAASwF,OACPxD,EACA/C,EAOAwG,EANAxD,EAASjC,KACXgC,EAAShC,EACTf,EAAOe,EAAGf,KACVuG,EAAaxF,EAAGwF,WAChBxF,EAAKA,EAAGA,QAGJ0F,EAAarC,EAAMiB,WACnB/D,EAAWC,KACbD,EACFkF,EAAa,UACWE,IAAfD,IACTD,EAAazF,EAAG0F,EAAYF,QAGxBI,EAAyB3C,EAAYwC,EAAY,CACrDxG,KAAMkD,GAAQkB,EAAOpE,GACrB+C,OAAAA,EACA6D,OAAQ,IAEJC,EAAWpC,GAAYL,EAAOuC,EAAYvD,EAAK,EAAOrC,UAE5D+F,GAAcH,GAAYI,OAAS,CACjC,CACEtI,KAAM2E,EACNrC,GAAAA,EACAnC,KAAM8F,IAGNpD,IACG0F,GAAS1F,EAAS0D,MAAON,IACvBsC,GAASH,EAAS7H,IAAKsC,EAAS2F,SACnCJ,EAAS7H,IAAIkI,QAAQ5F,EAAS2F,SAI7BN,GAEThE,eAAMwE,EAAgBpG,OACfA,IAAOX,EAAQ+G,GAAY,KACxBC,EAAevE,GAAUuB,EAAO+C,GAChC7F,EAAWC,YACbD,EACFA,EAASqB,MAAMtD,KAAK,CAClBgI,GAAI3C,EACJ3D,GAAIoG,IAGNA,EAAU/C,EAAMiB,YAEX+B,SAEJE,EAAWvG,IAAKwG,EAAW,wCACzBJ,EAAUxE,OAAM,SAAChB,UAAiBZ,EAAGqD,EAAMiB,WAAY1D,eAUlEyC,EAAM9B,SAAWvE,EAAW,CAC1BM,MAAO,CAACqH,MAAOhB,GACf1G,KAAM,CACJuF,EAAWG,UACXH,EAAY,CACVa,MAAOM,IAETnB,EAAWiE,QAAQ,CACjBpD,MAAOQ,IAETrB,EAAY,CACVa,MAAOQ,KAGX1G,MAAO2G,EACPvG,KAAMiE,GAASkF,EAAOrD,EAAOF,KAE3BwD,SAA6BhB,IAAjBzC,GACdsD,EAAW,sDACbI,GAAIvD,EAAO,CAACS,IACLd,GAAYK,GC3Vd,SAASwD,+BAAWhG,2BAAAA,sBACrBiG,EACAC,EACA/E,EACJgF,GAAgBnG,EAAK,IAAI,SAACoG,EAAcC,GACtClF,EAASiF,EACTpG,EAAOqG,SAULC,EACAC,EATEC,EAAaxG,EAAKA,EAAKzC,OAAS,MAClCmI,EAAWc,IACbN,EAASlG,EAAKyG,MAAM,GAAI,GACxBR,EAAUO,GAEVN,EAASlG,EAKW,IAAlBkG,EAAO3I,OAAc,KACjBmJ,EAAMR,EAAO,GAId1H,EAASkI,KAcZJ,EAAmBI,EACnBH,EAAa,UAGZA,IAIHD,EAAmBJ,EAKfD,IACFA,EAAUU,GAAWV,KAGpB7E,EAASkF,IAAmBX,EAAW,6BACrCiB,GACLtC,MAAMC,QAAQ+B,GACdA,EACAnF,EACA8E,GCzEG,SAASY,QAKRlJ,EAAS,UAKfA,EAAOmJ,IAAM,IAAIC,SAAQ,SAACC,EAAIC,GAC5BtJ,EAAOqJ,GAAKA,EACZrJ,EAAOsJ,GAAKA,KAEdtJ,EAAOmJ,IAAII,OAAM,eACVvJ,ECJF,SAASwJ,EACd5G,EACAC,OAEM4G,EAAgB9G,EAAYC,EAAcC,GAC5CyF,EACFmB,EAASC,cAAcpB,SACtB,kBAAMN,wBAAiCyB,EAASE,YAC7ClL,EAAOmD,GAAS6H,GACtBhL,EAAKM,KAAK6K,OAAS,CAAC,UACpBnL,EAAKM,KAAK6B,KAAO6I,EAASI,KPnBN,SOoBpBJ,EAASK,IAAM,SAACtI,UACTuG,EAAWvG,IAAKwG,EAAW,sCAChCM,EAAU9G,EACHiI,OAEHM,EAAUN,EAASO,QAAUzE,GAAiB,WAC9C0E,EAAQR,EAASQ,KAAQF,EAAe7F,UAAU,CACtDgG,MAAO,OACP1I,kBACiB,WADb2I,OACqB,MAAO,CAAC9D,SADrBA,OAC6BrG,SADrBA,WAIhBoK,EAAQX,EAASW,KAAQL,EAAe7F,UAAU,CACtDgG,MAAO,OACP1I,kBACiB,WADb2I,OACqB,MAAO,CAAC9D,SADrBA,OAC6BgE,QADrBA,UAIhBC,EAAYb,EAASa,SAAWL,EAAK1G,IAAI,CAC7C2G,MAAO,WACP1I,GAAI,qBAAExB,UAEFuK,EAAYd,EAASc,SAAWH,EAAK7G,IAAI,CAC7C2G,MAAO,WACP1I,GAAI,qBAAE6I,SAGFG,EAAehM,EAAW,CAC9BM,MAAO,CACL2L,WAAYhB,EAASK,IAAIY,WAAa,kBAAMpC,GAC5C0B,QAASD,GAEXtL,KAAM,CACJuF,EAAS,CACPxC,gBAAiDmJ,OAe3C3K,EAfFqG,IAAAA,OAAQ8C,IAAAA,IAAgBY,IAATC,QAAiBS,IAAAA,WAC5BG,EAAYC,GAAU,CAC1BxE,OAAAA,EACA8C,IAAAA,EACA2B,GAAI,EACJf,OAAAA,EACAY,MAAAA,IAEII,EAAWF,GAAU,CACzBxE,OAAAA,EACA8C,IAAAA,EACA2B,GAAI,EACJf,OAAAA,EACAY,MAAAA,QAIA3K,EAASyK,GAAAA,CAAapE,GACtB,MAAO2E,eACKD,EAASC,GAEnBvH,EAASzD,IAAW+H,EAAW/H,EAAOiL,MACxCjL,EAAOiL,KAAKL,EAAWG,GAEvBH,EAAU5K,OAKlBjB,KAAM,CACJmM,GAAI,KACJC,GAAI,SACJvB,OAAQ,CAAC,cAGbnL,EAAKK,MAAMsM,OAASZ,EACpB/L,EAAKgB,IAAIK,KACPkE,EAAa,CACXxC,YAAG6E,EAAQvH,EAAO6L,UAEXzI,GAAUyI,GACR,CACLtE,OAAAA,EACA8C,IAAK,CACHE,gBACAC,kBAL0BjD,KAUlCrC,EAAS,CACPxC,YAAG6J,IAAeV,UAChBxH,GAAO,CACLtE,SAFKuM,OAGL/E,OAAQgF,EACR/E,MAAO,EACPrD,SAAUqI,GAAYX,KAEjBU,EAAIhF,WAIjBoD,EAAS/G,OAAS,SAAC2D,OACX8C,EAAMD,IACN9G,EAAU,CAACiE,OAAAA,EAAQ8C,IAAAA,MACrBlG,GAAU,KACPsI,GAAS,KACNC,EAAYvI,GAClBkG,EAAIA,IAAIa,SAAQ,WACdyB,GAAYD,MAGhBrI,GAAOF,GAASC,KAAKuG,GAAWrH,QAEhCe,GAAOsG,EAAUrH,UAEZ+G,EAAIA,SAGPuC,EAAYjC,EAASiC,SAAWjH,EAAY,EAAG,CAACyF,MAAO,aAC1DzD,GAAGgD,GAAU,SAAAkC,UAAKA,EAAI,KACtBlF,GAAGsD,GAAQ,SAAA4B,UAAKA,EAAI,KAEjBC,EAAWnC,EAASmC,QAAUF,EAASnI,IAAI,CAE/C/B,GAAI,SAAAqK,UAAUA,EAAS,GACvB3B,MAAO,mBAGT9B,GAAIqB,EAAU,CACZM,EACAE,EACAG,EACAE,EACAC,EACAqB,EACAF,EACAlB,IAEKf,EC1IF,SAASqC,YACVjN,EACA4B,qBAFoB4B,2BAAAA,sBAIpB0J,EACAC,IAFkCC,GAAoB5J,UAApD/C,OAAQ4M,OAAO1K,OAAK2K,YAIZhF,IAAV+E,GAAuB,WAAY5M,IACjC,UAAWA,GAA0B,MAAhBA,EAAO4M,OAC9BlE,EAAW,kCACbkE,EAAQ5M,EAAO4M,MACf1K,EAAKlC,EAAOkC,GACZwK,EAAS1M,EAAO0M,OAEhBnN,EAASS,EAAOT,OAChB4B,EAAOnB,EAAOmB,KACdsL,EAAMzM,EAAOyM,IACbzM,EAASA,EAAOA,QAEbuB,EAAQvB,KACXA,EAAS+I,EAAQ/I,SAEL6H,IAAV+E,IAEFA,EAAQ5M,GAEVmB,EAAO0L,GAAY1L,GAAQnB,EAAO8B,cAC5BW,EAAWC,KACXoK,IAAavN,MACdA,KACCgC,EAASvB,IAAWuB,EAASqL,GAAQ,KACjCG,EAAe7K,EACjBA,EAAGyE,EAAQsB,GAAcjI,IAAU2G,EAAQsB,GAAc2E,KACzDjG,EAAQsB,GAAcjI,IAC1BT,EAAS4F,EAAY4H,EAAc,CAAC5L,KAAAA,EAAMsL,IAAAA,SAE1ClN,EAAS8D,EAAYlC,GACjBsB,GACFH,GAAS/C,GAAQY,IAAIK,KAAKiC,EAAS2F,YAInC4E,EACJF,GAAYvL,EAAQhC,IAAW+C,GAAS/C,GAAQE,KAAKwN,kBACnD1L,EAASvB,GAAS,KACdkN,EAAYjF,GAAcjI,GAChC8I,GAAI9I,EAAQ,CACVmN,GAAeP,EAAOrN,EAAQ,CAC5BC,MAAO,CAAC0C,GAAAA,EAAI8K,eAAAA,GACZ7N,KAAM,CACJsD,GAAYA,EAAS2F,QAEpBsE,GAAUhI,EAAa,CAAC0I,SRjEZ,YQkEb1I,EAAS,CACPa,MAAO2H,EACP5N,GAAI4C,ER3DK,IQ2DQmL,IAEnBnL,GAAMwC,EAAa,CAACxC,GAAIoL,IACxB7K,GAAYqK,GAAYrK,EAASuC,QAEnCvF,KAAM,CAACmM,GRlEO,SQkEKY,OAAQ5D,OAG3BnG,IAEC0F,GAAS1F,EAAS0D,MAAO+G,IACzB/E,GAAS1F,EAAS8K,QAASL,IAE5BzK,EAAS8K,QAAQ/M,KAAK0M,QAGrB,KACCM,EAAY1H,EAAe,GAC3B2H,EAAc3H,IACd4H,EAAa5H,IACfrD,GACFA,EAAS0D,MAAM3F,KAAKgN,EAAWC,EAAaC,GAE9CxI,GACEhG,EAAW,CACTE,OAAQY,EACRb,KAAM,CACJuF,EAAY,CAACa,MAAOkI,IACpB/I,EAAS,CACP3E,KR5FS,QQ6FTwF,MAAO,EACPhG,OAAQiO,KAGZ9N,OAAQ,CACNQ,OAAQ,CAACF,EAAQT,EAAQqN,GACzB3M,MAAOV,GAETE,KAAM,CAACmM,GRnGO,SQmGKY,OAAQ,aAG/B1D,GAAI9I,EAAQ,CACVmN,GAAeP,EAAOrN,EAAQ,CAC5BC,MAAO,CACL0C,GAAAA,EACA8K,eAAAA,GAEF7N,KAAM,CACJsD,GAAYA,EAAS2F,OACrB1D,EAAY,CAACa,MAAOmI,IACpBhJ,EAAS,CAACa,MAAOiI,IACjB9I,EAAY,CAACxC,GAAI,SAAAsL,UAAaA,MAE7Bd,GAAUhI,EAAa,CAAC0I,SRzHZ,YQ0Hb1I,EAAS,CAACa,MAAOkI,IACjB/I,EAAS,CACPa,MAAOmI,EACPpO,GRpHS,MQsHX4C,GAAMwC,EAAa,CAACxC,GAAIyL,IACxBlL,GAAYqK,GAAYrK,EAASuC,QAEnCvF,KAAM,CAACmM,GR3HO,SQ2HKY,OAAQ,oBAI1BjN,ECcT,SAASqO,EAAeC,WAChBC,EAAQC,OAAOC,OAAOH,GACtBI,EAAW,SACEH,iBACjBG,OADUtN,IACK,mCAGLA,IAAAA,GAAIuH,IAAAA,OAAQhC,IAAAA,MACtBgC,GAAUlG,EAAQkG,GAAQ,SAAAgG,GACxBD,EAASC,EAAInO,KAAKY,IAAIH,KAAKG,MAE7BuF,GAASlE,EAAQkE,GAAO,SAAAgI,GACtBD,EAAStN,GAAIH,KAAK0N,EAAI5O,GAAGqB,cALKmN,4BAQ3BG,EAkDT,SAASE,EAAgBH,MACnBA,aAAkB1H,IAAK,WACnB5F,EAAS,OACYsN,kBAAQ,eAAvB3M,OAAKmB,OACVjB,EAAQF,IAAMqH,EAAW,4BAC9BhI,EAAOW,EAAIoL,KAAQjK,SAEd9B,SAEFsN,EAyGT,SAASI,EAASC,EAAoCC,YA8B3CC,EAAsBpP,GAC7BqP,EAAKrP,GAAQ,UACPsP,EAAYC,EAAMvP,GACfkB,EAAI,EAAGA,EAAIoO,EAAUnO,OAAQD,IAAK,KACnCsO,EAAIF,EAAUpO,GAChBmO,EAAKG,IAIJC,EAAQD,IACXJ,EAAsBI,GAG1BH,EAAKrP,GAAQ,EACbyP,EAAQzP,GAAQ,EAChBuB,EAAOF,KAAKrB,OA5CRuP,EAAQ,OACT,IAAM/N,KAAM0N,EACfK,EAAM/N,aAAU,IAAIkO,IAAIR,EAAS1N,SAE7BD,EAAS,GACTkO,EAAU,GACVJ,EAAO,OACR,IAAMrP,KAAQuP,EACZE,EAAQzP,IAAUqP,EAAKrP,IAC1BoP,EAAsBpP,UAG1BuB,EAAOoO,UACHR,GAAUA,EAAOS,KAAO,sBAGtBxO,EAFEyO,EAAY,GACZC,YAAcX,GAEZ/N,EAAO0O,EAAQC,SACrBF,EAAUxO,KAAKD,GACfyB,EAAQ0M,EAAMnO,IAAO,SAAAlB,GACf8I,GAAS6G,EAAW3P,IAAU8I,GAAS8G,EAAS5P,IACpD4P,EAAQzO,KAAKnB,MAGjB2C,EAAQgN,GAAW,SAAAzO,GACjB4O,GAAWzO,EAAQH,SAGhBG,EA4DT,SAAS0O,EAAU9N,OACXW,EAAO,mBACFoN,EAASlQ,GACdgJ,GAASlG,EAAM9C,KACnB8C,EAAKzB,KAAKrB,GACVmQ,EAAmBnQ,EAAMkQ,KACxB/M,GAAShB,IACLW,EAwKT,SAASqN,EACPnQ,EACAiD,OAEMd,EAAOnC,EAAKM,KAAK6B,KACV,SAATA,GT9kBsB,wBS8kBHA,IACvBU,EAAQ7C,EAAK0B,KAAMuB,GACnBJ,EAAQlB,GAAU3B,GAAOiD,GACzBJ,EAAQjB,GAAS5B,GAAOiD,0DC/f1B,IC5FO,IAAMmN,EACQ,oBAAXC,QAA0BA,OAAOC,YAAe,eXD7C7G,EAAQ,QAMRrE,EAAM,MACN8I,EAAQ,QYHR/L,EAAO,SAACmI,UAClBhB,EAAWgB,IAAQtF,EAASsF,KAAS,SAAUA,GAE5ClI,EAAK,SAAC3B,UAAe,SAAC6J,UAAanI,EAAKmI,IAAQA,EAAIc,OAAS3K,IAEtD2F,EAAQhE,EAAGqH,GACXpF,EAAQjC,EZTA,SYURmO,EAASnO,EZTA,UYUToO,EAASpO,EZTA,sEaHTmH,EAAa,SAACkH,SACnBC,MAAMD,ICGDzL,EAAW,SAAC3B,SACN,iBAAVA,GAAgC,OAAVA,GAClBiG,EAAa,SAACjG,SAAgC,mBAAVA,GAEpCsN,EAAe,SAACtN,GACtB2B,EAAS3B,IAAWiG,EAAWjG,IAClCkG,EAAW,uCCVTqH,EAAU,eACVpP,EAAK,SACF,oBAASA,GAAIe,SAAS,MAGlBsO,EAAaD,IACbE,EAAaF,IACbnP,EAAamP,ICPbhM,EAAO,SAAC7B,EAAc3C,UAAgB2C,EAAG6B,KAAK,KAAMxE,IACpD2Q,EAAQ,SAAChO,EAAc3C,EAAa4Q,UAC/CjO,EAAG6B,KAAK,KAAMxE,EAAQ4Q,ICGlBjC,EAAM,SAACtO,EAAWwQ,EAAiBC,SAAoB,CAC3D1P,GAAIsP,IACJrQ,KAAAA,EACAyQ,KAAAA,EACAD,OAAAA,IAGEE,EAAgB,EAEPC,EAAiE,oBAC5EnD,gBAEAc,EjBTqB,UiBSR,EAAO,CAClBsC,YAAaF,EACblD,oBjBXmB,eiBaVqD,EAKD,oBAAE1Q,KAAAA,aAAO6I,IAAcrJ,IAAAA,WAAQD,UACzC4O,EAAI,MAAOnO,IAAS6I,EAAO,CAAC7I,KAAAA,EAAMwF,QADRA,MACejG,cADKC,EAASqJ,EAAQyE,IAClB9N,OAAAA,KAClCmR,EAGT,CACF7L,QAAS,kBAAMqJ,EAAI,QAAS,EAAO,CAACtO,KAAM,aAC1C+I,QAAS,mBAAauF,EAAI,QAAS,EAAM,CAACtO,KAAM,UAAW2F,QAAhDA,UAEAoL,EAEGT,EAAMhC,EAAK,UAAW,GACzB1J,EAEE0L,EAAMhC,EjB5BC,SiB4BY,GACrB0C,EAEDV,EAAMhC,EAAK,MAAO,GACjB2C,EAA2C,mBACtDJ,EAAI,CAAC1Q,KAAMsN,EAAO9N,SADsCgG,sFCzC7CO,EAAiB,SAACgL,SAA6B,CAC1DnQ,GAAIsP,IACJa,QAAAA,IAEWnK,EAAU,qBAAEmK,SCPZnD,EAAgB,SAACtC,cAAoCnJ,IAAvBA,IAA0BmJ,IAAf0F,IACzCzD,EAAgB,SAACjC,cAAoCnJ,IAAvBA,MAAW6O,EAAkB1F,IAC3D1G,GAAY,SAAC0G,YAAkCnJ,IAArBA,IAAwBmJ,ICAlD/I,GAAW,SAACoM,UAAsBA,EAAMjL,UAAYiL,GACpD5N,GAAY,SAAC3B,UAAgBA,EAAKO,OAAOQ,QACzCa,GAAW,SAAC5B,UAAgBA,EAAKO,OAAOO,OACxCgI,GAAgB,SAAC1C,UAAeA,EAAMgB,UACtCyK,GAAY,SAACC,UAAcA,EAAK/M,QAChCgN,GAAkB,SAACD,UAAcA,EAAKE,GACtCC,GAAW,SAAC/F,UAAeA,EAAM7I,OACjCiD,GAAiB,SAACF,UAAeA,EAAMc,aACvCzD,GAAY,SAACtB,UAAcA,EAAKlC,QAChC4M,GAAc,SAACqF,UAAaA,EAAI1N,UCPhCmF,GAAM,SAACwI,EAAqBrR,WACjCsR,EAAQjP,GAASgP,GACdjR,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAAK,KAC/BmR,EAAOlP,GAASrC,EAAMI,IrBJV,WqBKdkR,EAAM7R,OAAOE,OAAiB4R,EAAK9R,OAAOE,KrBHzB,aqBIrBkB,GAAU0Q,GAAMhR,KAAK+Q,GACrBxQ,GAASwQ,GAAO/Q,KAAKgR,KtBLnB1R,GAAc,SAACmC,YAAAA,IAAAA,EAA8B,QAC3CvB,EAAS,MACX2G,MAAMC,QAAQrF,OACX,IAAI5B,EAAI,EAAGA,EAAI4B,EAAK3B,OAAQD,IAC3BgH,MAAMC,QAAQrF,EAAK5B,IAAKK,EAAOF,WAAPE,EAAgBuB,EAAK5B,IAC5CK,EAAOF,KAAKyB,EAAK5B,SAGxBK,EAAOF,KAAKyB,UAEPvB,EAAOuD,IAAI3B,KAEP7B,GAAW,WAEtBL,OAEImF,EAHK3F,IAAAA,KAAMyQ,IAAAA,OAAdD,SAMChQ,GADAmF,EAAQ8K,EAAK9K,OACH5E,IAAM4E,GAEL,QAAT3F,GAAkByQ,EAAK/Q,KAAOsJ,IAEhCxI,GADAmF,EAAQ8K,EAAK9Q,QACHoB,IAAM4E,IWiChBkM,GAAyB,KAEvBC,GAAQ,SAARA,EAASX,EAAqBY,OAC7BZ,EAAG,OAAOY,MACVA,EAAG,OAAOZ,MAEXa,EACEC,EAAad,EAAEe,EAAElS,OAAS+R,EAAEG,EAAElS,YAMjCiS,GAAcd,EAAEe,EAAEnR,GAAKgR,EAAEG,EAAEnR,KAE1BkR,GVxEiB,YUwEHd,EAAEe,EAAElS,QAEpBgS,EAAMb,EACNA,EAAIY,EACJA,EAAIC,GAENA,EAAMF,EAAMX,EAAEgB,EAAGJ,GACjBZ,EAAEgB,EAAIhB,EAAEiB,EACRjB,EAAEiB,EAAIJ,EAECb,GAIHkB,GAAuB,GACzBC,GAAK,EACFA,GAAK,GAKVD,GAAMzR,KAAK,CAAC2R,MAAO,KAAMC,KAAM,KAAMrD,KAAM,IAC3CmD,IAAM,EAGR,IAmGWvO,GN7IPkF,GM0CEwJ,GAAY,eACX,IAAIhS,EAAI,EAAGA,EAAI,EAAGA,IAAK,KACpB4B,EAAOgQ,GAAM5R,MACf4B,EAAK8M,KAAO,EAAG,IAKP,IAAN1O,GAAiB,IAANA,EAAS,CACtB4B,EAAK8M,MAAQ,MACPvM,EAAQiP,GAAMK,SACpBL,GAAOC,GAAMD,GAAMO,EAAGP,GAAMM,GACrBvP,EAES,IAAdP,EAAK8M,OACP9M,EAAKmQ,KAAO,UAER7R,EAAO0B,EAAKkQ,aAClBlQ,EAAKkQ,MAAQ5R,EAAMwR,EACnB9P,EAAK8M,MAAQ,EACNxO,EAAMuR,KAIbQ,GAAoB,SACxB1S,EACAsD,EACA/D,EACAC,EACAoD,EACAmB,UAEA4O,GACE,EACA,CACExB,EAAG,KACHY,EAAG,KACHxS,KAAAA,EACAC,OAAAA,EACAoD,MAAAA,EACAU,KAAAA,EACAS,SAAAA,GAEF/D,IAEE2S,GAAW,SAACC,EAAanH,EAAczL,EAAmBe,YAAAA,IAAAA,EAAK,OAC7DyM,EAAWqF,GAAY7S,GACvB8S,EAAsBT,GAAM7E,GAC5B7M,EAAkB,CACtBuR,EAAG,CACDU,IAAAA,EACAnH,MAAAA,EACAzL,KAAAA,EACAe,GAAAA,GAGFqR,EAAG,EAEHD,EAAG,GAMY,IAAb3E,GAA+B,IAAbA,EACpBqE,GAAOC,GAAMD,GAAMlR,IAEC,IAAhBmS,EAAO3D,KACT2D,EAAOP,MAAQ5R,EAEfmS,EAAON,KAAML,EAAIxR,EAEnBmS,EAAON,KAAO7R,GAEhBmS,EAAO3D,MAAQ,GAGX0D,GAAc,SAACE,UACXA,OACD,eACI,MACJ,cACI,MV/KU,iBUiLV,MVrLU,iBUuLV,MVzLS,gBU2LT,iBAEC,IAIRC,GAAW,IAAI/D,IAEjBgE,GAAS,EACF5G,GAAU,EACVhJ,GAAmB,KAEjBkJ,GAAc,SAAC2G,GAC1BnP,GAAWmP,GAEA3P,GAAiB,SAAC4P,GAC7B9P,GAAc8P,GA8HHlP,GAAS,SAACvC,EAAWwB,EAAekQ,OAC3C9P,EAAOD,GACPoI,EAAQ,KACR4H,EAAatP,MACbrC,EAAK/B,SACPuD,EAAUxB,EAAKyF,OACfiM,EAAS1R,EAAK0F,MACd9D,EAAO,SAAU5B,EAAOA,EAAK4B,KAAOA,EAChC5B,EAAI,QAAS+J,EAAQ/J,EAAI,OAC7B2R,EAAajH,GAAY1K,IAAS2R,EAClC3R,EAAOA,EAAK/B,QAEV8H,MAAMC,QAAQhG,OACX,IAAIjB,EAAI,EAAGA,EAAIiB,EAAKhB,OAAQD,IAC/BiS,GACE,OACApP,EACAZ,GAAShB,EAAKjB,IACdgL,EACAvI,EAAQzC,GACR4S,QAIJX,GAAkB,OAAQpP,EAAMZ,GAAShB,GAAO+J,EAAOvI,EAASmQ,GAE9DD,IAAWH,IApJJ,eAGPK,EACAC,EACAzE,EACAlM,EACAU,EACA9C,EAPEgT,EAAmB,CAACP,OAAAA,GAAQ5P,YAAAA,GAAaU,SAAAA,GAAUsI,QAAAA,IACzD4G,GAAS,EAOTQ,EAAK,KAAQ7Q,EAAQ6P,MAAc,KAC1BG,EAAoBhQ,EAApBgQ,IAAKnH,EAAe7I,EAAf6I,MAAOzL,EAAQ4C,EAAR5C,KACnB8O,EAAQrD,EAAMlM,KACd8D,GAAcC,EAAOmI,EAAMnI,KAC3BS,GAAWqI,GAAYX,GACvBjL,GAAO8C,GAAcwL,GAAOtO,QACtBkT,EAAe,CACnBxI,KAAM,EACNtL,MAAOkP,EAAMlP,OAEf0T,EAAOC,EAAO,MACT,IAAII,EAAQf,EAAKe,EAAQ7E,EAAMvO,IAAIG,SAAW4S,EAAMK,IAAS,KAC1D7O,EAAOgK,EAAMvO,IAAIoT,GACjBlD,EAAO3L,EAAK2L,YACV3L,EAAK9E,UVhOI,cUkOTe,EAAK0P,EAAKG,UACVtN,IACFvC,EAAQuC,EAAKsQ,WAAU7S,OAEnByM,EAAWiD,EAAKjD,YAClBmG,IAAUf,GAAO5S,IAASwN,EAAU,CACjCwF,GAASa,IAAI9S,KAChBiS,GAASc,IAAI/S,GACb4R,GAASgB,EAAOlI,EAAO+B,EAAUzM,aAE1B0S,EAEXT,GAASnL,OAAO9G,aAGb,UACC6B,gBAEI6N,EAAKtQ,WACNsN,EAAO7K,EAAQ4O,GAAS/F,aVhPpB,QUkPJ,IACH7I,EAAQ6I,EAAMgF,EAAKtQ,gBVvPZ,QUyPGyC,EAAQ6N,EAAK9K,iBACpBqD,EACExI,EAAIiQ,EAAK9K,MAAM5E,MAElB0K,EAAMnI,KAAOA,EAAO,KACpB9C,EAAMsO,EAAMtO,KAGdoC,EAAQmE,EAAQvG,EAAIiQ,EAAK9K,MAAM5E,YAI3B0P,EAAK/Q,SACN+N,EAAOhC,EAAM7I,MAAQA,YVlQjB,QUoQJ,IACH6I,EAAMgF,EAAK/Q,IAAMkD,aAEdoG,EACHxI,EAAIiQ,EAAK9Q,OAAOoB,IAAImQ,QAAUtO,YAK/B,eACK6N,EAAKzQ,UACN,UACHuT,OAA2BtL,IAApBuJ,GAAS/F,aAEb,UACH8H,EAAO/B,GAAS/F,KAAW1E,EAAQvG,EAAIiQ,EAAK9K,MAAM5E,eVpR1C,SU8RZwS,GAAQQ,GAAOL,EAAOjD,EAAMhF,aAEzB,SAECkI,IAAUf,GV5SF,WU4SS5S,EAAiB,CACpC2S,GAASgB,EAAOlI,EV7SN,mBU8SDgI,MAER,UACHpH,GAA4B,UAAlByC,EAAMjP,KAAKmM,GACrBP,EAAM7I,MAAQmR,GAAOL,EAAOjD,EAAMhF,GAClCY,GAAUmH,EAAiBnH,QAG/BiH,EAAOI,EAAMxI,MAAQqI,MAElBD,MACE,IAAIK,EAAQ,EAAGA,EAAQ7E,EAAM7N,KAAKP,OAAQiT,IAC7CjB,GACE,QACApP,EACAwL,EAAM7N,KAAK0S,GACXlI,EACA+F,GAAS/F,GACTW,GAAYX,IAKpBwH,GAASO,EAAiBP,OAC1B5P,GAAcmQ,EAAiBnQ,YAC/BU,GAAWqI,GAAYoH,GA6BvBQ,IAIID,GAAS,SAACL,IAAyBjI,OAAVnJ,IAAAA,cAEpBA,EAAGkP,GAAS/F,GAAQiI,EAAM9T,MAAO6L,GACxC,MAAOK,GACPmI,QAAQ9I,MAAMW,GACd4H,EAAMxI,KAAO,IT3WJgJ,GAAW,SAACxS,EAAWyS,SAAgB,GAAKzS,EAAKQ,UAAYiS,GAE7D1P,GAAU,SAAC/C,EAAWH,UACzB,MAARA,EAAe2S,GAASxS,EAAM,QAAUH,GqBJ7B+H,GAAkB,SAC7B8K,EACA9R,GAEA4N,EAAakE,GACT9C,GAAgB8C,IAClB9R,EAAG8O,GAAUgD,GAAY9C,GAAgB8C,KAIhCrH,GAAsB,SAAC5J,OAC9B8J,SACJ3D,GAAgBnG,EAAK,IAAI,SAACkR,EAAU/P,GAClC2I,EAAWoH,EACXlR,EAAOmB,KAEF,CAACnB,EAAM8J,IpBnBHqH,GAAQ,SAACzK,EAAUrH,OACzB,IAAMf,KAAOoI,EAChBrH,EAAGqH,EAAIpI,GAAMA,IAIJ8G,GAAW,SAAClG,EAAa1B,UAAc0B,EAAKkG,SAAS5H,IAErD4O,GAAa,SAAClN,EAAa1B,OAChC4T,EAAMlS,EAAKmS,QAAQ7T,IACZ,IAAT4T,GACFlS,EAAKoS,OAAOF,EAAK,IqBLfG,GAAiB,SAACC,EAAoBC,GAC1CrF,GAAWoF,EAAY1T,KAAM2T,GAC7BrF,GAAWrO,GAAUyT,GAAcC,GACnCrF,GAAWpO,GAASwT,GAAcC,IAE9BC,GAAsB,SAAtBA,EACJD,EACAE,EACAC,OAMIJ,EAJJC,EAAW3T,KAAKP,OAAS,EACzBkU,EAAWrU,IAAIG,OAAS,EAExBkU,EAAWhV,MAAQ,aAEfyC,EAAOlB,GAASyT,GACZD,EAActS,EAAK2S,OACzBN,GAAeC,EAAaC,IAE1BE,GACCC,IAAiBH,EAAW/U,KAAK+M,QvBrBf,cuBsBnB+H,EAAY7U,OAAOE,OAEnB6U,EACEF,EACAG,EACwB,OAAxBH,EAAY9U,KAAKmM,IAAe+I,OAItC1S,EAAOnB,GAAU0T,GACTD,EAActS,EAAK2S,OACzBN,GAAeC,EAAaC,GACxBG,GvBlCiB,cuBkCDJ,EAAY7U,OAAOE,MACrC6U,EACEF,EACAG,EACwB,OAAxBH,EAAY9U,KAAKmM,IAAe+I,IAKlCE,GAAW,SAAC5Q,UAAaA,EAAI6Q,SACtBC,GAAY,SACvBtR,SAEEiR,cAGE,MAHFA,KAKEC,EAAe,KAEflR,EAASuR,UAAUvR,EAASuR,SAASvN,OAAOhE,GAC5ClC,EAASkC,GACXoR,GAASpP,GAAehC,SACnB,GAAIlC,EAAUkC,GAAW,CAC9BkR,EAAe,MAETM,EAAUxR,EAASwR,QACzBJ,GAASI,EAAQ7N,QACjByN,GAASI,EAAQC,SACjBL,GAASI,EAAQhM,QACjB4L,GAASI,EAAQE,SAEnBV,GAAoBnS,GAASmB,KAAaiR,EAAMC,ICnErChP,GAAqB,SAACxG,OAC3BuB,EAASwP,EAAM6E,GAAW5V,OAAM0I,UACtCnH,EAAO0U,YAAc1U,EACdA,GrBIIwE,GAAc,SAAC5D,UACtBiB,IAAauG,GAAIsI,GAAS7O,IAAc,CAACjB,IACtCA,GAGLiB,GAAkC,KAEzBG,GAAe,kBAAMH,IAAeA,GAAYE,UAChD4S,GAAc,SAAC5I,UACtBA,GAAOlK,IAAeA,GAAYI,UACpC8J,EAASlK,GAAYI,YAAW8J,GAC3BA,GsBfIU,GAAiB,SAC5B/N,EACAC,YAWA6F,GACEhG,EAAW,CACTC,OAXFA,KAYEC,OAAAA,EACAC,MAAAA,EACAG,QAbFA,MAcEC,OAbFA,KAcEC,OAAQ,CACNQ,OAAQ,CAACd,EAAQC,GACjBY,MAAOZ,OAIFiW,GAAU,SAACrE,OAKlB/M,EACJgF,GAAgB+H,GAAM,SAAC9H,EAAcC,GACnClF,EAASiF,EACT8H,EAAO7H,SAEFrJ,EAAoCkR,EAApClR,KAAMT,EAA8B2R,EAA9B3R,KAA8B2R,EAA1BxR,KAAAA,aAAO,CAACmM,GAAI,oBACxB7L,GAAST,GAAIoJ,EAAW,wCACzBxE,IAAQzE,EAAKyE,OAASA,GACnByB,GACLT,GACEhG,EAAW,CACTE,OAAQW,EACRV,MAAOC,EACPG,KAAAA,EACAC,OAAQ,QCzCHsE,GAAY,SACvB1C,EACA0H,MAEKP,EAAWO,IAAUN,EAAW,wCACjC/E,GAAU,KACN4R,EAAa5R,GAASmD,QAAQxE,GAAShB,GAAMX,IAC/C4U,IAAYjU,EAAOiU,UAElB5P,GACLT,GACEhG,EAAW,CACTM,MAAO,CAAC0C,GAAI8G,GACZ7J,KAAM,CAACuF,EAAS,CAACxC,GAAIyC,MACrBvF,OAAQkC,EACR7B,KAAM,CAACmM,GAAI,SACXlM,OAAQ,CACNQ,OAAQoB,QtBIZkU,GAAkB,SAAlBA,EAAmBC,EAAWvR,UAC9BC,EAASsR,KACXD,EAAgBxE,GAAUyE,GAAOvR,GAChB,MAAbuR,EAAKtU,OACHgD,EAASsR,EAAKtU,MAAOqU,EAAgBC,EAAKtU,KAAM+C,GAC3CuE,EAAWgN,EAAKtU,MAAO+C,EAAO8E,QAAUyM,EAAKtU,KACjD+C,EAAO/C,KAAOsU,EAAKtU,MAEtBsU,EAAKC,MAAKxR,EAAOwR,IAAMD,EAAKC,MAC5BD,EAAKhJ,KAAoB,OAAbgJ,EAAKhJ,OAAcvI,EAAOuI,IAAMgJ,EAAKhJ,KACjDgJ,EAAKzM,UAAS9E,EAAO8E,QAAUyM,EAAKzM,SACpCpG,GAAU6S,KAAOvR,EAAO9E,OAASwD,GAAU6S,IAC3C,WAAYA,IAAMvR,EAAO6D,OAAS0N,EAAK1N,QACvC0N,EAAK7K,QAAO1G,EAAO0G,MAAQ6K,EAAK7K,OACpC4K,EAAgBtE,GAAgBuE,GAAOvR,IAElCA,GAGIe,GAAkB,SAC7BjF,EACAT,EACAoW,YAAAA,IAAAA,EJrDmB,SIuDf/S,GAAU5C,IAAS4C,GAAU5C,GAAQ4V,MAAMD,GAAUpW,IAI9CmE,GAAW,SACtB6G,EACAjJ,EACAuU,EACAC,OAEM5R,EAASsR,GACb,CACErU,KAAM2U,EACN5R,OAAQ2R,GAEV,IAEIE,EJtEc,WIsEHxL,EACX5J,EAAKqP,MACoD9L,EAA1D9E,OAAAA,aAAS,SAAiD8E,EAA3CuI,IAAAA,aAAM,SAAqCvI,EAA/B6D,OAAAA,aAAS,MAAsB7D,EAAhB0G,MAAAA,aAAQ,OACjDzJ,EAAOyJ,GAAgB1G,EAAO/C,OAAS4U,EAAW,GAAKpV,GACvDa,EAAgBG,EAAWR,EAAM/B,GAEjCK,EAA4B,CAChC6B,KAAMA,EAAKiJ,KAAOA,EAClBpJ,KAAMG,EAAKQ,UAAYX,EACvBsL,IAAKnL,EAAKmL,IAAM4I,GAAY5I,GAC5B7B,MAAAA,EACAoL,OAAQ1U,EAAKX,GAAKA,MAEpBW,EAAKlC,OAASA,EACdkC,EAAKE,cAAgBA,EACrBF,EAAK8I,cAAgBlG,EACrB5C,EAAK2U,KAAO,SAAC/T,UAAiBA,EAAGZ,IACjCA,EAAK+I,QAAU,kBAAM7I,EAAcC,WAC9BsU,EAAU,CACbzU,EAAK4U,UAAY,SAACC,UAChBrG,EAAaqG,GACN7U,EAAKwC,MACV2E,EAAW0N,GACPA,EACA,SAACpK,GACKoK,EAAStV,MACXsV,EAAStV,KAAKkL,MAK1BzK,EAAKiO,GAAoB,kBAAMjO,OACzBmB,EAAWC,KACbD,IAAUhD,EAAKwN,eAAiBxK,UAEtCoG,GAAWd,EACJtI,GAEIwG,GAAmB,SAAC2E,UAAkBvH,EAAY,CAACuH,MAAAA,KAE1DtG,GAAoB,SAACvE,EAAWT,EAASsM,EAAS1J,UACtDiL,GAAepN,EAAMT,EAAI,CACvBE,MAAO,CAAC0C,GAAAA,GACR/C,KAAM,CAACuF,EAAa,CAACxC,GAAIyC,MACzBlF,KAAM,CAACmM,GAAAA,MAGLnH,GAAwB,SAACjB,EAAYoI,EAAY1J,EAAS/C,OAC1D+E,EACAC,EAASjC,KACXgC,EAAShC,EACTA,EAAKA,EAAGA,QAEJkC,EAASf,EAAYyQ,GAAStQ,EAAO,SAAUU,UACrDiJ,GAAe3J,EAAOY,EAAQ,CAC5B5E,MAAO,CAAC0C,GAAAA,GACR/C,KAAAA,EACAM,KAAM,CAACmM,GAAAA,KAEFxH,GAwOHwB,GAAc,SAClB7F,EACAwF,EACAqG,EACAwK,EACAlU,OAEMmU,EAAWpO,GAAc1C,GACzBpG,EAAO,CACXuF,EAAS,CAACa,MAAO8Q,EAAU/W,GJxWV,MIyWjBoF,EAAa,CACXxC,GAAIkU,EAAa9I,EAAgBK,IAEnCjJ,EAAWG,UACXH,EAAWiE,QAAQ,CAACpD,MAAO8Q,IAC3B3R,EAAY,CAACa,MAAO8Q,KAEhB5T,EAAWC,QACbD,IACFtD,EAAKkJ,QAAQ5F,EAAS2F,QACtBjJ,EAAKqB,KAAKiC,EAASuC,QACfzD,EAASxB,IAAO,KACZuW,EAAMrO,GAAclI,GACrBoI,GAAS1F,EAAS0D,MAAOmQ,KAIvBnO,GAAS1F,EAAS8K,QAAS+I,IAC9B7T,EAAS8K,QAAQ/M,KAAK8V,GAEnBD,EAASnO,SAAQmO,EAASnO,OAAS,IACxCmO,EAASnO,OAAO1H,KAAK,CACnBZ,KAAM,UACN4I,GAAI8N,YASLnJ,GAAepN,EAAMwF,EAAO,CACjC/F,MAAO,CAAC0C,GAAAA,GACR/C,KAAAA,EACAM,KAAM,CAACmM,GAAAA,MC5ULlC,GAAa,SAACxH,UAAiB,SAACD,UAAgBC,eAAMD,KAEtD0H,GAAmB,SACvBrC,EACAmC,EACAvF,EACAhC,OAEMqU,EAAQjP,EAAU,SAACrF,UAAcA,EAAKuH,SAAU,SAACC,2BAAkBA,IACnErE,EAAoBkC,EAAU,GAAK,GACnC7E,EAAWC,KACX8T,EAAWD,EAAMnR,GACjBqR,EAAW3Q,EAAe0Q,GAC1BE,EAAU5Q,EAAe,GAC/B2Q,EAAS7W,KAAO0H,EAAU,OAAS,QAC/B7E,GACFA,EAAS0D,MAAM3F,KAAKiW,EAAUC,OAE1BnR,EAAQJ,EAAYqR,EAAU,CAClCrV,KAAM+C,GAAkBlD,EAAeyI,KAEnCtK,EAAO,CACXuF,EAAWG,UACXH,EAAS,CACPa,MAAOkR,EACPnX,GLzFe,MK4FjBoF,EAAY,CACVxC,GAAI,SAAC6J,cAAoBA,MAAPgF,IAAP1P,QAEbqD,EAAS,CACPa,MAAOmR,EACPpX,GAAI,MAENoF,EAAa,CACXxC,YAAG6J,IAAmB3L,OAANiB,IAAAA,IACVjB,EAAIuR,IACNvR,EAAI2Q,GAAIwF,IAFHA,OAESnW,EAAI2Q,IAEpB3Q,EAAI2Q,EAAE1P,GAAO0K,KAGjBrH,EAAS,CACP3E,KL5Ge,IK6GfR,OAAQkX,IAEV/R,EAAS,CACP3E,KLpHe,QKqHfwF,MAAO,EACPhG,OAAQmX,IAEVhS,EAAa,CAAC0I,SLzHK,YK0HnB1I,EAAS,CACP3E,KL1He,QK2HfwF,MAAO,EACPhG,OAAQmX,IAEVhS,EAAS,CAACa,MAAOkR,IACjBvU,GAAMwC,EAAa,CAACxC,GAAAA,IACpBwC,EAAWiE,QAAQ,CACjBpD,MAAO0C,GAAc1C,MAGnB2C,EAAiBuO,EAASvO,OAAS,UACzCgM,GAAMzK,GAAK,SAACpK,EAAOgC,MACZE,EAASlC,IAId+F,EAAa/D,GAAOhC,EAAM+F,aAC1BoR,EAASnV,GAAOhC,EAAMmH,eAChBwB,EAAWmF,GAAe9N,EAAOkG,EAAO,CAC5C/F,MAAO,CAAC6B,IAAAA,EAAKkV,MAAAA,GACbpX,KAAAA,EACAM,KAAM,CAACmM,GAAI,aAEP+K,EAAW1O,GAAc5I,GAC/B6I,EAAO1H,KAAK,CACVZ,KAAM,QACNgX,MAAOvV,EACPtB,KAAM4W,IAEJlU,IACG0F,GAAS1F,EAAS0D,MAAOwQ,IAC5B3O,EAAS7H,IAAIkI,QAAQ5F,EAAS2F,cAlBhCoO,EAASnV,GAAO+D,EAAa/D,GAAOhC,KAuBxCkG,EAAMsR,aAAepN,EACrBgN,EAASvQ,MAAQ,CACfhE,EACI,CACEtC,KAAM2E,EACNjF,GAAI2I,GAAc1C,GAClBrD,GAAAA,GAEF,CACEtC,KAAM,OACNN,GAAI2I,GAAc1C,KAGrB9C,IACH8C,EAAMH,aAAelD,EAChB+F,GAAc1C,GAAOuL,QAAU5O,EAAGsU,GACnCpR,GAECG,GE3BIgG,GAAY,gBACvBxE,IAAAA,OACA8C,IAAAA,IACA2B,IAAAA,GACAf,IAAAA,OACAY,IAAAA,aAUI,SAACgF,UACLxM,GAAO,CACLtE,OAAQ,CAACkL,EAAQqM,IACjB/P,OAAQ,CACNyE,EACI,CACEX,OAAQ,OACR9D,OAAAA,EACArG,OAAQ2P,GAEV,CACExF,OAAQ,OACR9D,OAAAA,EACAgE,MAAOsF,GAEb,CACEnO,GAAIsJ,EAAK3B,EAAIE,GAAKF,EAAIG,GACtBxH,MAAO6N,IAGXrJ,MAAO,EACP9D,KAAMmI,EAAMnI,KACZS,SAAUqI,GAAYX,OAGpByL,GAAY5X,EAAW,CAC3BC,KAAM,CACJuF,EAAS,CACPxC,gBACEA,IADEA,MAAIM,WAKZ/C,KAAM,CAACmM,GAAI,KAAMC,GAAI,eoB7LjBkL,GAAa,SAACC,EAAqBC,EAAe9X,UACtD6X,EAAQlT,OAAM,SAAAuM,GACZvH,GAAI3J,EAAM,CAACkR,IACX4G,EAAIvD,IAAIrD,GACHA,EAAK2E,WAAU3E,EAAK2E,SAAWiC,GAC/BrU,GAAUyN,KAAOA,EAAKjR,OAASD,MAEtC2J,GAAI3J,EAAM,CAAC6X,IACJ,SAACE,UACND,EAAIjV,QAAQkV,GACLF,EAAQlT,MAAMoT,wBlBgWlB,SACLC,SACC3X,IAAAA,MAAe4X,IAARrQ,WAEHxF,EAAQ4V,GACX,OAAOrN,QAAQuN,OAAOxH,MAAM,sCACxB7I,EAAQ4C,IAEd5C,EAAMsQ,WAAa3T,OACZ4T,EAAuB/X,EAAMiE,SAASjE,MAAtC+X,oBACPA,EAAoB/X,MAAMgY,OAAOhX,KAAKwG,OAGhCyQ,EAAc,CAFCjY,EAAMoE,KAAKuT,IAG1BO,EAAe,UACjBnW,EAAU4V,GACZO,EAAalX,KAAK,CAChBuG,OAAQqQ,EACRvN,IAAK,CACHE,YAAGvH,GAEDwE,EAAMxE,MAAQ,CAACqI,OAAQ,OAAQrI,MAAAA,IAEjCwH,YAAGxH,GAEDwE,EAAMxE,MAAQ,CAACqI,OAAQ,OAAQrI,MAAAA,OAKrCkV,EAAalX,KAAK4W,GAEpBK,EAAYjX,KAAK+W,GACjBG,EAAalX,KAAK,MAClBqD,GAAO,CACLtE,OAAQkY,EACR1Q,OAAQ2Q,EACR/T,SAAUnE,IAELwH,EAAM6C,oBmBtZR,SAAgB3F,SACjB+P,EACJ/K,GAAgBhF,GAAQ,SAACiF,EAAcC,GACrC6K,EAAW9K,EACXjF,EAASkF,SAENpJ,EAA6BkE,EAA7BlE,OAAQ0P,EAAqBxL,EAArBwL,OAAQiI,EAAazT,EAAbyT,UAChBA,IACHA,EAAY3X,EACR,SAAC4X,EAAQ5X,UAAgBA,GACzB,SAAC+G,UAAgBA,QAInB8Q,EAHEC,EAAW5N,EAAahG,EAAQ+P,GAC/BnI,EAAUxJ,GAASwV,GAAUtY,MAA7BsM,OAGDiM,EAAW,aAGf1M,OASI2M,EAXHjR,IAAAA,OAAQ8C,IAAAA,IACCY,IAATC,QAAiBgF,IAAAA,OAGZ1F,EAAKuB,GAAU,CACnBxE,OAAAA,EACA8C,IAAAA,EACA2B,GAAI,EACJf,OAAAA,EACAY,MAAAA,QAIA2M,EAAiBL,EAAU5Q,EAAQsE,EAAM0F,GACzC,MAAOrF,UACA1B,EAAG0B,GAEZ7H,GAAO,CACLtE,OAAQmQ,EACR3I,OAAQ,CACNA,OAAQiR,EACRnO,IAAK,CACHE,GAAIwB,GAAU,CACZxE,OAAAA,EACA8C,IAAAA,EACA2B,GAAI,EACJf,OAAAA,EACAY,MAAAA,IAEFrB,GAAAA,IAGJ9G,KAAMmI,EAAMnI,KACZ8D,MAAO,QAGPhH,EAAQ,KACN6G,EACAtF,EAASvB,GAAS6G,EAAQ7G,GAE5B6G,EAAQkC,EAAQ/I,GAChB8I,GAAIgP,EAAU,CAACjR,SAEXoR,EAAevT,EAAS,CAC5B3E,KAAM6I,EACNrD,MAAO0C,GAAcpB,GACrBvH,G5B7De,M4B+DjBuY,EAAc,CAEZnT,EAAS,CAACxC,GAAI,SAAA0V,UAAKA,KAEnBK,EAEAvT,EAAa,CAACxC,GAAI6V,KAEpBtX,GAASwX,EAAcnM,EAAO1L,UAE9ByX,EAAc,CAACnT,EAAS,CAACxC,GAAI6V,YAE/BjM,EAAOtM,MAAMkQ,OAASA,EACtB5D,EAAOrM,KAAK6K,OAAO9J,K5BvFC,a4BwFpBsL,EAAO3L,KAAIkU,gBAAO,EAAG,UAAMwD,IAC3B5S,GAAgByK,EAAQoI,E5BzFJ,U4B0FbA,4DCtFF,sCAAsB/U,2BAAAA,wBACQ4J,GAAoB5J,UAAjDwC,OAAO2S,OAAUrL,OACjBnM,EAAqC,UAC3CwT,GAAMgE,GAAS,SAAChW,EAAIb,OACZmC,EAAS9C,EAAOW,GAAOgC,EAAYhC,EAAK,CAC5CjC,OAAQwD,GAAU2C,GAClBrB,OAAQ2I,IAEVtH,EAAM4B,GAAG3D,EAAOtB,GAChB+C,GAAgBM,EAAO/B,MAElB9C,wBFcF,SAASyX,EAAa7U,EAAmBC,OACxC4R,EAAuB,IAAItG,IAC3B5F,EAA0B,IAAI4F,IAC9BqG,EAAsC,IAAIrG,IAC1CzH,EAA0B,IAAIyH,IAE9B1P,EAAOD,EAAW,CACtBQ,OAAQ,CAACE,K3BnCS,Y2BsCdc,EAAc,CAClBuU,QAAS,CACPE,QAAAA,EACAlM,OAAAA,EACAiM,QAAAA,EACA9N,OAAAA,GAEF3D,SAAUtE,GAGZA,EAAKM,KAAOiE,G3BhDQ,S2BgDShD,EAAQ6C,EAAaD,SACX,CACrC,UACA,WACA,UACA,YACAW,IAAIgC,IALCzC,OAAOkM,OAAQnK,OAAOoK,OAO7BjP,EAAOkV,MAAQ,CACbpS,MAAAA,EACAkM,OAAAA,EACAnK,MAAAA,EACAoK,OAAAA,GAEFjP,EAAO0X,cAAgBrB,GAAWvT,EAAO4D,EAAQ1G,GACjDA,EAAO2X,eAAiBtB,GAAWrH,EAAQwF,EAASxU,GACpDA,EAAO4X,cAAgBvB,GAAWxR,EAAO0D,EAAQvI,GACjDA,EAAO6X,eAAiBxB,GAAWpH,EAAQwF,EAASzU,GAEpDA,EAAO2C,YAAc3C,EAAO8C,MAAQ,SAACF,EAAmBY,UACtDV,EACEH,EAAYC,EAAc,CACxBlE,OAAQsB,EACRwD,OAAAA,MAGNxD,EAAOwJ,aAAexJ,EAAOgP,OAAS,SAACpM,EAAmBY,UACxDwL,EACExF,EAAa5G,EAAc,CACzBlE,OAAQsB,EACRwD,OAAAA,MAGNxD,EAAOyX,aAAezX,EAAOiP,OAAS,SAACrM,EAAmBY,UACxDiU,EAAa,CACXhX,KAAMmC,EACNlE,OAAQsB,EACRwD,OAAAA,KAEJxD,EAAOyE,YAAczE,EAAO6E,MAAQ,SAACsB,EAAY3C,UAC/CqB,EACEJ,EAAY0B,EAAO,CACjBzH,OAAQsB,EACRwD,OAAAA,MAGNgB,GAAYxE,OACNtB,EAASwD,GAAUlC,UACrBtB,IACF8U,GAAMxT,EAAOkV,OAAO,SAAC7V,EAAMsB,GACzBiU,GAAQ,CAACvV,KAAAA,EAAMT,GAAIF,EAAOwW,MAAMvU,QAElCjC,EAAOwW,MAAMjG,OAAOjP,IAEfA,oIlB2HF,SACLiP,sBACqD,KAApD3B,IAAAA,OAAQwK,IAAAA,SAEJjX,EAAUoO,IAASjH,EAAW,+CAC7B+P,IAAezK,EACrBA,EAASG,EAAgBH,GAAU,QAC7B0K,EAsMR,SAAoBpX,YA2ITqX,EAAUrX,OACXnC,EAAOmD,GAAShB,GAChBsX,EAAQ3W,EAAKmS,QAAQjV,OACZ,IAAXyZ,EAAc,KACZC,EAAW,OACXvX,IAASnC,GAAQmC,EAAKX,KAAOW,EAAKQ,YAAW+W,EAAWvX,EAAKQ,WACjE4G,EAAcmQ,uCAETC,EAAOF,OAlJV3W,EAAOmN,EAAU9N,GACjByX,EAAO,IAAIzS,IAMX0S,EAAiBtU,EAAa,CAClCxC,YAAGmO,EAAMuH,EAAGvM,UACVc,GAAYH,GAAYX,IACjBgF,KAGLkH,EAAsBrY,EAAW,CACrCM,MAZY,CACZgY,OAAQ,GACRpL,SAAU,EACV6M,KAAM,GAUN9Z,KAAM,CACJuF,EAAa,CACXxC,YAAG0V,EAAGpY,EAAO6L,GACNA,EAAMjM,OAI0B,YAAjCiM,EAAMjM,OAAOD,KAAKM,KAAKmL,MACzBpL,EAAM4M,UAAY,GAElB5M,EAAM4M,UAAY,EAClB5M,EAAMyZ,MAAQ,GAPdzZ,EAAMyZ,MAAQ,KAWpBvU,EAAa,CAAC0I,ST5cG,YS6cjB1I,EAAS,CACPxC,YAAG0V,EAAGpY,OACagY,EAAgBhY,EAAhBgY,OAAQyB,EAAQzZ,EAARyZ,KAAQzZ,EAA1B4M,SACQ,GAAuB,IAAlBoL,EAAOlX,QAC3BwJ,QAAQoP,UAAUvN,MAAK,WACjBnM,EAAMyZ,OAASA,GACnBjX,EAAQwV,EAAOnD,OAAO,EAAGmD,EAAOlX,SAAS,SAAC0G,GACxCmF,GAAYnF,EAAMsQ,YAClBtQ,EAAM+C,GAAG/C,EAAMxE,iBAMzB/C,KAAM,CAAC6B,KTrdiB,yBSudpBwF,EAAU,GACVqS,EAAS,GACTL,EAAS7W,EAAKgC,KAAI,SAAA9E,OACV0B,EAAqB1B,EAArB0B,KAAMpB,EAAeN,EAAfM,KAAMD,EAASL,EAATK,MAClBkB,EAASxB,EAAW,CACxBC,KAF+BA,EAA1BgB,IAEK8D,KAAI,SAAAS,SAAS,CACrB/D,GAAI+D,EAAK/D,GACTf,KAAM8E,EAAK9E,KACXyQ,sBAAU3L,EAAK2L,MACfD,OAAQ1L,EAAK0L,WAEf/Q,gBAAWwB,GACXpB,oBAAO2Z,OAAQja,GAASM,GACxBD,uBAAWA,YAEbkB,EAAOhB,OAAS,CACdE,KAAMT,EAAKO,OAAOE,KAClBK,gBAAWc,GAAS5B,IACpBe,iBAAYY,GAAU3B,KAExB2H,EAAQ3H,EAAKwB,IAAMD,EACfjB,EAAKgN,MAAK0M,EAAO1Z,EAAKgN,KAAO/L,GAC1BA,KAEHwC,EAAO,UACblB,EAAQ8W,GAAQ,SAAA3Z,OAEZiB,EAGEjB,EAHFiB,IACAZ,EAEEL,EAFFK,QAEEL,EADFM,KAAO6K,IAAAA,OAAQsB,IAAAA,GAAItK,IAAAA,SAEhB,IAAMX,KAAMP,EAAK,KACdkW,EAAMlW,EAAIO,GACZ0Y,EAASN,EAAKvR,IAAI8O,GACjB+C,GAKHN,EAAKrT,IAAI4Q,EAJT+C,EAAS,CACP1Y,GAAI2V,EAAI3V,GACRmQ,QAASwF,EAAIxF,UAIjB5N,EAAKvC,GAAMP,EAAIO,GAAM0Y,KAEnB/O,MACG,IAAIgP,EAAI,EAAGA,EAAIhP,EAAOhK,OAAQgZ,IACjC9Z,EAAM8K,EAAOgP,IAAMX,EAAUnZ,EAAM8K,EAAOgP,YAG9ChK,EAAmBnQ,GAAM,SAACA,EAAMkB,EAAGkZ,GACjCA,EAASlZ,GAAKsY,EAAUxZ,MAEVyM,GAAMtK,QAEfsH,EACHzJ,EAAKM,KAAK+Z,QAiDlB,SAAmBra,SACV,CACLoL,KAAM3B,EACNpC,SAAU,kBAAMrH,EAAKiB,IAAIjB,EAAKK,MAAMqH,MAAMlG,IAAImQ,SAC9C9K,QAAS,CACPlC,MAAOC,EAAKC,GAAW7E,IAEzBsE,SAAUtE,EACVO,OAAQP,EAAKO,QAzDW+Z,CAAUta,aTthBjB,QSyhBbA,EAAKgB,IAAIkI,QAAQ2Q,aTxhBH,SS2hBd7Z,EAAK0B,KAAKL,KAAK+W,GACfpY,EAAKgB,IAAIkI,QAAQ2Q,aAEd,KACHxZ,EAAMkL,QAAQ7J,KAAKL,KAAK+W,GACxBpY,EAAKgB,IAAIkI,QAAQ2Q,aAGd,QACH7Z,EAAKgB,IAAIkI,QAAQ2Q,OAKhB,CACLU,QAASpY,EACTwF,QAAAA,EACAqS,OAAAA,EACAL,OAAAA,EACAlV,KAAM+U,EACNvY,IAAK8C,EACLsD,SAAU,SAACjB,UAAeoT,EAAUpT,GAAO9F,KAAK+Z,QAAQhT,YACxD/C,SAAUvE,EAAW,CACnBQ,OAAQ,CACNE,KTljBc,SSmjBdK,OAAQsX,UAAwBuB,IAElCrZ,KAAM,CAAC6B,KAAM,QACb9B,MAAO,CAAC+X,oBAAAA,MA9UGoC,CAAWhK,MACtB8I,wBAeImB,EAAaxK,EAAUO,GACvBkK,EAAgB,GAChBhM,EAAU,GACViM,EAAiB,IAAIjL,IACrBkL,EAAoB,IAAIlL,IACxBmL,EAAgBjM,OAAOkM,oBAAoBjM,OACvB4L,kBAAY,eAA1BxZ,IAAAA,IACH6M,IADQxN,KACRwN,mBACF,IAAMtM,KAAMP,EACfyZ,EAAclZ,GAAMP,EAAIO,GACpBsM,GACF8M,EAAkBrG,IAAI/S,iBAIT+X,EAAOI,uBAAQ,KAAvB3Z,UACFiB,EAAOjB,EAAPiB,MACajB,EAAKM,KAAZgN,IAAAA,SAANnL,OACMsH,GACP6D,GAAOtE,GAAS6R,EAAevN,GAAM,KAChC5F,EAAS1H,EAAKK,MAAdqH,MACPzG,EAAIyG,EAAMlG,IAAImQ,QAAU9C,EAAOvB,GAC/BqN,EAAepG,IAAI7M,OAGlB,IAAMlG,KAAMP,EACfyN,EAAQlN,GAAMP,EAAIO,GAKtBqB,EADeoM,EADER,EAAeiM,GACEE,IAClB,SAAApZ,aAIC2V,EAAepJ,OAC1BwJ,EAAU,KACVxJ,GAAaA,EAAUhF,SAAW4R,EAAerG,IAAI6C,iBACrCpJ,EAAUhF,uBAAQ,KAAzBgG,iBACDA,EAAItO,WACL2E,EAEH+R,EAAIxF,QAAU5C,EAAIhM,GADL2L,EAAQK,EAAInO,KAAKY,IACJmQ,mBAGvB,YACG/Q,EAAO8N,EAAQK,EAAInO,KAAKY,IACzB+V,IACHA,EAAU,EAERJ,EAAIxF,QADFzJ,MAAMC,QAAQgP,EAAIxF,mBACFwF,EAAIxF,0BAEJwF,EAAIxF,UAG1BwF,EAAIxF,QAAQ5C,EAAI0I,OAAS7W,EAAK+Q,YAQjC5D,GAAcA,EAAUhH,gBACvB1D,EAAQ8T,EAAIxF,YACA5D,EAAUhH,sBAAO,KAAxBgI,UACH5O,EAAKuO,EAAQK,EAAI5O,GAAGqB,WAElBuN,EAAItO,UACL,OACHN,EAAGwR,QAAUtO,aAEV+B,EACHjF,EAAGwR,QAAU5C,EAAIhM,GAAGM,MAzC1B0X,CAAQrM,EAAQlN,GAAKkZ,EAAclZ,OA9CrCwZ,GAEE3B,EAAU,CACZA,EAAWrK,EAAgBqK,aACrB4B,EAAcrM,OAAOsM,KAAK7B,8BACpBhZ,IAAAA,MAAOC,IAAAA,KACbA,EAAKgN,KAAOtE,GAASiS,EAAa3a,EAAKgN,OACzCjN,EAAMsM,OAAOtM,MAAM2L,WAAa,kBAAMqN,EAAS/Y,EAAKgN,YAF5BiM,EAAOI,kCAM9BJ,6CqBhPF,SAA2BjJ,GAChCK,EAAaL,OACP6K,EACJ/K,KAAoBE,EAAaA,EAAWF,KAAsBE,EAC/D6K,EAAepE,WAClBxN,EAAW,4CACPlF,EAAQH,IACRkX,EAAWrK,EAAM6E,GAAWvR,OAAOqE,UACzCyS,EAAepE,UAAU,CACvBrV,KAAM2C,EACNuH,MAAOwP,EACPC,SAAUD,IAEL/W,iBCTF,mBACC/D,EAA4B,CAACmM,GAAI,SACnC6O,EAAU,2BAFS1X,2BAAAA,wBAGY4J,GAAoB5J,UAAjD/C,OAAQkE,OAAS2I,OACnBA,IACFpN,EAAKyE,OAAS2I,EACVA,EAAS1L,OAAMsZ,EAAU5N,EAAS1L,OAEnC+C,IAEHlE,GADAkE,EAASlE,GACOA,cAEuBkE,EAAlCM,IAAAA,OAAQkI,IAAAA,WAAQvL,KAAAA,aAAOsZ,IACxBlb,EAAS2E,EAAO3E,QAAU8D,EAAYlC,EAAM1B,EAAKyE,eAClD3C,EAAQvB,KAASA,EAAS+I,EAAQ/I,IAEnCuB,EAAQiD,GACVgI,EAAO,CACLxM,OAAQwE,EACRoI,MAAO5M,EACPT,OAAQ2F,GACNhG,EAAW,CACTC,KAAM,CACJuF,EAAY,CACVxC,GAAI,qBAAEwY,SAERhW,EAAa,CACXxC,GAAI,qBAAEmO,SAGVhR,MAAOE,EACPE,KAAAA,EACAC,OAAQ,CACNQ,OAAQ,CAACF,EAAQwE,EAAQjF,GACzBU,MAAOV,MAIb2C,GAAI,SAACwY,EAAYrK,SAAe,CAACqK,MAAAA,EAAOrK,KAAAA,IACxC3D,OAAAA,EACAvL,KAAAA,KAGGsH,EAAWjE,IAASkE,EAAW,uCACpCyE,GAAenN,EAAQT,EAAQ,CAC7BC,MAAO,CAAC0C,GAAIsC,GACZrF,KAAM,CAACuF,EAAY,CAACxC,GAAIyC,MACxBlF,KAAAA,KAGGF,mBtBvCF,SAAiBoQ,SAAiB3B,IAAAA,OACjC2M,EAAUxW,EAASwL,IAAYA,EAAe+J,QAC/CnY,EAAUoO,IAAYgL,GACzBjS,EAAW,uDAERvE,EAAS6J,IACZtF,EAAW,2CAGTkS,EACAC,EAFEC,EAAmB3M,EAAgBH,MAGrC2M,EACFC,EAAe,GACfC,EAAmB,GACnB3G,GAAM4G,GAAkB,SAACzJ,EAAK5E,OAEtBtN,EAAOwQ,EAAOwJ,OAAO1M,GACvBtN,IACFyb,EAAapa,KAAKrB,GAClB0b,EAAiBra,KAAK6Q,WAGrB,KACC0J,EAgBV,sBACEC,IAAAA,eACAhN,IAAAA,OACAiN,IAAAA,eAMML,EAAe,GACfC,EAAmB,GACnBhN,EAAU,GACViM,EAAiB,IAAIjL,IACrBmL,EAAgBjM,OAAOkM,oBAAoBjM,OAC9BgN,kBAAgB,KAAxB7b,UACFiB,EAAOjB,EAAPiB,MACiBjB,EAAKM,KAAtBmM,IAAAA,GAAUa,IAAAA,SAANnL,OACEsH,GACP6D,GAAOtE,GAAS6R,EAAevN,GAAM,KAChC5F,EAAS1H,EAAKK,MAAdqH,MACPA,EAAMiK,QAAU9C,EAAOvB,GACvBqN,EAAepG,IAAI7M,MAGnBoU,GAAyB,UAAPrP,EAAgB,KAC9B2F,EAAQpS,EAAKO,OAAOQ,OAAO,GAC7BqR,EAAM9R,KAAK6B,OAASsH,IACtBgS,EAAapa,KAAKrB,GAClB0b,EAAiBra,KAAK+Q,EAAM/R,MAAMqH,YAGjC,IAAMlG,KAAMP,EACfyN,EAAQlN,GAAMP,EAAIO,UAKtBqB,EADeoM,EADER,EAAeC,KAEhB,SAAAlN,aAQC2V,OACXI,EAAU,KACVJ,EAAIpO,SAAW4R,EAAerG,IAAI6C,iBAClBA,EAAIpO,uBAAQ,KAAnBgG,iBACDA,EAAItO,WACL2E,EAEH+R,EAAIxF,QAAU5C,EAAIhM,GADLgM,EAAInO,KACS+Q,mBAGvB,YACG/Q,EAAOmO,EAAInO,KACZ2W,IACHA,EAAU,EAERJ,EAAIxF,QADFzJ,MAAMC,QAAQgP,EAAIxF,mBACFwF,EAAIxF,0BAEJwF,EAAIxF,UAG1BwF,EAAIxF,QAAQ5C,EAAI0I,OAAS7W,EAAK+Q,YAQjCwF,EAAIpQ,gBACH1D,EAAQ8T,EAAIxF,YACAwF,EAAIpQ,sBAAO,KAAlBgI,UACH5O,EAAK4O,EAAI5O,UAEP4O,EAAItO,UACL,OACHN,EAAGwR,QAAUtO,aAEV+B,EACHjF,EAAGwR,QAAU5C,EAAIhM,GAAGM,MA7C1B0X,CAAQrM,EAAQlN,OAGX,CACLia,aAAAA,EACAC,iBAAAA,GA3DmBV,CAAW,CAC5Ba,eAAgB5L,EAAUO,GAC1B3B,OAAQ8M,EACRG,eAAgB,IAElBL,EAAeG,EAAWH,aAC1BC,EAAmBE,EAAWF,iBAAiB5W,KAAI,qBAAE6M,WAGvDjN,GAAO,CACLtE,OAAQqb,EACR7T,OAAQ8T,EACRlX,SAAUgX,EAAUhL,EAAS,kDuBrD1B,SACLvI,EACAlD,OAEMxD,EAAS2C,EAAYa,GAAUlD,EAAeoG,EAAQ,iBAC5DkO,GAAQ,CACNvV,KAAMqH,EACN9H,GAAIoB,EACJjB,KAAM,CAACmM,GAAI,WAENlL,mBCVF,SAAiB+I,EAAUrE,EAAmBlB,MAC/C3C,EAASkI,UACJA,KAELlI,EAAQkI,GAAM,KAEZ/I,EADEiP,EAAS/M,GAAU6G,UAErBlI,EAASkI,KACX/I,EAASyE,EAAYC,EAAc,CACjChG,OAAQuQ,EACRxO,KAAMsI,EAAI3H,UACVqP,IAAGjN,IACFiD,GAAGsC,GAAK,SAACmO,EAAG9F,UAAMA,MAEnBvQ,EAAUkI,KACZ/I,EAASyE,EAAYC,EAAc,CACjChG,OAAQuQ,EACRxO,KAAMsI,EAAI3H,UACVqP,IAAGjN,IACFiD,GAAGsC,EAAIkB,MAAM,SAACiN,cAASlX,WAExBiP,GAAQA,EAAOiG,MAAMrQ,MAAM7E,GACxBA,MAEHA,EAA8B2G,MAAMC,QAAQmC,GAAO,GAAK,UAC9DyK,GAAMzK,GAAK,SAACjH,EAAOnB,GACjBX,EAAOW,GAAOE,EAASiB,GAASA,EAAQ2C,EAAY3C,EAAO,CAACrB,KAAME,OAE7DX,sCxByKF,SAAmBY,GACnBqC,IACH+E,EAAW,2DAEPhI,EAASiD,GAASC,KAAKtC,GACvB4Z,EAAavX,UACZ,SAACb,GACNe,GAAO,CACLtE,OAAQmB,EACRqG,OAAQjE,EACRa,SAAUuX,wBAvCT,kBACJpC,IAAAA,OAAQtS,IAAAA,SAAUkT,IAAAA,qBAIsC,SAFvDpL,OAAAA,aAAS,KAIL5N,EAAS,QAHbya,YAIe,CACf7M,YAAaA,iBACOoL,EAAQzE,QAAQhM,uBAAQ,KAAjC1D,UACLiB,EAASjB,KAAWA,EAAMH,cAC5BkJ,EAAO9N,KAAK+E,kBAIeuT,kBAAQ,eAA7BrZ,IAAAA,QACNA,EAAK6B,OAASsH,OACX6D,EAAOhN,EAAPgN,IACFA,IACL/L,EAAO+L,KAJgBrM,MAAPZ,MAIQqH,MAAMlG,IAAImQ,wBAEhBxC,kBAAQ,KAAhB7B,UAAAA,IACNA,UAAY/L,EAAO+L,UAElB/L,wBRvKF,SAA6B6E,EAAqBkV,OACjDjZ,EAAgBG,EAAW8Y,EAAS7X,GAAU2C,OACpDA,EAAMzD,UAAY2Y,EACblV,EAAM/D,mBAIL4Z,EAAmB7V,EAAM/D,cAC/B4Z,EAAiBxZ,KAAOJ,EAAcI,KACtCwZ,EAAiBtZ,UAAYN,EAAcM,UAC3CsZ,EAAiB3Z,SAAWD,EAAcC,cANxC8D,EAAM/D,cAAgBA,iBiC7BnB,mBACD6Z,qBADmBtY,2BAAAA,wBAES4J,GAAoB5J,UAA9CzB,OAAMga,OAAQzO,OACd0O,GAAcD,EAChBC,IACFF,EAAQ/Z,EAAK+Z,MACbC,EAAQha,EAAKga,MACbha,EAAOA,EAAKtB,YAERU,EAAS,GACXoQ,EAAsBvP,EAASD,GAAQA,EAAK0E,QAAU1E,KAC1D4S,GAAMoH,GAAO,SAACpZ,EAAIb,GAEhBX,EAAOW,GAAOyP,EAAQtM,OAAO,CAACtC,GAAAA,EAAIgC,OAAQ2I,IAE1CiE,EAAUA,EAAQtM,OAAO,CACvBtC,GAAI,SAAAmO,UAASnO,EAAGmO,IAChBnM,OAAQ2I,OAGZnM,EAAO8a,GAAK1K,GACRyK,EASG,OAAO7a,EARZwT,GAAMxT,GAAQ,SAAC8C,EAAOnC,GAChBga,EAAMha,IACRiU,GAAQ,CACNvV,KAAMyD,EACNlE,GAAI+b,EAAMha,qE/BQO,gBAEzBF,IAAAA,KACAuU,IAAAA,IACAxU,IAAAA,OACAgB,IAAAA,UAgBOC,EARSjD,EAAW,CACzBO,KAAM,CACJkD,QAAS0S,KAdb5I,KAeItL,KAAAA,EACAuU,IAAAA,EACAxU,OAAAA,KAGuBgB"}